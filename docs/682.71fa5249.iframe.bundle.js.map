{"version":3,"file":"682.71fa5249.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AASA;AAyCA;AACA;AACA;;AAIA;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;;;;;AC5DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;ACjFA;AAoBA;AAGA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;ACjDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;ACvHA;;AAoCA;;AAKA;;;AC2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;;;AAOA;;;AAMA;;AAGA;AAGA;;AChHA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;;;AAGA;;;;;;;;;;;;AC/BA;ACwEA;AAQA;AAsBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA;AAGA;;AC7IA;AACA;AACA;;ACHA;ACwDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;;AAEA;AAKA;AClBA;;;AAGA;AAGA;;AC9DA;;ACDA;ACKA;AACA;;AAMA;;;;;;;;;;;ACVA;;;;;;;;;;;;;;;;AC6CA;;;AAGA;;;AAKA;ACgDA;AACA;AA2EA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAGA;;AC9MA;AACA;;ACFA;;;ACqDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;AAOA;AACA;AACA;;AAKA;;AAWA;AACA;;AAEA;AACA;;;AAMA;;;;AAQA;;;;AAMA;;;;AAOA;;;;AAYA;;;;AAOA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;ACoDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIA;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;ACzFA;AACA;AACA;AACA;;AAkBA;;;;;;;;;;;;;;AAAA;ACoGA;AACA;;AAEA;AAMA;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPA;AC+KA;AACA;ACzIA;;;;;;AASA;ACsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;;AAgBA;;AAGA;AACA;;AAEA;AALA;;AAcA;AACA;AAJA;AAwCA;;AAoBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;;;AAcA;AACA;AACA;AACA;AANA;;AAcA","sources":["webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-picture/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-avatar/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-avatar/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-badge/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-badge/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-button/mwc-button-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-checkbox/mwc-checkbox-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-checkbox/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-checkbox/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-date/lib/daterange/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-formfield/mwc-formfield-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-formfield/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-formfield/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-icon/lib/utils/create-icon.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-icon/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-popover/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-radio/mwc-radio-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-radio/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-radio/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-switch/mwc-switch-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-switch/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-switch/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-textarea/mwc-textarea-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-textinput/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-textinput/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-theme/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-theme/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-ripple/mwc-ripple-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-notched-outline/mwc-notched-outline-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-textfield/mwc-textfield-base.js"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property, state, eventOptions } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { observeIntersection } from '@equinor/fusion-wc-intersection';\nimport PictureEvent from './events/picture-event';\nimport style from './element.css';\nexport class PictureElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Set the picture source\n         * This will be updated if <source> is provided\n         * Use of a data-URI for src is encouraged for instant rendering.\n         */\n        this.src = '//:0';\n        /**\n         * position of image\n         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\n         */\n        this.position = 'center';\n    }\n    /**\n     * Return the current source sets\n     * Since [[HTMLPictureElement]] is not slottable, [[HTMLSourceElement]] provided\n     * by light dom is moved inside the shadow.\n     */\n    get srcSets() {\n        return [...this.querySelectorAll('source')].concat([\n            ...this.renderRoot.querySelectorAll('source'),\n        ]);\n    }\n    get loaded() {\n        return this.hasAttribute('loaded');\n    }\n    render() {\n        const style = {\n            backgroundImage: this.loaded ? `url(${this.currentSrc})` : '',\n            backgroundPosition: this.position || '',\n            backgroundSize: this.cover ? 'cover' : 'contain',\n        };\n        const observerInfo = {\n            cb: ([entry]) => {\n                this.intersected = entry.isIntersecting;\n            },\n            disabled: this.intersected,\n        };\n        return html `\n      <picture style=${styleMap(style)} intersection=${observeIntersection(observerInfo)}>\n        ${this.loaded ? '' : html `<slot name=\"loader\"></slot>`}\n        ${this.lazy && !this.intersected ? '' : this.renderImage()}\n      </picture>\n    `;\n    }\n    renderImage() {\n        return html `\n      ${repeat(this.srcSets, (src) => src.srcset || src.src, (src) => src)}\n      <img\n        src=\"${this.src}\"\n        height=\"${ifDefined(this.width)}\"\n        width=\"${ifDefined(this.height)}\"\n        @load=\"${this._onSourceChange}\"\n      />\n    `;\n    }\n    _onSourceChange(e) {\n        const img = e.target;\n        const { naturalHeight, naturalWidth, currentSrc } = img;\n        if (this.currentSrc !== currentSrc && this._emitChange(img)) {\n            this.currentSrc = currentSrc;\n            this.height = naturalHeight;\n            this.width = naturalWidth;\n            this.setAttribute('loaded', '');\n        }\n    }\n    _emitChange(img, args) {\n        const { naturalHeight, naturalWidth, currentSrc } = img;\n        const detail = { naturalHeight, naturalWidth, currentSrc };\n        const event = new PictureEvent('picture-load', Object.assign(Object.assign({}, args), { detail }));\n        this.dispatchEvent(event);\n        return !event.defaultPrevented;\n    }\n}\nPictureElement.styles = [style];\n__decorate([\n    property()\n], PictureElement.prototype, \"src\", void 0);\n__decorate([\n    property({ reflect: true })\n], PictureElement.prototype, \"position\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PictureElement.prototype, \"cover\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PictureElement.prototype, \"lazy\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"currentSrc\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"height\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"width\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"intersected\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], PictureElement.prototype, \"_onSourceChange\", null);\nexport default PictureElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    position: relative;\n    display: inline-block;\n    --fwc-avatar-font-color: #fff;\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host .fwc-avatar__container {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    overflow: hidden;\n    color: var(--fwc-avatar-font-color);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--fwc-avatar-color);\n  }\n  :host([border]) .fwc-avatar__picture-container {\n    width: calc(100% - 0.5rem);\n    height: calc(100% - 0.5rem);\n  }\n  :host(:not([border])) .fwc-avatar__picture-container {\n    width: 100%;\n    height: 100%;\n  }\n  :host .fwc-avatar__picture-container {\n    border-radius: 50%;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  :host .fwc-avatar__picture {\n    width: 100%;\n    height: 100%;\n  }\n  :host([disabled]) .fwc-avatar__picture {\n    opacity: 0.7;\n  }\n  :host .fwc-avatar__value {\n    display: contents;\n    font-family: Equinor;\n    font-weight: 400;\n  }\n  :host .fwc-avatar__ripple {\n    z-index: 5;\n  }\n  :host([size='x-small']) {\n    width: 1.25rem;\n    height: 1.25rem;\n    font-size: 0.625rem;\n    line-height: 1.25rem;\n  }\n  :host([size='small']) {\n    width: 2rem;\n    height: 2rem;\n    font-size: 1rem;\n    line-height: 2rem;\n  }\n  :host([size='medium']) {\n    width: 3.5rem;\n    height: 3.5rem;\n    font-size: 2rem;\n    line-height: 3.5rem;\n  }\n  :host([size='large']) {\n    width: 5rem;\n    height: 5rem;\n    font-size: 3rem;\n    line-height: 5rem;\n  }\n  :host([color='primary']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([color='secondary']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([color='success']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([color='danger']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='warning']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([color='disabled']) {\n    --fwc-avatar-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n  :host([clickable]:hover) .fwc-avatar__container {\n    cursor: pointer;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property, queryAsync, eventOptions } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport Picture from '@equinor/fusion-wc-picture';\nimport { RippleHandlers } from '@equinor/fusion-wc-ripple';\nimport style from './element.css';\n// persist element\nPicture;\nexport class AvatarElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.size = 'medium';\n        this.rippleHandlers = new RippleHandlers(() => {\n            return this.ripple;\n        });\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('disabled')) {\n            if (this.disabled) {\n                this.color = 'disabled';\n                this.clickable = false;\n            }\n            this.requestUpdate();\n        }\n    }\n    renderPicture() {\n        return html `<div class=\"fwc-avatar__picture-container\">\n      <fwc-picture class=\"fwc-avatar__picture\" src=${ifDefined(this.src)} cover></fwc-picture>\n    </div>`;\n    }\n    renderValue() {\n        return html `<span class=\"fwc-avatar__value\">${this.value}</span>`;\n    }\n    renderSlot() {\n        return html `<slot></slot>`;\n    }\n    render() {\n        const content = this.src ? this.renderPicture() : this.value ? this.renderValue() : this.renderSlot();\n        return html `<span\n      class=\"fwc-avatar__container\"\n      @focus=\"${this.handleRippleFocus}\"\n      @blur=\"${this.handleRippleBlur}\"\n      @mousedown=\"${this.handleRippleActivate}\"\n      @mouseenter=\"${this.handleRippleMouseEnter}\"\n      @mouseleave=\"${this.handleRippleMouseLeave}\"\n      @touchstart=\"${this.handleRippleActivate}\"\n      @touchend=\"${this.handleRippleDeactivate}\"\n      @touchcancel=\"${this.handleRippleDeactivate}\"\n      >${this.renderRipple()}<slot name=\"badge\"></slot>${content}</span\n    >`;\n    }\n    renderRipple() {\n        return this.clickable\n            ? html `<fwc-ripple class=\"fwc-avatar__ripple\" disabled=\"${ifDefined(this.disabled)}\" unbounded></fwc-ripple>`\n            : '';\n    }\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\nAvatarElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], AvatarElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], AvatarElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], AvatarElement.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], AvatarElement.prototype, \"src\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"border\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"disabled\", void 0);\n__decorate([\n    queryAsync('fwc-ripple')\n], AvatarElement.prototype, \"ripple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], AvatarElement.prototype, \"handleRippleActivate\", null);\nexport default AvatarElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-badge-size: 1.5rem;\n    --fwc-badge-font-size: 0.75rem;\n    background-color: var(--fwc-badge-color);\n    min-width: var(--fwc-badge-size);\n    height: var(--fwc-badge-size);\n    font-size: var(--fwc-badge-font-size);\n    border-radius: var(--fwc-badge-font-size);\n    position: absolute;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n    overflow: hidden;\n    color: #fff;\n    z-index: 1;\n  }\n  :host([size='x-small']:not([icon])) {\n    padding: 0 0.15rem;\n  }\n  :host([size='small']:not([icon])) {\n    padding: 0 0.2rem;\n  }\n  :host([size='medium']:not([icon])) {\n    padding: 0 0.35rem;\n  }\n  :host([size='large']:not([icon])) {\n    padding: 0 0.5rem;\n  }\n  :host([size='x-small']) {\n    --fwc-badge-size: 0.75rem;\n    --fwc-badge-font-size: 0.375rem;\n  }\n  :host([size='small']) {\n    --fwc-badge-size: 1rem;\n    --fwc-badge-font-size: 0.5rem;\n  }\n  :host([size='medium']) {\n    --fwc-badge-size: 1.5rem;\n    --fwc-badge-font-size: 0.75rem;\n  }\n  :host([size='large']) {\n    --fwc-badge-size: 2rem;\n    --fwc-badge-font-size: 1rem;\n  }\n  :host([position='top-left']) {\n    transform: scale(1) translate(-50%, -50%);\n    transform-origin: 0% 0%;\n  }\n  :host([position='top-left']:not([circular])) {\n    top: 0;\n    left: 0;\n  }\n  :host([position='top-left'][circular]) {\n    top: 15%;\n    left: 15%;\n  }\n  :host([position='top-right']) {\n    transform: scale(1) translate(50%, -50%);\n    transform-origin: 0% 100%;\n  }\n  :host([position='top-right']:not([circular])) {\n    top: 0;\n    right: 0;\n  }\n  :host([position='top-right'][circular]) {\n    top: 15%;\n    right: 15%;\n  }\n  :host([position='bottom-left']) {\n    transform: scale(1) translate(-50%, 50%);\n    transform-origin: 0% 100%;\n  }\n  :host([position='bottom-left']:not([circular])) {\n    bottom: 0;\n    left: 0;\n  }\n  :host([position='bottom-left'][circular]) {\n    bottom: 15%;\n    left: 15%;\n  }\n  :host([position='bottom-right']) {\n    transform: scale(1) translate(50%, 50%);\n    transform-origin: 100% 100%;\n  }\n  :host([position='bottom-right']:not([circular])) {\n    bottom: 0;\n    right: 0;\n  }\n  :host([position='bottom-right'][circular]) {\n    bottom: 15%;\n    right: 15%;\n  }\n  :host([color='primary']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([color='primary'][clickable]:hover) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.primary__hover.getVariable('color'))};\n  }\n  :host([color='secondary']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([color='secondary'][clickable]:hover) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.secondary__link_hover.getVariable('color'))};\n  }\n  :host([color='success']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([color='success'][clickable]:hover) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.success__hover.getVariable('color'))};\n  }\n  :host([color='danger']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='danger'][clickable]:hover) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.danger__hover.getVariable('color'))};\n  }\n  :host([color='warning']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([color='warning'][clickable]:hover) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.warning__hover.getVariable('color'))};\n  }\n  :host([color='disabled']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n  :host([clickable]:not([disabled]):hover) {\n    cursor: pointer;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport style from './element.css';\n/**\n * Element for rendering a badge\n *\n * TODO: should have better behaviour for slotted elements\n */\nexport class BadgeElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the badge\n         * @default medium\n         */\n        this.size = 'medium';\n        /**\n         * Absolute corner position for the badge\n         * @default top-right\n         */\n        this.position = 'top-right';\n        /**\n         * Color of the badge\n         * @default secondary\n         */\n        this.color = 'secondary';\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('disabled')) {\n            if (this.disabled) {\n                this.clickable = false;\n                this.color = 'disabled';\n                this.requestUpdate('clickable');\n                this.requestUpdate('color');\n            }\n        }\n    }\n    renderIcon() {\n        return html `<fwc-icon icon=${ifDefined(this.icon)}></fwc-icon>`;\n    }\n    render() {\n        return html `\n      <span>\n        <slot>${this.icon ? this.renderIcon() : this.value}</slot>\n      </span>\n    `;\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"position\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], BadgeElement.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"circular\", void 0);\n__decorate([\n    property({ type: String })\n], BadgeElement.prototype, \"tooltip\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"disabled\", void 0);\nBadgeElement.styles = [style];\nexport default BadgeElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-icon/mwc-icon';\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { eventOptions, html, LitElement, property, query, queryAsync, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n/** @soyCompatible */\nexport class ButtonBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.raised = false;\n        this.unelevated = false;\n        this.outlined = false;\n        this.dense = false;\n        this.disabled = false;\n        this.trailingIcon = false;\n        this.fullwidth = false;\n        this.icon = '';\n        this.label = '';\n        this.expandContent = false;\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    /** @soyTemplate */\n    renderOverlay() {\n        return html ``;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        const filled = this.raised || this.unelevated;\n        return this.shouldRenderRipple ?\n            html `<mwc-ripple class=\"ripple\" .primary=\"${!filled}\" .disabled=\"${this.disabled}\"></mwc-ripple>` :\n            '';\n    }\n    focus() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.startFocus();\n            buttonElement.focus();\n        }\n    }\n    blur() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.endFocus();\n            buttonElement.blur();\n        }\n    }\n    /** @soyTemplate */\n    getRenderClasses() {\n        return {\n            'mdc-button--raised': this.raised,\n            'mdc-button--unelevated': this.unelevated,\n            'mdc-button--outlined': this.outlined,\n            'mdc-button--dense': this.dense,\n        };\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes buttonAttributes: #button\n     * @soyClasses buttonClasses: #button\n     */\n    render() {\n        return html `\n      <button\n          id=\"button\"\n          class=\"mdc-button ${classMap(this.getRenderClasses())}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n          @focus=\"${this.handleRippleFocus}\"\n          @blur=\"${this.handleRippleBlur}\"\n          @mousedown=\"${this.handleRippleActivate}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleActivate}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        ${this.renderOverlay()}\n        ${this.renderRipple()}\n        <span class=\"leading-icon\">\n          <slot name=\"icon\">\n            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n        <span class=\"mdc-button__label\">${this.label}</span>\n        <span class=\"slot-container ${classMap({\n            flex: this.expandContent\n        })}\">\n          <slot></slot>\n        </span>\n        <span class=\"trailing-icon\">\n          <slot name=\"trailingIcon\">\n            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n      </button>`;\n    }\n    /** @soyTemplate */\n    renderIcon() {\n        return html `\n    <mwc-icon class=\"mdc-button__icon\">\n      ${this.icon}\n    </mwc-icon>`;\n    }\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\nButtonBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-haspopup' })\n], ButtonBase.prototype, \"ariaHasPopup\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"raised\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"unelevated\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"dense\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'trailingicon' })\n], ButtonBase.prototype, \"trailingIcon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"expandContent\", void 0);\n__decorate([\n    query('#button')\n], ButtonBase.prototype, \"buttonElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], ButtonBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], ButtonBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], ButtonBase.prototype, \"handleRippleActivate\", null);\n//# sourceMappingURL=mwc-button-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-button/styles.css';\nexport const style = css `\n  :host {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-button-disabled-fill-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n    --mdc-button-disabled-ink-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    --mdc-button-disabled-outline-color: ${unsafeCSS(theme.colors.interactive.disabled__border.getVariable('color'))};\n    --mdc-typography-button-text-transform: none;\n  }\n  :host([variant='contained'][color='primary']) .mdc-button {\n    background-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='contained'][color='secondary']) .mdc-button {\n    background-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='contained'][color='danger']) .mdc-button {\n    background-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='primary']) .mdc-button {\n    border-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='secondary']) .mdc-button {\n    border-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='danger']) .mdc-button {\n    border-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='primary']) .mdc-button {\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='secondary']) .mdc-button {\n    color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='danger']) .mdc-button {\n    color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  .leading-icon ::slotted(*),\n  .trailing-icon ::slotted(*) {\n    display: initial;\n  }\n  .leading-icon fwc-icon.mdc-button__icon,\n  .leading-icon ::slotted(fwc-icon),\n  .trailing-icon fwc-icon.mdc-button__icon,\n  .trailing-icon ::slotted(fwc-icon) {\n    display: inline-flex;\n  }\n`;\nexport const styles = [mdcStyle, style];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ButtonBase } from '@material/mwc-button/mwc-button-base';\nimport Icon from '@equinor/fusion-wc-icon';\nimport styles from './element.css';\n// persist element\nIcon;\nexport class ButtonElement extends ButtonBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Leading icon to display in input\n         * @See [`fwc-icon`](https://github.com/equinor/fusion-web-components/tree/main/packages/icon)\n         * @override\n         */\n        // @ts-ignore\n        this.icon = '';\n        this.color = 'primary';\n        this.variant = 'contained';\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            switch (this.variant) {\n                case 'contained': {\n                    this.unelevated = true;\n                    this.raised = false;\n                    this.outlined = false;\n                    break;\n                }\n                case 'outlined': {\n                    this.unelevated = false;\n                    this.raised = false;\n                    this.outlined = true;\n                    break;\n                }\n                case 'ghost': {\n                    this.unelevated = false;\n                    this.raised = false;\n                    this.outlined = false;\n                    break;\n                }\n            }\n            this.requestUpdate();\n        }\n    }\n    renderIcon() {\n        return html `<fwc-icon class=\"mdc-button__icon\" .icon=${this.icon}></fwc-icon>`;\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], ButtonElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ButtonElement.prototype, \"variant\", void 0);\nButtonElement.styles = styles;\nexport default ButtonElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { FormElement } from '@material/mwc-base/form-element';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { eventOptions, html, property, query, queryAsync, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n/** @soyCompatible */\nexport class CheckboxBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.checked = false;\n        this.indeterminate = false;\n        this.disabled = false;\n        this.name = '';\n        this.value = 'on';\n        /**\n         * Touch target extends beyond visual boundary of a component by default.\n         * Set to `true` to remove touch target added to the component.\n         * @see https://material.io/design/usability/accessibility.html\n         */\n        this.reducedTouchTarget = false;\n        this.animationClass = '';\n        this.shouldRenderRipple = false;\n        this.focused = false;\n        // MDC Foundation is unused\n        this.mdcFoundationClass = undefined;\n        this.mdcFoundation = undefined;\n        this.rippleElement = null;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            this.ripple.then((v) => this.rippleElement = v);\n            return this.ripple;\n        });\n    }\n    createAdapter() {\n        return {};\n    }\n    update(changedProperties) {\n        const oldIndeterminate = changedProperties.get('indeterminate');\n        const oldChecked = changedProperties.get('checked');\n        const oldDisabled = changedProperties.get('disabled');\n        if (oldIndeterminate !== undefined || oldChecked !== undefined ||\n            oldDisabled !== undefined) {\n            const oldState = this.calculateAnimationStateName(!!oldChecked, !!oldIndeterminate, !!oldDisabled);\n            const newState = this.calculateAnimationStateName(this.checked, this.indeterminate, this.disabled);\n            this.animationClass = `${oldState}-${newState}`;\n        }\n        super.update(changedProperties);\n    }\n    calculateAnimationStateName(checked, indeterminate, disabled) {\n        if (disabled) {\n            return 'disabled';\n        }\n        else if (indeterminate) {\n            return 'indeterminate';\n        }\n        else if (checked) {\n            return 'checked';\n        }\n        else {\n            return 'unchecked';\n        }\n    }\n    // TODO(dfreedm): Make this use selected as a param after Polymer/internal#739\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? this.renderRippleTemplate() : '';\n    }\n    /** @soyTemplate */\n    renderRippleTemplate() {\n        return html `<mwc-ripple\n        .disabled=\"${this.disabled}\"\n        unbounded></mwc-ripple>`;\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes checkboxAttributes: input\n     * @soyClasses checkboxClasses: .mdc-checkbox\n     */\n    render() {\n        const selected = this.indeterminate || this.checked;\n        /* eslint-disable eqeqeq */\n        // tslint:disable:triple-equals\n        /** @classMap */\n        const classes = {\n            'mdc-checkbox--disabled': this.disabled,\n            'mdc-checkbox--selected': selected,\n            'mdc-checkbox--touch': !this.reducedTouchTarget,\n            'mdc-ripple-upgraded--background-focused': this.focused,\n            // transition animiation classes\n            'mdc-checkbox--anim-checked-indeterminate': this.animationClass == 'checked-indeterminate',\n            'mdc-checkbox--anim-checked-unchecked': this.animationClass == 'checked-unchecked',\n            'mdc-checkbox--anim-indeterminate-checked': this.animationClass == 'indeterminate-checked',\n            'mdc-checkbox--anim-indeterminate-unchecked': this.animationClass == 'indeterminate-unchecked',\n            'mdc-checkbox--anim-unchecked-checked': this.animationClass == 'unchecked-checked',\n            'mdc-checkbox--anim-unchecked-indeterminate': this.animationClass == 'unchecked-indeterminate',\n        };\n        // tslint:enable:triple-equals\n        /* eslint-enable eqeqeq */\n        const ariaChecked = this.indeterminate ? 'mixed' : undefined;\n        return html `\n      <div class=\"mdc-checkbox mdc-checkbox--upgraded ${classMap(classes)}\">\n        <input type=\"checkbox\"\n              class=\"mdc-checkbox__native-control\"\n              name=\"${ifDefined(this.name)}\"\n              aria-checked=\"${ifDefined(ariaChecked)}\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              aria-describedby=\"${ifDefined(this.ariaDescribedBy)}\"\n              data-indeterminate=\"${this.indeterminate ? 'true' : 'false'}\"\n              ?disabled=\"${this.disabled}\"\n              .indeterminate=\"${this.indeterminate}\"\n              .checked=\"${this.checked}\"\n              .value=\"${this.value}\"\n              @change=\"${this.handleChange}\"\n              @focus=\"${this.handleFocus}\"\n              @blur=\"${this.handleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n        <div class=\"mdc-checkbox__background\"\n          @animationend=\"${this.resetAnimationClass}\">\n          <svg class=\"mdc-checkbox__checkmark\"\n              viewBox=\"0 0 24 24\">\n            <path class=\"mdc-checkbox__checkmark-path\"\n                  fill=\"none\"\n                  d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n          <div class=\"mdc-checkbox__mixedmark\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n    }\n    setFormData(formData) {\n        if (this.name && this.checked) {\n            formData.append(this.name, this.value);\n        }\n    }\n    handleFocus() {\n        this.focused = true;\n        this.handleRippleFocus();\n    }\n    handleBlur() {\n        this.focused = false;\n        this.handleRippleBlur();\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    handleChange() {\n        this.checked = this.formElement.checked;\n        this.indeterminate = this.formElement.indeterminate;\n    }\n    resetAnimationClass() {\n        this.animationClass = '';\n    }\n    get isRippleActive() {\n        var _a;\n        return ((_a = this.rippleElement) === null || _a === void 0 ? void 0 : _a.isActive) || false;\n    }\n}\n__decorate([\n    query('.mdc-checkbox')\n], CheckboxBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], CheckboxBase.prototype, \"formElement\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"checked\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CheckboxBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], CheckboxBase.prototype, \"value\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], CheckboxBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-labelledby' })\n], CheckboxBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-describedby' })\n], CheckboxBase.prototype, \"ariaDescribedBy\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"reducedTouchTarget\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"animationClass\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"focused\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], CheckboxBase.prototype, \"ripple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], CheckboxBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-checkbox-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --mdc-checkbox-ink-color: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --mdc-checkbox-unchecked-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-checkbox-disabled-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { CheckboxBase } from '@material/mwc-checkbox/mwc-checkbox-base';\nimport { styles as mdcStyle } from '@material/mwc-checkbox/mwc-checkbox.css';\nimport style from './element.css';\nexport class CheckboxElement extends CheckboxBase {\n}\nCheckboxElement.styles = [mdcStyle, style];\nexport default CheckboxElement;\n//# sourceMappingURL=element.js.map","import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { formatDistance, formatRelative } from 'date-fns';\nimport { enGB } from 'date-fns/locale';\nimport { dateConverter, resolveLocale } from '../utils';\nimport '../datetime';\nexport class DateRangeElement extends LitElement {\n    constructor() {\n        //#region Attributes\n        super(...arguments);\n        this.suffix = undefined;\n        this.from = new Date();\n        this.seconds = undefined;\n        /** date-fns/locale */\n        this.locale = enGB.code;\n        this.variant = 'datetime';\n        this.weekstart = 1;\n        this.format = undefined;\n        this.capitalize = undefined;\n        this.formatText = (value) => {\n            return this.capitalize ? value.charAt(0).toUpperCase() + value.slice(1) : value;\n        };\n    }\n    //#endregion\n    // #region PROPS\n    get Locale() {\n        return resolveLocale(this.locale);\n    }\n    get Distance() {\n        return formatDistance(this.from, this.to || new Date(), {\n            locale: this.Locale,\n            addSuffix: this.suffix,\n            includeSeconds: this.seconds,\n        });\n    }\n    get Relative() {\n        return formatRelative(this.from, this.to || new Date(), {\n            locale: this.Locale,\n            weekStartsOn: this.weekstart,\n        });\n    }\n    //#endregion\n    /** @overide */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('format')) {\n            if (this.format !== undefined && this.variant !== 'datetime') {\n                this.variant = 'datetime';\n            }\n            this.requestUpdate();\n        }\n    }\n    render() {\n        var _a, _b;\n        switch (this.variant) {\n            case 'relative':\n                return html `<span>\n          <time data-date-start=${this.from.toISOString()}></time>\n          <time data-date-end=${ifDefined((_a = this.to) === null || _a === void 0 ? void 0 : _a.toISOString())}></time>\n          ${this.formatText(this.Relative)}\n        </span>`;\n            case 'distance':\n                return html `<span>\n          <time data-date-start=${this.from.toISOString()}></time>\n          <time data-date-end=${ifDefined((_b = this.to) === null || _b === void 0 ? void 0 : _b.toISOString())}></time>\n          ${this.formatText(this.Distance)}\n        </span>`;\n            case 'datetime':\n                return html `<span>\n          <fwc-datetime .date=${this.from} format=${ifDefined(this.format)}></fwc-datetime>\n          <slot name=\"separator\"><span>-</span></slot>\n          <fwc-datetime .date=${this.to} format=${ifDefined(this.format)}></fwc-datetime>\n        </span>`;\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"suffix\", void 0);\n__decorate([\n    property({ type: String, converter: dateConverter })\n], DateRangeElement.prototype, \"from\", void 0);\n__decorate([\n    property({ type: String, converter: dateConverter })\n], DateRangeElement.prototype, \"to\", void 0);\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"seconds\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DateRangeElement.prototype, \"locale\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DateRangeElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: Number })\n], DateRangeElement.prototype, \"weekstart\", void 0);\n__decorate([\n    property({ type: String })\n], DateRangeElement.prototype, \"format\", void 0);\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"capitalize\", void 0);\nexport default DateRangeElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport { FormElement } from '@material/mwc-base/form-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { html, property, query, queryAssignedNodes } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nexport class FormfieldBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.alignEnd = false;\n        this.spaceBetween = false;\n        this.nowrap = false;\n        this.label = '';\n        this.mdcFoundationClass = MDCFormFieldFoundation;\n    }\n    createAdapter() {\n        return {\n            registerInteractionHandler: (type, handler) => {\n                this.labelEl.addEventListener(type, handler);\n            },\n            deregisterInteractionHandler: (type, handler) => {\n                this.labelEl.removeEventListener(type, handler);\n            },\n            activateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.startPress();\n                    }\n                }\n            },\n            deactivateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.endPress();\n                    }\n                }\n            },\n        };\n    }\n    get input() {\n        var _a, _b;\n        return (_b = (_a = this.slottedInputs) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    render() {\n        const classes = {\n            'mdc-form-field--align-end': this.alignEnd,\n            'mdc-form-field--space-between': this.spaceBetween,\n            'mdc-form-field--nowrap': this.nowrap\n        };\n        return html `\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n    }\n    _labelClick() {\n        const input = this.input;\n        if (input) {\n            input.focus();\n            input.click();\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"alignEnd\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"spaceBetween\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"nowrap\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(async function (label) {\n        var _a;\n        (_a = this.input) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-label', label);\n    })\n], FormfieldBase.prototype, \"label\", void 0);\n__decorate([\n    query('.mdc-form-field')\n], FormfieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '*')\n], FormfieldBase.prototype, \"slottedInputs\", void 0);\n__decorate([\n    query('label')\n], FormfieldBase.prototype, \"labelEl\", void 0);\n//# sourceMappingURL=mwc-formfield-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  .mdc-label {\n    ${unsafeCSS(theme.typography.input.label)};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { FormfieldBase } from '@material/mwc-formfield/mwc-formfield-base';\nimport { styles as mdcStyle } from '@material/mwc-formfield/mwc-formfield.css';\nimport style from './element.css';\nexport class FormfieldElement extends FormfieldBase {\n}\nFormfieldElement.styles = [mdcStyle, style];\nexport default FormfieldElement;\n//# sourceMappingURL=element.js.map","import { svg } from 'lit';\nimport * as edsIcons from '@equinor/eds-icons';\nexport const iconNames = Object.keys(edsIcons);\nexport var IconType;\n(function (IconType) {\n    IconType[\"EDS\"] = \"eds\";\n})(IconType || (IconType = {}));\nexport const createSvg = ({ height, width, svgPathData }) => svg `\n  <svg viewBox=\"0 0 ${width} ${height}\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"${svgPathData}\"></path>\n  </svg>\n`;\nexport const createIcon = (name, type = IconType.EDS) => {\n    switch (type) {\n        case IconType.EDS:\n            return createSvg(edsIcons[name]);\n    }\n};\nexport default createIcon;\n//# sourceMappingURL=create-icon.js.map","import { __decorate } from \"tslib\";\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport createIcon from './utils/create-icon';\nimport { style } from './element.css';\nexport class IconElement extends LitElement {\n    render() {\n        return createIcon(this.icon);\n    }\n}\nIconElement.styles = [style];\n__decorate([\n    property()\n], IconElement.prototype, \"icon\", void 0);\n__decorate([\n    property()\n], IconElement.prototype, \"type\", void 0);\n//# sourceMappingURL=element.js.map","import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property, queryAsync, eventOptions } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport style from './element.css';\nimport { popperjs } from './directories/popperjs';\n/**\n * Element wrapper for PopperJS\n */\nexport class PopoverElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.placement = 'auto';\n        this.triggers = [];\n        this._modifiers = [];\n    }\n    get options() {\n        const { placement, disabled, modifiers } = this;\n        const enabled = !disabled && (this.triggers.includes('hover') || this.show);\n        return { placement, enabled, modifiers };\n    }\n    get modifiers() {\n        var _a;\n        return [\n            {\n                name: 'flip',\n                enabled: !!this.flip || !!((_a = this.placement) === null || _a === void 0 ? void 0 : _a.match(/auto/)),\n            },\n            {\n                name: 'offset',\n                options: {\n                    offset: this.offset,\n                },\n            },\n            ...this._modifiers,\n        ];\n    }\n    /** Set popper modifiers for element */\n    set modifiers(modifiers) {\n        this._modifiers = modifiers;\n        this.requestUpdate();\n    }\n    render() {\n        const popperClasses = this.disabled\n            ? 'disabled'\n            : classMap({\n                show: !!this.show,\n                hover: this.triggers.includes('hover'),\n            });\n        return html `\n      <span id=\"content\" popperjs=${popperjs(this.popper, this.options)} @click=${this.handleClick}>\n        <slot></slot>\n      </span>\n      <span id=\"popper\" class=${popperClasses}>\n        <slot name=\"popover\"></slot>\n      </span>\n    `;\n    }\n    handleClick() {\n        if (this.triggers.includes('click')) {\n            this.show = !this.show;\n        }\n    }\n}\nPopoverElement.styles = [style];\n__decorate([\n    property({ reflect: true })\n], PopoverElement.prototype, \"placement\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"show\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"flip\", void 0);\n__decorate([\n    property({ type: Array })\n], PopoverElement.prototype, \"offset\", void 0);\n__decorate([\n    property({ type: Array })\n], PopoverElement.prototype, \"triggers\", void 0);\n__decorate([\n    queryAsync('#popper')\n], PopoverElement.prototype, \"popper\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], PopoverElement.prototype, \"handleClick\", null);\nexport default PopoverElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { SingleSelectionController } from '@material/mwc-radio/single-selection-controller';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport MDCRadioFoundation from '@material/radio/foundation';\nimport { eventOptions, html, property, query, queryAsync, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n/**\n * @fires checked\n * @soyCompatible\n */\nexport class RadioBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this._checked = false;\n        this.useStateLayerCustomProperties = false;\n        this.global = false;\n        this.disabled = false;\n        this.value = 'on';\n        this.name = '';\n        /**\n         * Touch target extends beyond visual boundary of a component by default.\n         * Set to `true` to remove touch target added to the component.\n         * @see https://material.io/design/usability/accessibility.html\n         */\n        this.reducedTouchTarget = false;\n        this.mdcFoundationClass = MDCRadioFoundation;\n        /**\n         * input's tabindex is updated based on checked status.\n         * Tab navigation will be removed from unchecked radios.\n         */\n        this.formElementTabIndex = 0;\n        this.focused = false;\n        this.shouldRenderRipple = false;\n        this.rippleElement = null;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            this.ripple.then((v) => {\n                this.rippleElement = v;\n            });\n            return this.ripple;\n        });\n    }\n    get checked() {\n        return this._checked;\n    }\n    /**\n     * We define our own getter/setter for `checked` because we need to track\n     * changes to it synchronously.\n     *\n     * The order in which the `checked` property is set across radio buttons\n     * within the same group is very important. However, we can't rely on\n     * UpdatingElement's `updated` callback to observe these changes (which is\n     * also what the `@observer` decorator uses), because it batches changes to\n     * all properties.\n     *\n     * Consider:\n     *\n     *   radio1.disabled = true;\n     *   radio2.checked = true;\n     *   radio1.checked = true;\n     *\n     * In this case we'd first see all changes for radio1, and then for radio2,\n     * and we couldn't tell that radio1 was the most recently checked.\n     */\n    set checked(isChecked) {\n        var _a, _b;\n        const oldValue = this._checked;\n        if (isChecked === oldValue) {\n            return;\n        }\n        this._checked = isChecked;\n        if (this.formElement) {\n            this.formElement.checked = isChecked;\n        }\n        (_a = this._selectionController) === null || _a === void 0 ? void 0 : _a.update(this);\n        if (isChecked === false) {\n            // Remove focus ring when unchecked on other radio programmatically.\n            // Blur on input since this determines the focus style.\n            (_b = this.formElement) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n        this.requestUpdate('checked', oldValue);\n        // useful when unchecks self and wrapping element needs to synchronize\n        // TODO(b/168543810): Remove triggering event on programmatic API call.\n        this.dispatchEvent(new Event('checked', { bubbles: true, composed: true }));\n    }\n    _handleUpdatedValue(newValue) {\n        // the observer function can't access protected fields (according to\n        // closure compiler) because it's not a method on the class, so we need this\n        // wrapper.\n        this.formElement.value = newValue;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? html `<mwc-ripple unbounded accent\n        .internalUseStateLayerCustomProperties=\"${this.useStateLayerCustomProperties}\"\n        .disabled=\"${this.disabled}\"></mwc-ripple>` :\n            '';\n    }\n    get isRippleActive() {\n        var _a;\n        return ((_a = this.rippleElement) === null || _a === void 0 ? void 0 : _a.isActive) || false;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note that we must defer creating the selection controller until the\n        // element has connected, because selection controllers are keyed by the\n        // radio's shadow root. For example, if we're stamping in a lit-html map\n        // or repeat, then we'll be constructed before we're added to a root node.\n        //\n        // Also note if we aren't using native shadow DOM, we still need a\n        // SelectionController, because we should update checked status of other\n        // radios in the group when selection changes. It also simplifies\n        // implementation and testing to use one in all cases.\n        //\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        this._selectionController = SingleSelectionController.getController(this);\n        this._selectionController.register(this);\n        // Radios maybe checked before connected, update selection as soon it is\n        // connected to DOM. Last checked radio button in the DOM will be selected.\n        //\n        // NOTE: If we update selection only after firstUpdate() we might mistakenly\n        // update checked status before other radios are rendered.\n        this._selectionController.update(this);\n    }\n    disconnectedCallback() {\n        // The controller is initialized in connectedCallback, so if we are in\n        // disconnectedCallback then it must be initialized.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this._selectionController.unregister(this);\n        this._selectionController = undefined;\n    }\n    focus() {\n        this.formElement.focus();\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { setNativeControlDisabled: (disabled) => {\n                this.formElement.disabled = disabled;\n            } });\n    }\n    handleFocus() {\n        this.focused = true;\n        this.handleRippleFocus();\n    }\n    handleClick() {\n        // Firefox has weird behavior with radios if they are not focused\n        this.formElement.focus();\n    }\n    handleBlur() {\n        this.focused = false;\n        this.formElement.blur();\n        this.rippleHandlers.endFocus();\n    }\n    setFormData(formData) {\n        if (this.name && this.checked) {\n            formData.append(this.name, this.value);\n        }\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes radioAttributes: input\n     * @soyClasses radioClasses: .mdc-radio\n     */\n    render() {\n        /** @classMap */\n        const classes = {\n            'mdc-radio--touch': !this.reducedTouchTarget,\n            'mdc-ripple-upgraded--background-focused': this.focused,\n            'mdc-radio--disabled': this.disabled,\n        };\n        return html `\n      <div class=\"mdc-radio ${classMap(classes)}\">\n        <input\n          tabindex=\"${this.formElementTabIndex}\"\n          class=\"mdc-radio__native-control\"\n          type=\"radio\"\n          name=\"${this.name}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n          aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n          .checked=\"${this.checked}\"\n          .value=\"${this.value}\"\n          ?disabled=\"${this.disabled}\"\n          @change=\"${this.changeHandler}\"\n          @focus=\"${this.handleFocus}\"\n          @click=\"${this.handleClick}\"\n          @blur=\"${this.handleBlur}\"\n          @mousedown=\"${this.handleRippleMouseDown}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleTouchStart}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        <div class=\"mdc-radio__background\">\n          <div class=\"mdc-radio__outer-circle\"></div>\n          <div class=\"mdc-radio__inner-circle\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    changeHandler() {\n        this.checked = this.formElement.checked;\n    }\n}\n__decorate([\n    query('.mdc-radio')\n], RadioBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], RadioBase.prototype, \"formElement\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"useStateLayerCustomProperties\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RadioBase.prototype, \"global\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], RadioBase.prototype, \"checked\", null);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (disabled) {\n        this.mdcFoundation.setDisabled(disabled);\n    })\n], RadioBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        this._handleUpdatedValue(value);\n    })\n], RadioBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], RadioBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RadioBase.prototype, \"reducedTouchTarget\", void 0);\n__decorate([\n    property({ type: Number })\n], RadioBase.prototype, \"formElementTabIndex\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"focused\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], RadioBase.prototype, \"ripple\", void 0);\n__decorate([\n    ariaProperty,\n    property({ attribute: 'aria-label' })\n], RadioBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ attribute: 'aria-labelledby' })\n], RadioBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], RadioBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-radio-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --mdc-radio-unchecked-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-radio-disabled-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { RadioBase } from '@material/mwc-radio/mwc-radio-base';\nimport { styles as mdcStyle } from '@material/mwc-radio/mwc-radio.css';\nimport { style } from './element.css';\nexport class RadioElement extends RadioBase {\n}\nRadioElement.styles = [mdcStyle, style];\nexport default RadioElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { FormElement } from '@material/mwc-base/form-element';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { MDCSwitchFoundation } from '@material/switch/foundation';\nimport { eventOptions, html, property, query, queryAsync, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nexport class SwitchBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        // MDCSwitchState\n        this.processing = false;\n        this.selected = false;\n        // Aria\n        /** @soyPrefixAttribute */\n        this.ariaLabel = '';\n        /** @soyPrefixAttribute */\n        this.ariaLabelledBy = '';\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n        // FormElement\n        this.name = '';\n        this.value = 'on';\n        this.mdcFoundationClass = MDCSwitchFoundation;\n    }\n    setFormData(formData) {\n        if (this.name && this.selected) {\n            formData.append(this.name, this.value);\n        }\n    }\n    click() {\n        var _a, _b;\n        // Switch uses a hidden input as its form element, but a different <button>\n        // for interaction. It overrides click() from FormElement to avoid clicking\n        // the hidden input.\n        if (this.disabled) {\n            return;\n        }\n        (_a = this.mdcRoot) === null || _a === void 0 ? void 0 : _a.focus();\n        (_b = this.mdcRoot) === null || _b === void 0 ? void 0 : _b.click();\n    }\n    /** @soyTemplate */\n    render() {\n        return html `\n      <button\n        type=\"button\"\n        class=\"mdc-switch ${classMap(this.getRenderClasses())}\"\n        role=\"switch\"\n        aria-checked=\"${this.selected}\"\n        aria-label=\"${ifDefined(this.ariaLabel || undefined)}\"\n        aria-labelledby=\"${ifDefined(this.ariaLabelledBy || undefined)}\"\n        .disabled=${this.disabled}\n        @click=${this.handleClick}\n        @focus=\"${this.handleFocus}\"\n        @blur=\"${this.handleBlur}\"\n        @pointerdown=\"${this.handlePointerDown}\"\n        @pointerup=\"${this.handlePointerUp}\"\n        @pointerenter=\"${this.handlePointerEnter}\"\n        @pointerleave=\"${this.handlePointerLeave}\"\n      >\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__handle-track\">\n          ${this.renderHandle()}\n        </div>\n      </button>\n\n      <input\n        type=\"checkbox\"\n        aria-hidden=\"true\"\n        name=\"${this.name}\"\n        .checked=${this.selected}\n        .value=${this.value}\n      >\n    `;\n    }\n    /** @soyTemplate */\n    getRenderClasses() {\n        return {\n            'mdc-switch--processing': this.processing,\n            'mdc-switch--selected': this.selected,\n            'mdc-switch--unselected': !this.selected,\n        };\n    }\n    /** @soyTemplate */\n    renderHandle() {\n        return html `\n      <div class=\"mdc-switch__handle\">\n        ${this.renderShadow()}\n        ${this.renderRipple()}\n        <div class=\"mdc-switch__icons\">\n          ${this.renderOnIcon()}\n          ${this.renderOffIcon()}\n        </div>\n      </div>\n    `;\n    }\n    /** @soyTemplate */\n    renderShadow() {\n        return html `\n      <div class=\"mdc-switch__shadow\">\n        <div class=\"mdc-elevation-overlay\"></div>\n      </div>\n    `;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        if (this.shouldRenderRipple) {\n            return html `\n        <div class=\"mdc-switch__ripple\">\n          <mwc-ripple\n            internalUseStateLayerCustomProperties\n            .disabled=\"${this.disabled}\"\n            unbounded>\n          </mwc-ripple>\n        </div>\n      `;\n        }\n        else {\n            return html ``;\n        }\n    }\n    /** @soyTemplate */\n    renderOnIcon() {\n        return html `\n      <svg class=\"mdc-switch__icon mdc-switch__icon--on\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n      </svg>\n    `;\n    }\n    /** @soyTemplate */\n    renderOffIcon() {\n        return html `\n      <svg class=\"mdc-switch__icon mdc-switch__icon--off\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 13H4v-2h16v2z\" />\n      </svg>\n    `;\n    }\n    handleClick() {\n        var _a;\n        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleClick();\n    }\n    handleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    handlePointerDown(event) {\n        event.target.setPointerCapture(event.pointerId);\n        this.rippleHandlers.startPress(event);\n    }\n    handlePointerUp() {\n        this.rippleHandlers.endPress();\n    }\n    handlePointerEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handlePointerLeave() {\n        this.rippleHandlers.endHover();\n    }\n    createAdapter() {\n        return { state: this };\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], SwitchBase.prototype, \"processing\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SwitchBase.prototype, \"selected\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], SwitchBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-labelledby' })\n], SwitchBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], SwitchBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], SwitchBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], SwitchBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], SwitchBase.prototype, \"value\", void 0);\n__decorate([\n    query('input')\n], SwitchBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('.mdc-switch')\n], SwitchBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], SwitchBase.prototype, \"handlePointerDown\", null);\n//# sourceMappingURL=mwc-switch-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --mdc-switch-selected-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-focus-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-pressed-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-hover-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-hover-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-selected-focus-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-selected-pressed-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-hover-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-focus-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-pressed-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { SwitchBase } from '@material/mwc-switch/mwc-switch-base';\nimport { styles as mdcStyle } from '@material/mwc-switch/styles.css';\nimport style from './element.css';\nexport class SwitchElement extends SwitchBase {\n}\nSwitchElement.styles = [mdcStyle, style];\nexport default SwitchElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { TextFieldBase } from '@material/mwc-textfield/mwc-textfield-base';\nimport { html, property, query } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { live } from 'lit-html/directives/live.js';\nconst booleanOrStringConverter = {\n    fromAttribute(value) {\n        if (value === null) {\n            return false;\n        }\n        else if (value === '') {\n            return true;\n        }\n        return value;\n    },\n    toAttribute(value) {\n        if (typeof value === 'boolean') {\n            return value ? '' : null;\n        }\n        return value;\n    }\n};\n/** @soyCompatible */\nexport class TextAreaBase extends TextFieldBase {\n    constructor() {\n        super(...arguments);\n        this.rows = 2;\n        this.cols = 20;\n        this.charCounter = false;\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n        const shouldRenderInternalCharCounter = shouldRenderCharCounter && this.charCounter === 'internal';\n        const shouldRenderExternalCharCounter = shouldRenderCharCounter && !shouldRenderInternalCharCounter;\n        const shouldRenderHelperText = !!this.helper || !!this.validationMessage ||\n            shouldRenderExternalCharCounter;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field--disabled': this.disabled,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--filled': !this.outlined,\n            'mdc-text-field--outlined': this.outlined,\n            'mdc-text-field--end-aligned': this.endAligned,\n            'mdc-text-field--with-internal-counter': shouldRenderInternalCharCounter,\n        };\n        return html `\n      <label class=\"mdc-text-field mdc-text-field--textarea ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderInput()}\n        ${this.renderCharCounter(shouldRenderInternalCharCounter)}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderExternalCharCounter)}\n    `;\n    }\n    /** @soyTemplate */\n    renderInput() {\n        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n        const autocapitalizeOrUndef = this.autocapitalize ?\n            this.autocapitalize :\n            undefined;\n        return html `\n      <textarea\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          class=\"mdc-text-field__input\"\n          .value=\"${live(this.value)}\"\n          rows=\"${this.rows}\"\n          cols=\"${this.cols}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @blur=\"${this.onInputBlur}\">\n      </textarea>`;\n    }\n}\n__decorate([\n    query('textarea')\n], TextAreaBase.prototype, \"formElement\", void 0);\n__decorate([\n    property({ type: Number })\n], TextAreaBase.prototype, \"rows\", void 0);\n__decorate([\n    property({ type: Number })\n], TextAreaBase.prototype, \"cols\", void 0);\n__decorate([\n    property({ converter: booleanOrStringConverter })\n], TextAreaBase.prototype, \"charCounter\", void 0);\n//# sourceMappingURL=mwc-textarea-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-textfield/mwc-textfield.css';\nexport const attributes = css `\n  :host {\n    --fwc-text-field-base-color: ${unsafeCSS(theme.colors.text.static_icons__tertiary.getVariable('color'))};\n    --fwc-text-field-fill-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-text-field-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n    --fwc-text-field-disabled-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n  }\n`;\nexport const mdcOverride = css `\n  :host {\n    --mdc-text-field-idle-line-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-hover-line-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-disabled-line-color: transparent;\n    --mdc-text-field-outlined-idle-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-outlined-hover-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-outlined-disabled-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-fill-color: var(--fwc-text-field-fill-color);\n    --mdc-text-field-disabled-fill-color: var(--fwc-text-field-fill-color);\n    --mdc-text-field-ink-color: var(--fwc-text-field-ink-color);\n    --mdc-text-field-label-ink-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-disabled-ink-color: var(--fwc-text-field-disabled-ink-color);\n  }\n`;\nexport const styles = [mdcStyle, mdcOverride, attributes];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { TextFieldBase } from '@material/mwc-textfield/mwc-textfield-base';\nimport { styles } from './element.css';\nimport('@equinor/fusion-wc-icon');\n/**\n * Follows the basic `<input>` [constraint validation model](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation).\n * It exposes:\n *\n * * required\n * * maxLength\n * * pattern\n * * min\n * * max\n * * step\n * * validity\n * * willValidate\n * * checkValidity()\n * * reportValidity()\n * * setCustomValidity(message)\n *\n * Additionally, it implements more features such as:\n *\n * * validationMessage\n * * validateOnInitialRender\n * * validityTransform\n *\n * The element will report validation on `blur`.\n *\n * @tag fwc-textinput\n * @property {string} name - should only be used for browser autofill as webcomponent form participation does not currently consider the `name` attribute. See [#289](https://github.com/material-components/material-components-web-components/issues/289).\n * @property {string} value - The input control's value.\n * @property {text|search|tel|url|email|password|date|month|week|time|datetime-local|number|color} type - A string specifying the type of control to render.\n * @property {filled|outlined} variant - Input style variant to render\n * @property {string} label - Sets floating label value\n * @property {string} placeholder - Sets disappearing input placeholder\n * @property {string} prefix - Prefix text to display before the input\n * @property {string} suffix - Suffix text to display after the input\n * @property {boolean} disabled - Whether or not the input should be disabled\n * @property {boolean|\"external\"|\"internal\"} charCounter - Display character counter with max length. **Note: requries `maxLength` to be set.**\n * @property {string} helper - Helper text to display below the input. Display default only when focused\n * @property {boolean} helperPersistent - Always show the helper text despite focus\n * @property {number} maxLength - Maximum length to accept input\n * @property {string} validationMessage - Message to show in the error color when the input is invalid _(Helper text will not be visible)_\n * @property {string} pattern - [`HTMLInputElement.prototype.pattern`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} min - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} max - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} step - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number} size - [`HTMLInputElement.prototype.size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefsize) _(null will unset attribute)_\n * @property {boolean} autoValidate - Reports validity on value change rather than only on blur\n * @property {ValidityState} validity - The [`ValidityState`](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) of the input **readonly**\n * @property {boolean} willValidate - [`HTMLInputElement.prototype.willValidate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties) **readonly**\n * @property {boolean} validateOnInitialRender - Runs validation check on initial render\n * @property {(value: string, nativeValidity: ValidityState) => Partial<ValidityState>} validityTransform - Callback called before each validation check. See the [validation section](#Validation) for more details.\n *\n * @cssprop {theme.colors.text.static_icons__tertiary} --fwc-text-field-base-color - base color of the element\n * @cssprop {theme.colors.ui.background__light} --fwc-text-field-fill-color - background color of element\n * @cssprop {theme.colors.text.static_icons__default} --fwc-text-field-ink-color -  Text color\n * @cssprop {theme.colors.text.static_icons__default} --fwc-text-field-disabled-ink-color - Text color when disabled\n *\n * @fires change - When the focus is removed from the element\n * @fires input - When the value of the element changes\n * @fires invalid - When the validation of element fails\n *\n * @summary Enhanced input element, based on [Material Web Component](https://github.com/material-components/material-components-web-components/tree/master/packages/textfield)\n */\nexport class TextInputElement extends TextFieldBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Input style variant to render.\n         */\n        this.variant = 'filled';\n        /**\n         * Sets provided message as custom validity and displays it.\n         */\n        this.errorMessage = '';\n    }\n    /**\n     * Returns `true` if the textinput passes validity checks. Returns `false` and fires an [`invalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event) event on the textinput otherwise.\n     *\n     * **NOTE:** When accessing any property or function that checks validity at textinput initial boot up, you may have to await `<fwc-textinput>.updateComplete`.\n     */\n    checkValidity() {\n        return super.checkValidity();\n    }\n    /**\n     * Runs `checkValidity()` method, and if it returns false, then it reports to the user that the input is invalid.\n     */\n    reportValidity() {\n        return super.reportValidity();\n    }\n    /**\n     * Reset validity of element\n     */\n    clearValidity() {\n        this.mdcFoundation.setValid(true);\n        this.isUiValid = true;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            switch (this.variant) {\n                case 'filled': {\n                    this.outlined = false;\n                    break;\n                }\n                case 'outlined': {\n                    this.outlined = true;\n                    break;\n                }\n            }\n            this.requestUpdate();\n        }\n        if (changedProperties.has('errorMessage')) {\n            this.setCustomValidity(this.errorMessage);\n            this.errorMessage && this.clearValidity();\n            this.reportValidity();\n        }\n    }\n    /** {@inheritDoc} */\n    renderIcon(icon, isTrailingIcon = false) {\n        return html `<fwc-icon\n      icon=${icon}\n      isTrailingIcon=${isTrailingIcon}\n      textInput\n      class=\"mdc-text-field__icon ${isTrailingIcon\n            ? 'mdc-text-field__icon--trailing'\n            : 'mdc-text-field__icon--leading'}\"\n    ></fwc-icon>`;\n    }\n}\n__decorate([\n    property({ type: String })\n], TextInputElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: String })\n], TextInputElement.prototype, \"errorMessage\", void 0);\nTextInputElement.styles = styles;\nexport default TextInputElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  ::slotted(*) {\n    --mdc-ripple-color: #000;\n    --mdc-ripple-hover-opacity: 0.1;\n    --mdc-theme-background: #fff;\n    --mdc-theme-error: ${unsafeCSS(theme.colors.interactive.danger__text.getVariable('color'))};\n    --mdc-theme-on-primary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --mdc-theme-on-secondary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --mdc-theme-on-surface: ${unsafeCSS(theme.colors.text.static_icons__secondary.getVariable('color'))};\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-theme-secondary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-theme-surface: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --mdc-typography-font-family: Equinor;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { html, LitElement } from 'lit';\nimport style from './element.css';\nconst FONT_ID = 'FUSION_EQUINOR_FONT';\n/**\n * REMARKS - might unload font on disconnect\n */\nexport default class ThemeElement extends LitElement {\n    get FontLink() {\n        return document.head.querySelector(`link#${FONT_ID}`);\n    }\n    /** @override */\n    connectedCallback() {\n        super.connectedCallback();\n        !this.FontLink && this.injectFont();\n    }\n    /**\n     * Inject font to head of current document\n     */\n    injectFont() {\n        const link = document.createElement('link');\n        link.id = FONT_ID;\n        link.href = 'https://eds-static.equinor.com/font/equinor-font.css';\n        link.rel = 'stylesheet';\n        document.head.append(link);\n    }\n    render() {\n        return html `<slot></slot>`;\n    }\n}\nThemeElement.styles = [style];\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { matches } from '@material/dom/ponyfill';\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport MDCRippleFoundation from '@material/ripple/foundation';\nimport { html, property, query, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { styleMap } from 'lit-html/directives/style-map.js';\n/** @soyCompatible */\nexport class RippleBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.primary = false;\n        this.accent = false;\n        this.unbounded = false;\n        this.disabled = false;\n        this.activated = false;\n        this.selected = false;\n        this.internalUseStateLayerCustomProperties = false;\n        this.hovering = false;\n        this.bgFocused = false;\n        this.fgActivation = false;\n        this.fgDeactivation = false;\n        this.fgScale = '';\n        this.fgSize = '';\n        this.translateStart = '';\n        this.translateEnd = '';\n        this.leftPos = '';\n        this.topPos = '';\n        this.mdcFoundationClass = MDCRippleFoundation;\n    }\n    get isActive() {\n        return matches(this.parentElement || this, ':active');\n    }\n    createAdapter() {\n        return {\n            browserSupportsCssVars: () => true,\n            isUnbounded: () => this.unbounded,\n            isSurfaceActive: () => this.isActive,\n            isSurfaceDisabled: () => this.disabled,\n            addClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = true;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            removeClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = false;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            containsEventTarget: () => true,\n            registerInteractionHandler: () => undefined,\n            deregisterInteractionHandler: () => undefined,\n            registerDocumentInteractionHandler: () => undefined,\n            deregisterDocumentInteractionHandler: () => undefined,\n            registerResizeHandler: () => undefined,\n            deregisterResizeHandler: () => undefined,\n            updateCssVariable: (varName, value) => {\n                switch (varName) {\n                    case '--mdc-ripple-fg-scale':\n                        this.fgScale = value;\n                        break;\n                    case '--mdc-ripple-fg-size':\n                        this.fgSize = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-end':\n                        this.translateEnd = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-start':\n                        this.translateStart = value;\n                        break;\n                    case '--mdc-ripple-left':\n                        this.leftPos = value;\n                        break;\n                    case '--mdc-ripple-top':\n                        this.topPos = value;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            computeBoundingRect: () => (this.parentElement || this).getBoundingClientRect(),\n            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),\n        };\n    }\n    startPress(ev) {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.activate(ev);\n        });\n    }\n    endPress() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.deactivate();\n        });\n    }\n    startFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleFocus();\n        });\n    }\n    endFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleBlur();\n        });\n    }\n    startHover() {\n        this.hovering = true;\n    }\n    endHover() {\n        this.hovering = false;\n    }\n    /**\n     * Wait for the MDCFoundation to be created by `firstUpdated`\n     */\n    waitForFoundation(fn) {\n        if (this.mdcFoundation) {\n            fn();\n        }\n        else {\n            this.updateComplete.then(fn);\n        }\n    }\n    update(changedProperties) {\n        if (changedProperties.has('disabled')) {\n            // stop hovering when ripple is disabled to prevent a stuck \"hover\" state\n            // When re-enabled, the outer component will get a `mouseenter` event on\n            // the first movement, which will call `startHover()`\n            if (this.disabled) {\n                this.endHover();\n            }\n        }\n        super.update(changedProperties);\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldActivateInPrimary = this.activated && (this.primary || !this.accent);\n        const shouldSelectInPrimary = this.selected && (this.primary || !this.accent);\n        /** @classMap */\n        const classes = {\n            'mdc-ripple-surface--accent': this.accent,\n            'mdc-ripple-surface--primary--activated': shouldActivateInPrimary,\n            'mdc-ripple-surface--accent--activated': this.accent && this.activated,\n            'mdc-ripple-surface--primary--selected': shouldSelectInPrimary,\n            'mdc-ripple-surface--accent--selected': this.accent && this.selected,\n            'mdc-ripple-surface--disabled': this.disabled,\n            'mdc-ripple-surface--hover': this.hovering,\n            'mdc-ripple-surface--primary': this.primary,\n            'mdc-ripple-surface--selected': this.selected,\n            'mdc-ripple-upgraded--background-focused': this.bgFocused,\n            'mdc-ripple-upgraded--foreground-activation': this.fgActivation,\n            'mdc-ripple-upgraded--foreground-deactivation': this.fgDeactivation,\n            'mdc-ripple-upgraded--unbounded': this.unbounded,\n            'mdc-ripple-surface--internal-use-state-layer-custom-properties': this.internalUseStateLayerCustomProperties,\n        };\n        return html `\n        <div class=\"mdc-ripple-surface mdc-ripple-upgraded ${classMap(classes)}\"\n          style=\"${styleMap({\n            '--mdc-ripple-fg-scale': this.fgScale,\n            '--mdc-ripple-fg-size': this.fgSize,\n            '--mdc-ripple-fg-translate-end': this.translateEnd,\n            '--mdc-ripple-fg-translate-start': this.translateStart,\n            '--mdc-ripple-left': this.leftPos,\n            '--mdc-ripple-top': this.topPos,\n        })}\"></div>`;\n    }\n}\n__decorate([\n    query('.mdc-ripple-surface')\n], RippleBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"primary\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"accent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"unbounded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"internalUseStateLayerCustomProperties\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"hovering\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"bgFocused\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgActivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgDeactivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgScale\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgSize\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateStart\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateEnd\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"leftPos\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"topPos\", void 0);\n//# sourceMappingURL=mwc-ripple-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport { MDCNotchedOutlineFoundation } from '@material/notched-outline/foundation';\nimport { html, property, query } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nexport class NotchedOutlineBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCNotchedOutlineFoundation;\n        this.width = 0;\n        this.open = false;\n        this.lastOpen = this.open;\n    }\n    createAdapter() {\n        return {\n            addClass: (className) => this.mdcRoot.classList.add(className),\n            removeClass: (className) => this.mdcRoot.classList.remove(className),\n            setNotchWidthProperty: (width) => this.notchElement.style.setProperty('width', `${width}px`),\n            removeNotchWidthProperty: () => this.notchElement.style.removeProperty('width'),\n        };\n    }\n    openOrClose(shouldOpen, width) {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        if (shouldOpen && width !== undefined) {\n            this.mdcFoundation.notch(width);\n        }\n        else {\n            this.mdcFoundation.closeNotch();\n        }\n    }\n    render() {\n        this.openOrClose(this.open, this.width);\n        const classes = classMap({\n            'mdc-notched-outline--notched': this.open,\n        });\n        return html `\n      <span class=\"mdc-notched-outline ${classes}\">\n        <span class=\"mdc-notched-outline__leading\"></span>\n        <span class=\"mdc-notched-outline__notch\">\n          <slot></slot>\n        </span>\n        <span class=\"mdc-notched-outline__trailing\"></span>\n      </span>`;\n    }\n}\n__decorate([\n    query('.mdc-notched-outline')\n], NotchedOutlineBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Number })\n], NotchedOutlineBase.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], NotchedOutlineBase.prototype, \"open\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], NotchedOutlineBase.prototype, \"notchElement\", void 0);\n//# sourceMappingURL=mwc-notched-outline-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-notched-outline';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { floatingLabel } from '@material/mwc-floating-label';\nimport { lineRipple } from '@material/mwc-line-ripple';\nimport MDCTextFieldFoundation from '@material/textfield/foundation';\nimport { eventOptions, html, property, query, state } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { live } from 'lit-html/directives/live.js';\nconst passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];\nconst createValidityObj = (customValidity = {}) => {\n    /*\n     * We need to make ValidityState an object because it is readonly and\n     * we cannot use the spread operator. Also, we don't export\n     * `CustomValidityState` because it is a leaky implementation and the user\n     * already has access to `ValidityState` in lib.dom.ts. Also an interface\n     * {a: Type} can be casted to {readonly a: Type} so passing any object\n     * should be fine.\n     */\n    const objectifiedCustomValidity = {};\n    // eslint-disable-next-line guard-for-in\n    for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName] =\n            customValidity[propName];\n    }\n    return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);\n};\n/** @soyCompatible */\nexport class TextFieldBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCTextFieldFoundation;\n        this.value = '';\n        this.type = 'text';\n        this.placeholder = '';\n        this.label = '';\n        this.icon = '';\n        this.iconTrailing = '';\n        this.disabled = false;\n        this.required = false;\n        this.minLength = -1;\n        this.maxLength = -1;\n        this.outlined = false;\n        this.helper = '';\n        this.validateOnInitialRender = false;\n        this.validationMessage = '';\n        this.autoValidate = false;\n        this.pattern = '';\n        this.min = '';\n        this.max = '';\n        this.step = null;\n        this.size = null;\n        this.helperPersistent = false;\n        this.charCounter = false;\n        this.endAligned = false;\n        this.prefix = '';\n        this.suffix = '';\n        this.name = '';\n        this.readOnly = false;\n        this.autocapitalize = '';\n        this.outlineOpen = false;\n        this.outlineWidth = 0;\n        this.isUiValid = true;\n        this.focused = false;\n        this._validity = createValidityObj();\n        this.validityTransform = null;\n    }\n    get validity() {\n        this._checkValidity(this.value);\n        return this._validity;\n    }\n    get willValidate() {\n        return this.formElement.willValidate;\n    }\n    get selectionStart() {\n        return this.formElement.selectionStart;\n    }\n    get selectionEnd() {\n        return this.formElement.selectionEnd;\n    }\n    focus() {\n        const focusEvt = new CustomEvent('focus');\n        this.formElement.dispatchEvent(focusEvt);\n        this.formElement.focus();\n    }\n    blur() {\n        const blurEvt = new CustomEvent('blur');\n        this.formElement.dispatchEvent(blurEvt);\n        this.formElement.blur();\n    }\n    select() {\n        this.formElement.select();\n    }\n    setSelectionRange(selectionStart, selectionEnd, selectionDirection) {\n        this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n    }\n    update(changedProperties) {\n        if (changedProperties.has('autoValidate') && this.mdcFoundation) {\n            this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        }\n        if (changedProperties.has('value') && typeof this.value !== 'string') {\n            this.value = `${this.value}`;\n        }\n        super.update(changedProperties);\n    }\n    setFormData(formData) {\n        if (this.name) {\n            formData.append(this.name, this.value);\n        }\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n        const shouldRenderHelperText = !!this.helper || !!this.validationMessage || shouldRenderCharCounter;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field--disabled': this.disabled,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--filled': !this.outlined,\n            'mdc-text-field--outlined': this.outlined,\n            'mdc-text-field--with-leading-icon': this.icon,\n            'mdc-text-field--with-trailing-icon': this.iconTrailing,\n            'mdc-text-field--end-aligned': this.endAligned,\n        };\n        return html `\n      <label class=\"mdc-text-field ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderLeadingIcon()}\n        ${this.renderPrefix()}\n        ${this.renderInput(shouldRenderHelperText)}\n        ${this.renderSuffix()}\n        ${this.renderTrailingIcon()}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}\n    `;\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('value') &&\n            changedProperties.get('value') !== undefined) {\n            this.mdcFoundation.setValue(this.value);\n            if (this.autoValidate) {\n                this.reportValidity();\n            }\n        }\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.outlined ? '' : html `\n      <span class=\"mdc-text-field__ripple\"></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderOutline() {\n        return !this.outlined ? '' : html `\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n    }\n    /** @soyTemplate */\n    renderLabel() {\n        return !this.label ?\n            '' :\n            html `\n      <span\n          .floatingLabelFoundation=${floatingLabel(this.label)}\n          id=\"label\">${this.label}</span>\n    `;\n    }\n    /** @soyTemplate */\n    renderLeadingIcon() {\n        return this.icon ? this.renderIcon(this.icon) : '';\n    }\n    /** @soyTemplate */\n    renderTrailingIcon() {\n        return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';\n    }\n    /** @soyTemplate */\n    renderIcon(icon, isTrailingIcon = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__icon--leading': !isTrailingIcon,\n            'mdc-text-field__icon--trailing': isTrailingIcon\n        };\n        return html `<i class=\"material-icons mdc-text-field__icon ${classMap(classes)}\">${icon}</i>`;\n    }\n    /** @soyTemplate */\n    renderPrefix() {\n        return this.prefix ? this.renderAffix(this.prefix) : '';\n    }\n    /** @soyTemplate */\n    renderSuffix() {\n        return this.suffix ? this.renderAffix(this.suffix, true) : '';\n    }\n    /** @soyTemplate */\n    renderAffix(content, isSuffix = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__affix--prefix': !isSuffix,\n            'mdc-text-field__affix--suffix': isSuffix\n        };\n        return html `<span class=\"mdc-text-field__affix ${classMap(classes)}\">\n        ${content}</span>`;\n    }\n    /** @soyTemplate */\n    renderInput(shouldRenderHelperText) {\n        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n        const autocapitalizeOrUndef = this.autocapitalize ?\n            this.autocapitalize :\n            undefined;\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n        const ariaControlsOrUndef = shouldRenderHelperText ? 'helper-text' : undefined;\n        const ariaDescribedbyOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            'helper-text' :\n            undefined;\n        // TODO: live() directive needs casting for lit-analyzer\n        // https://github.com/runem/lit-analyzer/pull/91/files\n        // TODO: lit-analyzer labels min/max as (number|string) instead of string\n        return html `\n      <input\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          aria-controls=\"${ifDefined(ariaControlsOrUndef)}\"\n          aria-describedby=\"${ifDefined(ariaDescribedbyOrUndef)}\"\n          class=\"mdc-text-field__input\"\n          type=\"${this.type}\"\n          .value=\"${live(this.value)}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          pattern=\"${ifDefined(this.pattern ? this.pattern : undefined)}\"\n          min=\"${ifDefined(this.min === '' ? undefined : this.min)}\"\n          max=\"${ifDefined(this.max === '' ? undefined : this.max)}\"\n          step=\"${ifDefined(this.step === null ? undefined : this.step)}\"\n          size=\"${ifDefined(this.size === null ? undefined : this.size)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @focus=\"${this.onInputFocus}\"\n          @blur=\"${this.onInputBlur}\">`;\n    }\n    /** @soyTemplate */\n    renderLineRipple() {\n        return this.outlined ?\n            '' :\n            html `\n      <span .lineRippleFoundation=${lineRipple()}></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderHelperText(shouldRenderHelperText, shouldRenderCharCounter) {\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field-helper-text--persistent': this.helperPersistent,\n            'mdc-text-field-helper-text--validation-msg': showValidationMessage,\n        };\n        const ariaHiddenOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            undefined :\n            'true';\n        const helperText = showValidationMessage ? this.validationMessage : this.helper;\n        return !shouldRenderHelperText ? '' : html `\n      <div class=\"mdc-text-field-helper-line\">\n        <div id=\"helper-text\"\n             aria-hidden=\"${ifDefined(ariaHiddenOrUndef)}\"\n             class=\"mdc-text-field-helper-text ${classMap(classes)}\"\n             >${helperText}</div>\n        ${this.renderCharCounter(shouldRenderCharCounter)}\n      </div>`;\n    }\n    /** @soyTemplate */\n    renderCharCounter(shouldRenderCharCounter) {\n        const length = Math.min(this.value.length, this.maxLength);\n        return !shouldRenderCharCounter ? '' : html `\n      <span class=\"mdc-text-field-character-counter\"\n            >${length} / ${this.maxLength}</span>`;\n    }\n    onInputFocus() {\n        this.focused = true;\n    }\n    onInputBlur() {\n        this.focused = false;\n        this.reportValidity();\n    }\n    checkValidity() {\n        const isValid = this._checkValidity(this.value);\n        if (!isValid) {\n            const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });\n            this.dispatchEvent(invalidEvent);\n        }\n        return isValid;\n    }\n    reportValidity() {\n        const isValid = this.checkValidity();\n        this.mdcFoundation.setValid(isValid);\n        this.isUiValid = isValid;\n        return isValid;\n    }\n    _checkValidity(value) {\n        const nativeValidity = this.formElement.validity;\n        let validity = createValidityObj(nativeValidity);\n        if (this.validityTransform) {\n            const customValidity = this.validityTransform(value, validity);\n            validity = Object.assign(Object.assign({}, validity), customValidity);\n            this.mdcFoundation.setUseNativeValidation(false);\n        }\n        else {\n            this.mdcFoundation.setUseNativeValidation(true);\n        }\n        this._validity = validity;\n        return this._validity.valid;\n    }\n    setCustomValidity(message) {\n        this.validationMessage = message;\n        this.formElement.setCustomValidity(message);\n    }\n    handleInputChange() {\n        this.value = this.formElement.value;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());\n    }\n    getRootAdapterMethods() {\n        return Object.assign({ registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler), deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler), registerValidationAttributeChangeHandler: (handler) => {\n                const getAttributesList = (mutationsList) => {\n                    return mutationsList.map((mutation) => mutation.attributeName)\n                        .filter((attributeName) => attributeName);\n                };\n                const observer = new MutationObserver((mutationsList) => {\n                    handler(getAttributesList(mutationsList));\n                });\n                const config = { attributes: true };\n                observer.observe(this.formElement, config);\n                return observer;\n            }, deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect() }, addHasRemoveClass(this.mdcRoot));\n    }\n    getInputAdapterMethods() {\n        return {\n            getNativeInput: () => this.formElement,\n            // since HelperTextFoundation is not used, aria-describedby a11y logic\n            // is implemented in render method instead of these adapter methods\n            setInputAttr: () => undefined,\n            removeInputAttr: () => undefined,\n            isFocused: () => this.shadowRoot ?\n                this.shadowRoot.activeElement === this.formElement :\n                false,\n            registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, { passive: evtType in passiveEvents }),\n            deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler),\n        };\n    }\n    getLabelAdapterMethods() {\n        return {\n            floatLabel: (shouldFloat) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.float(shouldFloat),\n            getLabelWidth: () => {\n                return this.labelElement ?\n                    this.labelElement.floatingLabelFoundation.getWidth() :\n                    0;\n            },\n            hasLabel: () => Boolean(this.labelElement),\n            shakeLabel: (shouldShake) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.shake(shouldShake),\n            setLabelRequired: (isRequired) => {\n                if (this.labelElement) {\n                    this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n                }\n            },\n        };\n    }\n    getLineRippleAdapterMethods() {\n        return {\n            activateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.activate();\n                }\n            },\n            deactivateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.deactivate();\n                }\n            },\n            setLineRippleTransformOrigin: (normalizedX) => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);\n                }\n            },\n        };\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        var _a;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        await ((_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete);\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    firstUpdated() {\n        var _a;\n        super.firstUpdated();\n        this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        if (this.validateOnInitialRender) {\n            this.reportValidity();\n        }\n        // wait for the outline element to render to update the notch width\n        (_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete.then(() => {\n            var _a;\n            // `foundation.notchOutline()` assumes the label isn't floating and\n            // multiplies by a constant, but the label is already is floating at this\n            // stage, therefore directly set the outline width to the label width\n            this.outlineWidth =\n                ((_a = this.labelElement) === null || _a === void 0 ? void 0 : _a.floatingLabelFoundation.getWidth()) || 0;\n        });\n    }\n    getOutlineAdapterMethods() {\n        return {\n            closeOutline: () => this.outlineElement && (this.outlineOpen = false),\n            hasOutline: () => Boolean(this.outlineElement),\n            notchOutline: (labelWidth) => {\n                const outlineElement = this.outlineElement;\n                if (outlineElement && !this.outlineOpen) {\n                    this.outlineWidth = labelWidth;\n                    this.outlineOpen = true;\n                }\n            }\n        };\n    }\n    async layout() {\n        await this.updateComplete;\n        const labelElement = this.labelElement;\n        if (!labelElement) {\n            this.outlineOpen = false;\n            return;\n        }\n        const shouldFloat = !!this.label && !!this.value;\n        labelElement.floatingLabelFoundation.float(shouldFloat);\n        if (!this.outlined) {\n            return;\n        }\n        this.outlineOpen = shouldFloat;\n        await this.updateComplete;\n        /* When the textfield automatically notches due to a value and label\n         * being defined, the textfield may be set to `display: none` by the user.\n         * this means that the notch is of size 0px. We provide this function so\n         * that the user may manually resize the notch to the floated label's\n         * width.\n         */\n        const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n        if (this.outlineOpen) {\n            this.outlineWidth = labelWidth;\n            await this.updateComplete;\n        }\n    }\n}\n__decorate([\n    query('.mdc-text-field')\n], TextFieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], TextFieldBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('.mdc-floating-label')\n], TextFieldBase.prototype, \"labelElement\", void 0);\n__decorate([\n    query('.mdc-line-ripple')\n], TextFieldBase.prototype, \"lineRippleElement\", void 0);\n__decorate([\n    query('mwc-notched-outline')\n], TextFieldBase.prototype, \"outlineElement\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], TextFieldBase.prototype, \"notchElement\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.label !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"iconTrailing\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], TextFieldBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"required\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"minLength\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"maxLength\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.outlined !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"helper\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"validateOnInitialRender\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"validationMessage\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"autoValidate\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"pattern\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"min\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"max\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"step\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"helperPersistent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"charCounter\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"endAligned\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"prefix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"suffix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"inputMode\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"readOnly\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"autocapitalize\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineOpen\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineWidth\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"isUiValid\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"focused\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], TextFieldBase.prototype, \"handleInputChange\", null);\n//# sourceMappingURL=mwc-textfield-base.js.map"],"names":[],"sourceRoot":""}