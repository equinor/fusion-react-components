{"version":3,"file":"665.fa9e5386.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AASA;AA2CA;AACA;AACA;;AAGA;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;ACrEA;AA+BA;AAEA;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AC/FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;AChGA;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;;;AAOA;;;AAIA;;AAKA;AAEA;;AChHA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;AACA;;;AAGA;;;AAGA;;;AAGA;AACA;;;;;;;;;;;;AAcA;;;AC1CA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;AAOA;;AAGA;;;AChFA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;AC3CA;;AAeA;;AAGA;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;;AC9CA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;ACvEA;;AAiCA;;AAGA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;;;AAIA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAGA;ACeA;AAEA;AA4BA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA;AAEA;;;;;;;;ACxGA;;AA3BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;;ACnGA;AAqDA;AACA;AACA;AAEA;AC1BA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;;AAEA;AAGA;;;ACvEA;;;;;;;AAOA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;AAgBA;AACA;;;AAGA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;ACpDA;AC2CA;;;AAGA;AAEA;;AC9DA;;ACDA;ACKA;AACA;;AAWA;;;;;;;;;;;ACfA;;;;;;;;;;;;ACIA;;AAiCA;;AAEA;AACA;AACA;AACA;;;AAGA;;AC9CA;AACA;AACA;;;;;ACgCA;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyBA;;;;;;;AAoBA;AAeA;;;;;;;;;;;;;;;ACaA;AACA;AACA;AACA;AACA;AACA;;;AAGA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;AC5FA;;AAgGA;AACA;AACA;;AAEA;;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAMA;AAMA;AACA;;AAEA;AAEA;;AC/IA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;;AAGA;;;;;;AAMA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA;;;;;;AAMA;;;;;;;AAOA;;;;;AAKA;;;;;;;ACvDA;AA4HA;AACA;AAEA;AAOA;AAGA;AAIA;AAoBA;;;AAGA;AACA;;AAGA;AAaA;AAEA;AAMA;AACA;;;AAIA;AAOA;AAGA;AAIA;AAMA;AACA;;AAEA;AAEA;AAMA;AACA;;AAEA;AAEA;;AAYA;;AAEA;;AAEA;;;AAGA;;AAOA;;;;;;;;;;;;;;;;AClOA;;;AAGA;;;AAIA;;;;ACnDA;;;;;;;;;AASA;;;AAGA;AACA;;AClBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAQA;AACA;;;AAGA;;;;AAKA;;;;;;ACrBA;;;AAGA;;;AAGA;;AAGA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;;;;;;;;AA0BA;;;;;;;ACrBA;;;;AAIA;;AAGA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;AA2BA;;AAVA;;;;;;AAkBA;;AAlBA;;;;;;AA2BA;AC2DA;AACA;AA2EA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAEA;;;;AC3MA;;;AAGA;;;;;AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;ACzDA;AACA;AACA;;;;;ACgCA;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyBA;;;;;;;AAoBA;AAMA;;;;;;;;;;;;ACrDA;;AAiCA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;ACvCA;;;AAyEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;ACpFA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;AAmBA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAGA;AC1BA;AAGA;AAGA;AAYA;AAOA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAUA;AAcA;AACA;AACA;AAIA;AAYA;;AAnCA;;;;AA0DA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;;;;;;;;AAQA;;AAGA;;ACxFA;;;AAGA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;;AAEA;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAmBA;;AAOA;AACA;;AAEA;AAPA;;AAgBA;AACA;AALA;AAmBA;AAEA;;AAWA;AACA;;;ACxPA;AACA;;AAEA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;;AAEA;;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;;ACrFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;ACJA;;;;;;;;;;;AAWA;;;AAGA;;;AAGA;;ACLA;;;ACyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;AAOA;AACA;AACA;;AAGA;;AAaA;AACA;;AAEA;AACA;;;AAIA;;;;AAQA;;;;AAQA;;;;AAOA;;;;AAUA;;;;AAQA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;ACqDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACxFA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;AAUA;ACwCA;AACA;;AAEA;AAIA;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;;;AC0IA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AAMA;AAGA;AC9EA;AACA;AACA;AACA;;AAMA;AAGA;AAYA;;AAGA;;;AAMA;;AAKA;AAEA;;;;;;;AAaA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AChFA;;;;;;AAOA;ACiIA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAeA;;AAKA;AACA;;AAEA;AALA;;AAcA;AACA;AAJA;AAwCA;;AAoBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;;;AAgBA;AACA;AACA;AACA;AANA;;AAcA","sources":["webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-picture/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-avatar/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-avatar/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-badge/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-badge/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-button/mwc-button-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/button/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/link-button/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/icon-button/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-icon-button/mwc-icon-button-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/icon-button/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/icon-button-toggle/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-icon-button-toggle/mwc-icon-button-toggle-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-button/lib/icon-button-toggle/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-checkbox/mwc-checkbox-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-checkbox/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-chip/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-chip/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-date/lib/daterange/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-divider/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-divider/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-formfield/mwc-formfield-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-formfield/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-formfield/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-icon/lib/utils/create-icon.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-icon/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/check-list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/list-item/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-list/lib/radio-list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-menu/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-person/lib/person-avatar/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-person/lib/person-card/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-person/lib/person-card/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-popover/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/star/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/star/graphics.svg.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/star/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/dots/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/dots/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/circular/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-progress-indicator/lib/circular/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-radio/mwc-radio-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-radio/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/list-item/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/check-list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/node_modules/@equinor/fusion-wc-list/lib/radio-list-item/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/lib/dropdown/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-searchable-dropdown/lib/dropdown/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-select/mwc-select-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-select/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-skeleton/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-skeleton/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-skeleton/lib/skeleton-wrapper/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-skeleton/lib/skeleton-wrapper/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-switch/mwc-switch-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-switch/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-switch/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-textarea/mwc-textarea-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-textinput/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-textinput/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-theme/lib/element.css.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@equinor/fusion-wc-theme/lib/element.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-list/mwc-list-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-list/mwc-list-item-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-menu/mwc-menu-surface-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-menu/mwc-menu-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-notched-outline/mwc-notched-outline-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-ripple/mwc-ripple-base.js","webpack://@equinor/fusion-react-components-stories/../node_modules/@material/mwc-textfield/mwc-textfield-base.js"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property, state, eventOptions } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { observeIntersection } from '@equinor/fusion-wc-intersection';\nimport PictureEvent from './events/picture-event';\nimport style from './element.css';\nexport class PictureElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Set the picture source\n         * This will be updated if <source> is provided\n         * Use of a data-URI for src is encouraged for instant rendering.\n         */\n        this.src = '//:0';\n        /**\n         * position of image\n         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\n         */\n        this.position = 'center';\n    }\n    /**\n     * Return the current source sets\n     * Since [[HTMLPictureElement]] is not slottable, [[HTMLSourceElement]] provided\n     * by light dom is moved inside the shadow.\n     */\n    get srcSets() {\n        return [...this.querySelectorAll('source')].concat([\n            ...this.renderRoot.querySelectorAll('source'),\n        ]);\n    }\n    get loaded() {\n        return this.hasAttribute('loaded');\n    }\n    render() {\n        const style = {\n            backgroundImage: this.loaded ? `url(${this.currentSrc})` : '',\n            backgroundPosition: this.position || '',\n            backgroundSize: this.cover ? 'cover' : 'contain',\n            width: this.cover ? '100%' : undefined,\n            height: this.cover ? `'100%` : undefined,\n        };\n        const observerInfo = {\n            cb: ([entry]) => {\n                this.intersected = entry.isIntersecting;\n            },\n            disabled: this.intersected,\n        };\n        return html `\n      <picture style=${styleMap(style)} intersection=${observeIntersection(observerInfo)}>\n        ${this.loaded ? '' : html `<slot name=\"loader\"></slot>`}\n        ${this.lazy && !this.intersected ? '' : this.renderImage()}\n      </picture>\n    `;\n    }\n    renderImage() {\n        return html `\n      ${repeat(this.srcSets, (src) => src.srcset || src.src, (src) => src)}\n      <img\n        src=\"${this.src}\"\n        height=\"${ifDefined(this.width)}\"\n        width=\"${ifDefined(this.height)}\"\n        @load=\"${this._onSourceChange}\"\n      />\n    `;\n    }\n    _onSourceChange(e) {\n        const img = e.target;\n        const { naturalHeight, naturalWidth, currentSrc } = img;\n        if (this.currentSrc !== currentSrc && this._emitChange(img)) {\n            this.currentSrc = currentSrc;\n            this.height = naturalHeight;\n            this.width = naturalWidth;\n            this.setAttribute('loaded', '');\n        }\n    }\n    _emitChange(img, args) {\n        const { naturalHeight, naturalWidth, currentSrc } = img;\n        const detail = { naturalHeight, naturalWidth, currentSrc };\n        const event = new PictureEvent('picture-load', Object.assign(Object.assign({}, args), { detail }));\n        this.dispatchEvent(event);\n        return !event.defaultPrevented;\n    }\n}\nPictureElement.styles = [style];\n__decorate([\n    property()\n], PictureElement.prototype, \"src\", void 0);\n__decorate([\n    property({ reflect: true })\n], PictureElement.prototype, \"position\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PictureElement.prototype, \"cover\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PictureElement.prototype, \"lazy\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"currentSrc\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"height\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"width\", void 0);\n__decorate([\n    state()\n], PictureElement.prototype, \"intersected\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], PictureElement.prototype, \"_onSourceChange\", null);\nexport default PictureElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    position: relative;\n    display: inline-block;\n  }\n  :host .fwc-avatar__container {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    overflow: hidden;\n    color: var(--fwc-avatar-ink-color);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--fwc-avatar-base-color);\n  }\n  :host([border][size='x-small']) .fwc-avatar__picture-container {\n    width: calc(100% - 0.0625rem);\n    height: calc(100% - 0.0625rem);\n  }\n  :host([border][size='small']) .fwc-avatar__picture-container {\n    width: calc(100% - 0.25rem);\n    height: calc(100% - 0.25rem);\n  }\n  :host([border][size='medium']) .fwc-avatar__picture-container {\n    width: calc(100% - 0.375rem);\n    height: calc(100% - 0.375rem);\n  }\n  :host([border][size='large']) .fwc-avatar__picture-container {\n    width: calc(100% - 0.5rem);\n    height: calc(100% - 0.5rem);\n  }\n  :host(:not([border])) .fwc-avatar__picture-container {\n    width: 100%;\n    height: 100%;\n  }\n  :host .fwc-avatar__picture-container {\n    border-radius: 50%;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  :host .fwc-avatar__picture {\n    width: 100%;\n    height: 100%;\n  }\n  :host([disabled]) .fwc-avatar__picture {\n    opacity: 0.5;\n  }\n  :host .fwc-avatar__value {\n    display: contents;\n    font-family: Equinor;\n    font-weight: 400;\n  }\n  :host .fwc-avatar__ripple {\n    z-index: 5;\n  }\n  :host([size='x-small']) {\n    width: 1.25rem;\n    height: 1.25rem;\n    font-size: 0.625rem;\n    line-height: 1.25rem;\n  }\n  :host([size='small']) {\n    width: 2rem;\n    height: 2rem;\n    font-size: 1rem;\n    line-height: 2rem;\n  }\n  :host([size='medium']) {\n    width: 3.5rem;\n    height: 3.5rem;\n    font-size: 2rem;\n    line-height: 3.5rem;\n  }\n  :host([size='large']) {\n    width: 5rem;\n    height: 5rem;\n    font-size: 3rem;\n    line-height: 5rem;\n  }\n  :host([color='primary']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([color='secondary']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([color='success']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([color='danger']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='warning']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([color='disabled']) {\n    --fwc-avatar-base-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n  :host([clickable]:hover) .fwc-avatar__container {\n    cursor: pointer;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property, queryAsync, eventOptions } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AvatarSize, AvatarColor } from './types';\nimport Picture from '@equinor/fusion-wc-picture';\nimport { RippleHandlers } from '@equinor/fusion-wc-ripple';\nimport style from './element.css';\n// Persist element\nPicture;\n/**\n * Element for rendering an avatar.\n * {@inheritdoc}\n *\n * @tag fwc-avatar\n *\n * @property {AvatarSize} size - Sets the size of the avatar element.\n * @property {AvatarColor} color - Sets the background/border color of the avatar element.\n * @property {string} value - Sets the text value to be rendered within the avatar. Overridden by 'src' attribute.\n * @property {string} src - Sets the picture source for the avatar. Overrides the 'value' attribute.\n * @property {boolean} clickable - Enables the click event and adds click effects for the avatar element.\n * @property {boolean} border - Adds a border to the avatar picture element.\n * @property {boolean} disabled - Sets the avatar to disabled.\n *\n * @cssprop {theme.colors.text.static_icons__primary_white} --fwc-avatar-ink-color - text color of the element.\n * @cssprop {theme.colors.interactive.primary__resting} --fwc-avatar-base-color - base color of the element.\n *\n * @fires click - When the element is clicked, only fires when 'clickable' is set to 'true'.\n *\n * Content can be slotted in with a slot named 'content'.\n */\nexport class AvatarElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the element.\n         * @default AvatarSize.Medium\n         */\n        this.size = AvatarSize.Medium;\n        /**\n         * Define ripple handlers.\n         */\n        this.rippleHandlers = new RippleHandlers(() => {\n            return this.ripple;\n        });\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('disabled')) {\n            if (this.disabled) {\n                this.color = AvatarColor.Disabled;\n                this.clickable = false;\n            }\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Render a picture element if 'src' attribute is set.\n     */\n    renderPicture() {\n        return html `<div class=\"fwc-avatar__picture-container\">\n      <fwc-picture class=\"fwc-avatar__picture\" src=${ifDefined(this.src)} cover></fwc-picture>\n    </div>`;\n    }\n    /**\n     * Render text value if 'value' attribute is set.\n     */\n    renderValue() {\n        return html `<span class=\"fwc-avatar__value\">${this.value}</span>`;\n    }\n    /**\n     * Render slotted badge element.\n     */\n    renderBadge() {\n        return html `<slot name=\"badge\"></slot>`;\n    }\n    /**\n     * Render the content. 'src' attribute overrides 'value' attribute.\n     */\n    renderContent() {\n        const content = this.src ? this.renderPicture() : this.value ? this.renderValue() : undefined;\n        return html `<slot name=\"content\">${content}</slot>`;\n    }\n    /** {@inheritDoc} */\n    render() {\n        return html `<span\n      class=\"fwc-avatar__container\"\n      @click=${this.handleOnClick}\n      @focus=\"${this.handleRippleFocus}\"\n      @blur=\"${this.handleRippleBlur}\"\n      @mousedown=\"${this.handleRippleActivate}\"\n      @mouseenter=\"${this.handleRippleMouseEnter}\"\n      @mouseleave=\"${this.handleRippleMouseLeave}\"\n      @touchstart=\"${this.handleRippleActivate}\"\n      @touchend=\"${this.handleRippleDeactivate}\"\n      @touchcancel=\"${this.handleRippleDeactivate}\"\n      >${this.renderRipple()}${this.renderBadge()}${this.renderContent()}</span\n    >`;\n    }\n    /**\n     * Render the ripple element.\n     */\n    renderRipple() {\n        return this.clickable\n            ? html `<fwc-ripple class=\"fwc-avatar__ripple\" disabled=\"${ifDefined(this.disabled)}\" unbounded></fwc-ripple>`\n            : '';\n    }\n    /**\n     * Handle ripple activate event.\n     */\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    /**\n     * Handle ripple deactivate event.\n     */\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    /**\n     * Handle ripple start hover event.\n     */\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    /**\n     * Handle ripple end hover event.\n     */\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    /**\n     * Handle ripple focus event.\n     */\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    /**\n     * Handle ripple blur event.\n     */\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    /**\n     * Handle on click.\n     */\n    handleOnClick(e) {\n        if (this.clickable) {\n            this.dispatchEvent(new PointerEvent('click', e));\n        }\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], AvatarElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], AvatarElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], AvatarElement.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], AvatarElement.prototype, \"src\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"border\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], AvatarElement.prototype, \"disabled\", void 0);\n__decorate([\n    queryAsync('fwc-ripple')\n], AvatarElement.prototype, \"ripple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], AvatarElement.prototype, \"handleRippleActivate\", null);\nAvatarElement.styles = [style];\nexport default AvatarElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-badge-size: 1.5rem;\n    --fwc-badge-font-size: 0.75rem;\n    --fwc-badge-icon-size: 0.685rem;\n    position: absolute;\n    z-index: 1;\n  }\n  :host .fwc-badge__container {\n    background-color: var(--fwc-badge-color);\n    min-width: var(--fwc-badge-size);\n    height: var(--fwc-badge-size);\n    font-size: var(--fwc-badge-font-size);\n    border-radius: calc(var(--fwc-badge-size) / 2);\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n    place-content: center;\n    overflow: hidden;\n    color: #fff;\n  }\n  :host .fwc-avatar__ripple {\n    z-index: 5;\n  }\n  :host .fwc-badge__icon {\n    font-size: var(--fwc-badge-icon-size);\n  }\n  :host .fwc-badge__value {\n    font-size: var(--fwc-badge-icon-size);\n  }\n  :host([size='small']) .fwc-badge__value {\n    padding: 0 0.125rem;\n  }\n  :host([size='medium']) .fwc-badge__value {\n    padding: 0 0.375rem;\n  }\n  :host([size='large']) .fwc-badge__value {\n    padding: 0 0.5rem;\n  }\n  :host([size='x-small']) {\n    --fwc-badge-size: 0.375rem;\n  }\n  :host([size='small']) {\n    --fwc-badge-size: 1rem;\n    --fwc-badge-font-size: 0.5rem;\n    --fwc-badge-icon-size: 0.375rem;\n  }\n  :host([size='medium']) {\n    --fwc-badge-size: 1.5rem;\n    --fwc-badge-font-size: 0.75rem;\n    --fwc-badge-icon-size: 0.625rem;\n  }\n  :host([size='large']) {\n    --fwc-badge-size: 2rem;\n    --fwc-badge-font-size: 1rem;\n    --fwc-badge-icon-size: 0.875rem;\n  }\n  :host([position='top-left']) {\n    transform: scale(1) translate(-50%, -50%);\n    transform-origin: 0% 0%;\n  }\n  :host([position='top-left']:not([circular])) {\n    top: 0;\n    left: 0;\n  }\n  :host([position='top-left'][circular]) {\n    top: 15%;\n    left: 15%;\n  }\n  :host([position='top-right']) {\n    transform: scale(1) translate(50%, -50%);\n    transform-origin: 0% 100%;\n  }\n  :host([position='top-right']:not([circular])) {\n    top: 0;\n    right: 0;\n  }\n  :host([position='top-right'][circular]) {\n    top: 15%;\n    right: 15%;\n  }\n  :host([position='bottom-left']) {\n    transform: scale(1) translate(-50%, 50%);\n    transform-origin: 0% 100%;\n  }\n  :host([position='bottom-left']:not([circular])) {\n    bottom: 0;\n    left: 0;\n  }\n  :host([position='bottom-left'][circular]) {\n    bottom: 15%;\n    left: 15%;\n  }\n  :host([position='bottom-right']) {\n    transform: scale(1) translate(50%, 50%);\n    transform-origin: 100% 100%;\n  }\n  :host([position='bottom-right']:not([circular])) {\n    bottom: 0;\n    right: 0;\n  }\n  :host([position='bottom-right'][circular]) {\n    bottom: 15%;\n    right: 15%;\n  }\n  :host([color='primary']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([color='secondary']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([color='success']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([color='danger']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='warning']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([color='disabled']) {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n  :host([clickable]:not([disabled]):hover) {\n    cursor: pointer;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property, queryAssignedNodes, queryAsync, eventOptions } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { BadgeSize, BadgePosition, BadgeColor } from './types';\nimport { RippleHandlers } from '@equinor/fusion-wc-ripple';\nimport style from './element.css';\n/**\n * Element for displaying a badge.\n * {@inheritdoc}\n *\n * @tag fwc-badge\n *\n * @property {BadgeSize} size - Sets the size of the badge. Size 'XSmall' does not render 'value' or 'icon'.\n * @property {BadgePosition} position - Sets position of the badge.\n * @property {BadgeColor} color - Sets color of the badge.\n * @property {String} value - Sets text content to be rendered within the badge. Not rendered if size is set to 'XSmall'.\n * @property {IconName} icon - Sets icon to be rendered within the badge. Overrides the 'value' attribute. Not rendered if size is set to 'XSmall'.\n *\n * @cssprop {theme.colors.interactive.primary__resting} --fwc-badge-color - Color of the badge.\n * @cssprop {1.5rem} --fwc-badge-size - Size of the badge.\n * @cssprop {0.75rem} --fwc-badge-font-size - Font size of the text value.\n * @cssprop {0.685em} --fwc-badge-icon-size - Size of the icon.\n *\n * @fires click - When the element is clicked, only fires when `clickable` is set to `true` and `disabled` is set to `false`.\n *\n * Value can be slotted in with a slot named 'value'.\n * Icon can be slotted in with a slot named 'icon'. Overrides the 'value' slot.\n *\n */\nexport class BadgeElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the badge\n         * @default BadgeSize.Medium\n         */\n        this.size = BadgeSize.Medium;\n        /**\n         * Absolute corner position for the badge\n         * @default BadgePosition.TopRight\n         */\n        this.position = BadgePosition.TopRight;\n        /**\n         * Color of the badge\n         * @default BadgeColor.Secondary\n         */\n        this.color = BadgeColor.Secondary;\n        /**\n         * Define ripple handlers.\n         */\n        this.rippleHandlers = new RippleHandlers(() => {\n            return this.ripple;\n        });\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('disabled')) {\n            if (this.disabled) {\n                this.clickable = false;\n                this.color = BadgeColor.Disabled;\n                this.requestUpdate('clickable');\n                this.requestUpdate('color');\n            }\n        }\n    }\n    /**\n     * Render the icon value if the 'icon' attribute is set or a slotted 'icon' element is provided.\n     */\n    renderIcon() {\n        const renderIcon = this.size !== BadgeSize.XSmall && (this.icon || (this.iconSlot && this.iconSlot.length > 0));\n        if (renderIcon) {\n            return html `<slot name=\"icon\" class=\"fwc-badge__icon\"><fwc-icon icon=${ifDefined(this.icon)}></fwc-icon></slot>`;\n        }\n        return undefined;\n    }\n    /**\n     * Render the text value if the 'value' attribute is set or a slotted 'value' element is provided.\n     */\n    renderValue() {\n        const renderValue = this.size !== BadgeSize.XSmall && (this.value || (this.valueSlot && this.valueSlot.length > 0));\n        if (renderValue) {\n            return html `<slot name=\"value\" class=\"fwc-badge__value\">${this.value}</slot>`;\n        }\n        return undefined;\n    }\n    /**\n     * Render the ripple element.\n     */\n    renderRipple() {\n        return this.clickable\n            ? html `<fwc-ripple class=\"fwc-badge__ripple\" disabled=\"${ifDefined(this.disabled)}\" unbounded></fwc-ripple>`\n            : '';\n    }\n    /** {@inheritDoc} */\n    render() {\n        var _a;\n        const content = (_a = this.renderIcon()) !== null && _a !== void 0 ? _a : this.renderValue();\n        return html `<span\n        class=\"fwc-badge__container\"\n        @click=${this.handleOnClick}\n        @focus=\"${this.handleRippleFocus}\"\n        @blur=\"${this.handleRippleBlur}\"\n        @mousedown=\"${this.handleRippleActivate}\"\n        @mouseenter=\"${this.handleRippleMouseEnter}\"\n        @mouseleave=\"${this.handleRippleMouseLeave}\"\n        @touchstart=\"${this.handleRippleActivate}\"\n        @touchend=\"${this.handleRippleDeactivate}\"\n        @touchcancel=\"${this.handleRippleDeactivate}\"\n        >${content}</span\n      >${this.renderRipple()}`;\n    }\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    /**\n     * Handle ripple deactivate event.\n     */\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    /**\n     * Handle ripple start hover event.\n     */\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    /**\n     * Handle ripple end hover event.\n     */\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    /**\n     * Handle ripple focus event.\n     */\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    /**\n     * Handle ripple blur event.\n     */\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    /**\n     * Handle on click.\n     */\n    handleOnClick(e) {\n        if (this.clickable && !this.disabled) {\n            this.dispatchEvent(new PointerEvent('click', e));\n        }\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"position\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], BadgeElement.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], BadgeElement.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"circular\", void 0);\n__decorate([\n    property({ type: String })\n], BadgeElement.prototype, \"tooltip\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], BadgeElement.prototype, \"disabled\", void 0);\n__decorate([\n    queryAsync('fwc-ripple')\n], BadgeElement.prototype, \"ripple\", void 0);\n__decorate([\n    queryAssignedNodes('icon')\n], BadgeElement.prototype, \"iconSlot\", void 0);\n__decorate([\n    queryAssignedNodes('value')\n], BadgeElement.prototype, \"valueSlot\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], BadgeElement.prototype, \"handleRippleActivate\", null);\nBadgeElement.styles = [style];\nexport default BadgeElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-icon/mwc-icon.js';\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html, LitElement } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class ButtonBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.raised = false;\n        this.unelevated = false;\n        this.outlined = false;\n        this.dense = false;\n        this.disabled = false;\n        this.trailingIcon = false;\n        this.fullwidth = false;\n        this.icon = '';\n        this.label = '';\n        this.expandContent = false;\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    /** @soyTemplate */\n    renderOverlay() {\n        return html ``;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        const filled = this.raised || this.unelevated;\n        return this.shouldRenderRipple ?\n            html `<mwc-ripple class=\"ripple\" .primary=\"${!filled}\" .disabled=\"${this.disabled}\"></mwc-ripple>` :\n            '';\n    }\n    focus() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.startFocus();\n            buttonElement.focus();\n        }\n    }\n    blur() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.endFocus();\n            buttonElement.blur();\n        }\n    }\n    /** @soyTemplate */\n    getRenderClasses() {\n        return {\n            'mdc-button--raised': this.raised,\n            'mdc-button--unelevated': this.unelevated,\n            'mdc-button--outlined': this.outlined,\n            'mdc-button--dense': this.dense,\n        };\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes buttonAttributes: #button\n     * @soyClasses buttonClasses: #button\n     */\n    render() {\n        return html `\n      <button\n          id=\"button\"\n          class=\"mdc-button ${classMap(this.getRenderClasses())}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n          @focus=\"${this.handleRippleFocus}\"\n          @blur=\"${this.handleRippleBlur}\"\n          @mousedown=\"${this.handleRippleActivate}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleActivate}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        ${this.renderOverlay()}\n        ${this.renderRipple()}\n        <span class=\"leading-icon\">\n          <slot name=\"icon\">\n            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n        <span class=\"mdc-button__label\">${this.label}</span>\n        <span class=\"slot-container ${classMap({\n            flex: this.expandContent\n        })}\">\n          <slot></slot>\n        </span>\n        <span class=\"trailing-icon\">\n          <slot name=\"trailingIcon\">\n            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n      </button>`;\n    }\n    /** @soyTemplate */\n    renderIcon() {\n        return html `\n    <mwc-icon class=\"mdc-button__icon\">\n      ${this.icon}\n    </mwc-icon>`;\n    }\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\nButtonBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-haspopup' })\n], ButtonBase.prototype, \"ariaHasPopup\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"raised\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"unelevated\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"dense\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'trailingicon' })\n], ButtonBase.prototype, \"trailingIcon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"expandContent\", void 0);\n__decorate([\n    query('#button')\n], ButtonBase.prototype, \"buttonElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], ButtonBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], ButtonBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], ButtonBase.prototype, \"handleRippleActivate\", null);\n//# sourceMappingURL=mwc-button-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-button/styles.css';\nexport const style = css `\n  :host {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-button-disabled-fill-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n    --mdc-button-disabled-ink-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    --mdc-button-disabled-outline-color: ${unsafeCSS(theme.colors.interactive.disabled__border.getVariable('color'))};\n    --mdc-typography-button-text-transform: none;\n  }\n  :host([variant='contained'][color='primary']) .mdc-button {\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='contained'][color='secondary']) .mdc-button {\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='contained'][color='danger']) .mdc-button {\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='primary']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='secondary']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='outlined'][color='danger']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='primary']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='secondary']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([variant='ghost'][color='danger']) .mdc-button {\n    --mdc-button-outline-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    --mdc-theme-primary: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  .leading-icon ::slotted(*),\n  .trailing-icon ::slotted(*) {\n    display: initial;\n  }\n  .leading-icon fwc-icon.mdc-button__icon,\n  .leading-icon ::slotted(fwc-icon),\n  .trailing-icon fwc-icon.mdc-button__icon,\n  .trailing-icon ::slotted(fwc-icon) {\n    display: inline-flex;\n  }\n`;\nexport const styles = [mdcStyle, style];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ButtonBase } from '@material/mwc-button/mwc-button-base';\nimport Icon from '@equinor/fusion-wc-icon';\nimport styles from './element.css';\nimport { classMap } from 'lit/directives/class-map.js';\n// persist element\nIcon;\nexport class LinkButtonElement extends ButtonBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Leading icon to display in input\n         * @See [`fwc-icon`](https://github.com/equinor/fusion-web-components/tree/main/packages/icon)\n         * @override\n         */\n        // @ts-ignore\n        this.icon = '';\n        this.color = 'primary';\n        this.variant = 'contained';\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            switch (this.variant) {\n                case 'contained': {\n                    this.unelevated = true;\n                    this.raised = false;\n                    this.outlined = false;\n                    break;\n                }\n                case 'outlined': {\n                    this.unelevated = false;\n                    this.raised = false;\n                    this.outlined = true;\n                    break;\n                }\n                case 'ghost': {\n                    this.unelevated = false;\n                    this.raised = false;\n                    this.outlined = false;\n                    break;\n                }\n            }\n            this.requestUpdate();\n        }\n    }\n    renderIcon() {\n        return html `<fwc-icon class=\"mdc-button__icon\" .icon=${this.icon}></fwc-icon>`;\n    }\n    render() {\n        return html ` <a\n      class=\"mdc-button ${classMap(this.getRenderClasses())}\"\n      href=\"${ifDefined(this.href)}\"\n      target=\"${ifDefined(this.target)}\"\n      ?disabled=\"${this.disabled}\"\n      aria-label=\"${this.label || this.icon}\"\n      @focus=\"${this.handleRippleFocus}\"\n      @blur=\"${this.handleRippleBlur}\"\n      @mousedown=\"${this.handleRippleActivate}\"\n      @mouseenter=\"${this.handleRippleMouseEnter}\"\n      @mouseleave=\"${this.handleRippleMouseLeave}\"\n      @touchstart=\"${this.handleRippleActivate}\"\n      @touchend=\"${this.handleRippleDeactivate}\"\n      @touchcancel=\"${this.handleRippleDeactivate}\"\n    >\n      ${this.renderOverlay()} ${this.renderRipple()}\n      <span class=\"leading-icon\">\n        <slot name=\"icon\"> ${this.icon && !this.trailingIcon ? this.renderIcon() : ''} </slot>\n      </span>\n      <span class=\"mdc-button__label\">${this.label}</span>\n      <span\n        class=\"slot-container ${classMap({\n            flex: this.expandContent,\n        })}\"\n      >\n        <slot></slot>\n      </span>\n      <span class=\"trailing-icon\">\n        <slot name=\"trailingIcon\"> ${this.icon && this.trailingIcon ? this.renderIcon() : ''} </slot>\n      </span>\n    </a>`;\n    }\n}\n__decorate([\n    property({ type: String })\n], LinkButtonElement.prototype, \"href\", void 0);\n__decorate([\n    property({ type: String })\n], LinkButtonElement.prototype, \"target\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], LinkButtonElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], LinkButtonElement.prototype, \"variant\", void 0);\nLinkButtonElement.styles = styles;\nexport default LinkButtonElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    font-size: calc(\n      ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontSize'))} * var(--content-resize, 1)\n    );\n    --fwc-ripple-color: ${unsafeCSS(theme.colors.interactive.danger__resting.value.hex)};\n  }\n  :host([size='x-small']) .mdc-icon-button {\n    --content-resize: 0.6;\n  }\n  :host([size='small']) .mdc-icon-button {\n    --content-resize: 0.8;\n  }\n  :host([size='medium']) .mdc-icon-button {\n    --content-resize: 1;\n  }\n  :host([size='large']) .mdc-icon-button {\n    --content-resize: 1.2;\n  }\n  :host([size='x-large']) .mdc-icon-button {\n    --content-resize: 1.4;\n  }\n  .mdc-icon-button {\n    --mdc-icon-button-size: calc(48px * var(--content-resize, 1));\n  }\n  .mdc-icon-button__icon {\n    font-size: calc(20px * var(--content-resize, 1));\n  }\n  .mdc-icon-button ::slotted(svg) {\n    --mdc-icon-size: calc(24px * var(--content-resize, 1));\n  }\n  .mdc-icon-button ::slotted(*) {\n    --mdc-icon-size: calc(28px * var(--content-resize, 1));\n  }\n  :host([color='primary']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.primary__resting.value.hex)};\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([color='secondary']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([color='success']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([color='danger']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='warning']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([color='disabled']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html, LitElement } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class IconButtonBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.disabled = false;\n        this.icon = '';\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? html `\n            <mwc-ripple\n                .disabled=\"${this.disabled}\"\n                unbounded>\n            </mwc-ripple>` :\n            '';\n    }\n    focus() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.startFocus();\n            buttonElement.focus();\n        }\n    }\n    blur() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.endFocus();\n            buttonElement.blur();\n        }\n    }\n    /** @soyTemplate */\n    render() {\n        return html `<button\n        class=\"mdc-icon-button mdc-icon-button--display-flex\"\n        aria-label=\"${this.ariaLabel || this.icon}\"\n        aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n        ?disabled=\"${this.disabled}\"\n        @focus=\"${this.handleRippleFocus}\"\n        @blur=\"${this.handleRippleBlur}\"\n        @mousedown=\"${this.handleRippleMouseDown}\"\n        @mouseenter=\"${this.handleRippleMouseEnter}\"\n        @mouseleave=\"${this.handleRippleMouseLeave}\"\n        @touchstart=\"${this.handleRippleTouchStart}\"\n        @touchend=\"${this.handleRippleDeactivate}\"\n        @touchcancel=\"${this.handleRippleDeactivate}\"\n    >${this.renderRipple()}\n    ${this.icon ? html `<i class=\"material-icons\">${this.icon}</i>` : ''}\n    <span\n      ><slot></slot\n    ></span>\n  </button>`;\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\n__decorate([\n    property({ type: Boolean, reflect: true })\n], IconButtonBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonBase.prototype, \"icon\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], IconButtonBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-haspopup' })\n], IconButtonBase.prototype, \"ariaHasPopup\", void 0);\n__decorate([\n    query('button')\n], IconButtonBase.prototype, \"buttonElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], IconButtonBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], IconButtonBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonBase.prototype, \"handleRippleMouseDown\", null);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-icon-button-base.js.map","import { __decorate } from \"tslib\";\nimport { property } from 'lit/decorators.js';\nimport style from './element.css';\nimport { IconButtonBase } from '@material/mwc-icon-button/mwc-icon-button-base';\nimport { styles as mwcStyle } from '@material/mwc-icon-button/mwc-icon-button.css';\nimport { html } from 'lit';\nimport Icon from '@equinor/fusion-wc-icon';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IconButtonColor, IconButtonSize } from './types';\n// Persist element\nIcon;\nexport class IconButtonElement extends IconButtonBase {\n    constructor() {\n        super(...arguments);\n        this.color = IconButtonColor.Primary;\n        this.size = IconButtonSize.Medium;\n        /* override icon for the icon type change */\n        this.icon = '';\n    }\n    /**\n     * override rendering of the ripple\n     * @returns the ripple for setting up 'unbounded' as an additional property\n     */\n    renderRipple() {\n        return this.shouldRenderRipple\n            ? html ` <mwc-ripple .disabled=\"${this.disabled}\" .unbounded=\"${this.rounded}\"> </mwc-ripple>`\n            : '';\n    }\n    /**\n     * override render of the icon button\n     * @returns full render of IconButtonBase with fwc-icon used instead of alredy used material icon\n     */\n    render() {\n        return html `<button\n      class=\"mdc-icon-button mdc-icon-button--display-flex\"\n      aria-label=\"${this.ariaLabel || this.icon + '_icon-button'}\"\n      aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n      ?disabled=\"${this.disabled}\"\n      @focus=\"${this.handleRippleFocus}\"\n      @blur=\"${this.handleRippleBlur}\"\n      @mousedown=\"${this.handleRippleMouseDown}\"\n      @mouseenter=\"${this.handleRippleMouseEnter}\"\n      @mouseleave=\"${this.handleRippleMouseLeave}\"\n      @touchstart=\"${this.handleRippleTouchStart}\"\n      @touchend=\"${this.handleRippleDeactivate}\"\n      @touchcancel=\"${this.handleRippleDeactivate}\"\n    >\n      ${this.renderRipple()}\n      ${this.icon ? html `<fwc-icon class=\"mdc-icon-button__icon\" .icon=${this.icon}></fwc-icon>` : ''}\n      <span><slot></slot></span>\n    </button>`;\n    }\n}\n/* styles object css */\nIconButtonElement.styles = [style, mwcStyle];\n__decorate([\n    property({ type: String })\n], IconButtonElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], IconButtonElement.prototype, \"rounded\", void 0);\nexport default IconButtonElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    font-size: calc(\n      ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontSize'))} * var(--content-resize, 1)\n    );\n    --fwc-ripple-color: ${unsafeCSS(theme.colors.interactive.danger__resting.value.hex)};\n  }\n  :host([size='x-small']) .mdc-icon-button {\n    --content-resize: 0.6;\n  }\n  :host([size='small']) .mdc-icon-button {\n    --content-resize: 0.8;\n  }\n  :host([size='medium']) .mdc-icon-button {\n    --content-resize: 1;\n  }\n  :host([size='large']) .mdc-icon-button {\n    --content-resize: 1.2;\n  }\n  :host([size='x-large']) .mdc-icon-button {\n    --content-resize: 1.4;\n  }\n  .mdc-icon-button {\n    --mdc-icon-button-size: calc(48px * var(--content-resize, 1));\n  }\n  .mdc-icon-button__icon {\n    font-size: calc(20px * var(--content-resize, 1));\n  }\n  .mdc-icon-button__icon slot {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .mdc-icon-button ::slotted(svg) {\n    --mdc-icon-size: calc(24px * var(--content-resize, 1));\n  }\n  .mdc-icon-button ::slotted(*) {\n    --mdc-icon-size: calc(28px * var(--content-resize, 1));\n  }\n  :host([offColor='primary']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.primary__resting.value.hex)};\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([offColor='secondary']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([offColor='success']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([offColor='danger']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([offColor='warning']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([offColor='disabled']) .mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n  :host([onColor='primary']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.primary__resting.value.hex)};\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  :host([onColor='secondary']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.value.hex)};\n    color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n  }\n  :host([onColor='success']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  :host([onColor='danger']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([onColor='warning']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  :host([onColor='disabled']) .mdc-icon-button--on.mdc-icon-button {\n    --mdc-ripple-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html, LitElement } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class IconButtonToggleBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.disabled = false;\n        this.onIcon = '';\n        this.offIcon = '';\n        this.on = false;\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    handleClick() {\n        this.on = !this.on;\n        this.dispatchEvent(new CustomEvent('icon-button-toggle-change', { detail: { isOn: this.on }, bubbles: true }));\n    }\n    click() {\n        this.mdcRoot.focus();\n        this.mdcRoot.click();\n    }\n    focus() {\n        this.rippleHandlers.startFocus();\n        this.mdcRoot.focus();\n    }\n    blur() {\n        this.rippleHandlers.endFocus();\n        this.mdcRoot.blur();\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? html `\n            <mwc-ripple\n                .disabled=\"${this.disabled}\"\n                unbounded>\n            </mwc-ripple>` :\n            '';\n    }\n    /** @soyTemplate */\n    render() {\n        /** @classMap */\n        const classes = {\n            'mdc-icon-button--on': this.on,\n        };\n        const hasToggledAriaLabel = this.ariaLabelOn !== undefined && this.ariaLabelOff !== undefined;\n        const ariaPressedValue = hasToggledAriaLabel ? undefined : this.on;\n        const ariaLabelValue = hasToggledAriaLabel ?\n            (this.on ? this.ariaLabelOn : this.ariaLabelOff) :\n            this.ariaLabel;\n        return html `<button\n          class=\"mdc-icon-button mdc-icon-button--display-flex ${classMap(classes)}\"\n          aria-pressed=\"${ifDefined(ariaPressedValue)}\"\n          aria-label=\"${ifDefined(ariaLabelValue)}\"\n          @click=\"${this.handleClick}\"\n          ?disabled=\"${this.disabled}\"\n          @focus=\"${this.handleRippleFocus}\"\n          @blur=\"${this.handleRippleBlur}\"\n          @mousedown=\"${this.handleRippleMouseDown}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleTouchStart}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\"\n        >${this.renderRipple()}\n        <span class=\"mdc-icon-button__icon\"\n          ><slot name=\"offIcon\"\n            ><i class=\"material-icons\">${this.offIcon}</i\n          ></slot\n        ></span>\n        <span class=\"mdc-icon-button__icon mdc-icon-button__icon--on\"\n          ><slot name=\"onIcon\"\n            ><i class=\"material-icons\">${this.onIcon}</i\n          ></slot\n        ></span>\n      </button>`;\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\n__decorate([\n    query('.mdc-icon-button')\n], IconButtonToggleBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], IconButtonToggleBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], IconButtonToggleBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleBase.prototype, \"onIcon\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleBase.prototype, \"offIcon\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleBase.prototype, \"ariaLabelOn\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleBase.prototype, \"ariaLabelOff\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], IconButtonToggleBase.prototype, \"on\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], IconButtonToggleBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], IconButtonToggleBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonToggleBase.prototype, \"handleRippleMouseDown\", null);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonToggleBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-icon-button-toggle-base.js.map","import { __decorate } from \"tslib\";\nimport { property } from 'lit/decorators.js';\nimport style from './element.css';\nimport { IconButtonToggleBase } from '@material/mwc-icon-button-toggle/mwc-icon-button-toggle-base';\nimport { styles as mwcStyle } from '@material/mwc-icon-button/mwc-icon-button.css';\nimport { html } from 'lit';\nimport Icon from '@equinor/fusion-wc-icon';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IconButtonColor, IconButtonSize } from '../icon-button/types';\nimport { classMap } from 'lit/directives/class-map.js';\n// Persist element\nIcon;\nexport class IconButtonToggleElement extends IconButtonToggleBase {\n    constructor() {\n        super(...arguments);\n        this.onColor = IconButtonColor.Primary;\n        this.offColor = IconButtonColor.Primary;\n        this.size = IconButtonSize.Medium;\n        /* override on/off icons for the icon type change */\n        this.onIcon = '';\n        this.offIcon = '';\n    }\n    /**\n     * override rendering of the ripple\n     * @returns the ripple for setting up 'unbounded' as an additional property\n     */\n    renderRipple() {\n        return this.shouldRenderRipple\n            ? html ` <mwc-ripple .disabled=\"${this.disabled}\" .unbounded=\"${this.rounded}\"> </mwc-ripple>`\n            : '';\n    }\n    /**\n     * override render of the icon button\n     * @returns full render of IconButtonBase with fwc-icon used instead of alredy used material icon\n     */\n    render() {\n        /** @classMap */\n        const classes = {\n            'mdc-icon-button--on': this.on,\n        };\n        const hasToggledAriaLabel = this.ariaLabelOn !== undefined && this.ariaLabelOff !== undefined;\n        const ariaPressedValue = hasToggledAriaLabel ? undefined : this.on;\n        const ariaLabelValue = hasToggledAriaLabel ? (this.on ? this.ariaLabelOn : this.ariaLabelOff) : this.ariaLabel;\n        return html `<button\n      class=\"mdc-icon-button mdc-icon-button--display-flex ${classMap(classes)}\"\n      aria-pressed=\"${ifDefined(ariaPressedValue)}\"\n      aria-label=\"${ifDefined(ariaLabelValue)}\"\n      @click=\"${this.handleClick}\"\n      ?disabled=\"${this.disabled}\"\n      @focus=\"${this.handleRippleFocus}\"\n      @blur=\"${this.handleRippleBlur}\"\n      @mousedown=\"${this.handleRippleMouseDown}\"\n      @mouseenter=\"${this.handleRippleMouseEnter}\"\n      @mouseleave=\"${this.handleRippleMouseLeave}\"\n      @touchstart=\"${this.handleRippleTouchStart}\"\n      @touchend=\"${this.handleRippleDeactivate}\"\n      @touchcancel=\"${this.handleRippleDeactivate}\"\n    >\n      ${this.renderRipple()}\n      <span class=\"mdc-icon-button__icon\"\n        ><slot name=\"offIcon\"><fwc-icon .icon=${this.offIcon} /></span\n      >\n      <span class=\"mdc-icon-button__icon mdc-icon-button__icon--on\"\n        ><slot name=\"onIcon\"><fwc-icon .icon=${this.onIcon} /></span\n      >\n    </button>`;\n    }\n}\n/* styles object css */\nIconButtonToggleElement.styles = [style, mwcStyle];\n__decorate([\n    property({ type: String })\n], IconButtonToggleElement.prototype, \"onColor\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleElement.prototype, \"offColor\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonToggleElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], IconButtonToggleElement.prototype, \"rounded\", void 0);\nexport default IconButtonToggleElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class CheckboxBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.checked = false;\n        this.indeterminate = false;\n        this.disabled = false;\n        this.name = '';\n        this.value = 'on';\n        /**\n         * Touch target extends beyond visual boundary of a component by default.\n         * Set to `true` to remove touch target added to the component.\n         * @see https://material.io/design/usability/accessibility.html\n         */\n        this.reducedTouchTarget = false;\n        this.animationClass = '';\n        this.shouldRenderRipple = false;\n        this.focused = false;\n        // MDC Foundation is unused\n        this.mdcFoundationClass = undefined;\n        this.mdcFoundation = undefined;\n        this.rippleElement = null;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            this.ripple.then((v) => this.rippleElement = v);\n            return this.ripple;\n        });\n    }\n    createAdapter() {\n        return {};\n    }\n    update(changedProperties) {\n        const oldIndeterminate = changedProperties.get('indeterminate');\n        const oldChecked = changedProperties.get('checked');\n        const oldDisabled = changedProperties.get('disabled');\n        if (oldIndeterminate !== undefined || oldChecked !== undefined ||\n            oldDisabled !== undefined) {\n            const oldState = this.calculateAnimationStateName(!!oldChecked, !!oldIndeterminate, !!oldDisabled);\n            const newState = this.calculateAnimationStateName(this.checked, this.indeterminate, this.disabled);\n            this.animationClass = `${oldState}-${newState}`;\n        }\n        super.update(changedProperties);\n    }\n    calculateAnimationStateName(checked, indeterminate, disabled) {\n        if (disabled) {\n            return 'disabled';\n        }\n        else if (indeterminate) {\n            return 'indeterminate';\n        }\n        else if (checked) {\n            return 'checked';\n        }\n        else {\n            return 'unchecked';\n        }\n    }\n    // TODO(dfreedm): Make this use selected as a param after Polymer/internal#739\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? this.renderRippleTemplate() : '';\n    }\n    /** @soyTemplate */\n    renderRippleTemplate() {\n        return html `<mwc-ripple\n        .disabled=\"${this.disabled}\"\n        unbounded></mwc-ripple>`;\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes checkboxAttributes: input\n     * @soyClasses checkboxClasses: .mdc-checkbox\n     */\n    render() {\n        const selected = this.indeterminate || this.checked;\n        /* eslint-disable eqeqeq */\n        // tslint:disable:triple-equals\n        /** @classMap */\n        const classes = {\n            'mdc-checkbox--disabled': this.disabled,\n            'mdc-checkbox--selected': selected,\n            'mdc-checkbox--touch': !this.reducedTouchTarget,\n            'mdc-ripple-upgraded--background-focused': this.focused,\n            // transition animiation classes\n            'mdc-checkbox--anim-checked-indeterminate': this.animationClass == 'checked-indeterminate',\n            'mdc-checkbox--anim-checked-unchecked': this.animationClass == 'checked-unchecked',\n            'mdc-checkbox--anim-indeterminate-checked': this.animationClass == 'indeterminate-checked',\n            'mdc-checkbox--anim-indeterminate-unchecked': this.animationClass == 'indeterminate-unchecked',\n            'mdc-checkbox--anim-unchecked-checked': this.animationClass == 'unchecked-checked',\n            'mdc-checkbox--anim-unchecked-indeterminate': this.animationClass == 'unchecked-indeterminate',\n        };\n        // tslint:enable:triple-equals\n        /* eslint-enable eqeqeq */\n        const ariaChecked = this.indeterminate ? 'mixed' : undefined;\n        return html `\n      <div class=\"mdc-checkbox mdc-checkbox--upgraded ${classMap(classes)}\">\n        <input type=\"checkbox\"\n              class=\"mdc-checkbox__native-control\"\n              name=\"${ifDefined(this.name)}\"\n              aria-checked=\"${ifDefined(ariaChecked)}\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              aria-describedby=\"${ifDefined(this.ariaDescribedBy)}\"\n              data-indeterminate=\"${this.indeterminate ? 'true' : 'false'}\"\n              ?disabled=\"${this.disabled}\"\n              .indeterminate=\"${this.indeterminate}\"\n              .checked=\"${this.checked}\"\n              .value=\"${this.value}\"\n              @change=\"${this.handleChange}\"\n              @focus=\"${this.handleFocus}\"\n              @blur=\"${this.handleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n        <div class=\"mdc-checkbox__background\"\n          @animationend=\"${this.resetAnimationClass}\">\n          <svg class=\"mdc-checkbox__checkmark\"\n              viewBox=\"0 0 24 24\">\n            <path class=\"mdc-checkbox__checkmark-path\"\n                  fill=\"none\"\n                  d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n          <div class=\"mdc-checkbox__mixedmark\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n    }\n    setFormData(formData) {\n        if (this.name && this.checked) {\n            formData.append(this.name, this.value);\n        }\n    }\n    handleFocus() {\n        this.focused = true;\n        this.handleRippleFocus();\n    }\n    handleBlur() {\n        this.focused = false;\n        this.handleRippleBlur();\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    handleChange() {\n        this.checked = this.formElement.checked;\n        this.indeterminate = this.formElement.indeterminate;\n    }\n    resetAnimationClass() {\n        this.animationClass = '';\n    }\n    get isRippleActive() {\n        var _a;\n        return ((_a = this.rippleElement) === null || _a === void 0 ? void 0 : _a.isActive) || false;\n    }\n}\n__decorate([\n    query('.mdc-checkbox')\n], CheckboxBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], CheckboxBase.prototype, \"formElement\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"checked\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CheckboxBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], CheckboxBase.prototype, \"value\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], CheckboxBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-labelledby' })\n], CheckboxBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-describedby' })\n], CheckboxBase.prototype, \"ariaDescribedBy\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"reducedTouchTarget\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"animationClass\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"focused\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], CheckboxBase.prototype, \"ripple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], CheckboxBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-checkbox-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-checkbox/mwc-checkbox.css';\nexport const style = css `\n  :host {\n    --fwc-checkbox-size: 18px;\n    --fwc-checkbox-spacing: calc(var(--fwc-checkbox-size) / 2);\n  }\n  :host([reducedtouchtarget]) {\n    --fwc-checkbox-size: 14px;\n  }\n`;\nexport const mdcStyleOverride = css `\n  :host {\n    --mdc-checkbox-ink-color: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --mdc-checkbox-unchecked-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-checkbox-disabled-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n  }\n  .mdc-checkbox {\n    flex: 0 0 var(--fwc-checkbox-size) !important;\n    width: var(--fwc-checkbox-size) !important;\n    height: var(--fwc-checkbox-size) !important;\n    padding: var(--fwc-checkbox-spacing) !important;\n    margin: 0 !important;\n  }\n  .mdc-checkbox__background {\n    width: var(--fwc-checkbox-size) !important;\n    height: var(--fwc-checkbox-size) !important;\n  }\n  .mdc-checkbox .mdc-checkbox__background {\n    top: var(--fwc-checkbox-spacing) !important;\n    left: var(--fwc-checkbox-spacing) !important;\n  }\n  .mdc-checkbox .mdc-checkbox__native-control {\n    width: calc(var(--fwc-checkbox-size) + var(--fwc-checkbox-spacing) * 2) !important;\n    height: calc(var(--fwc-checkbox-size) + var(--fwc-checkbox-spacing) * 2) !important;\n    top: 0 !important;\n    left: 0 !important;\n  }\n`;\nexport const styles = [mdcStyle, mdcStyleOverride, style];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host .fwc-chip {\n    min-width: var(--fwc-chip-size);\n    height: var(--fwc-chip-size);\n    font-size: var(--fwc-chip-font-size);\n    font-family: 'Equinor';\n    border-radius: var(--fwc-chip-font-size);\n    position: relative;\n    box-sizing: border-box;\n    display: inline-flex;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n    overflow: hidden;\n    padding: 0 0.75em;\n  }\n  :host([variant='filled']) .fwc-chip {\n    background-color: var(--fwc-chip-fill-color);\n    color: var(--fwc-chip-ink-color);\n  }\n  :host([clickable][variant='filled']:not([disabled]):hover) .fwc-chip {\n    background-color: var(--fwc-chip-fill-hover-color);\n    color: var(--fwc-chip-ink-hover-color);\n  }\n  :host([variant='outlined']) .fwc-chip {\n    border: 1px solid var(--fwc-chip-border-color);\n    color: var(--fwc-chip-ink-color);\n  }\n  :host([clickable][variant='outlined']:not([disabled]):hover) .fwc-chip {\n    border: 1px solid var(--fwc-chip-border-hover-color);\n    color: var(--fwc-chip-ink-hover-color);\n  }\n  :host([clickable]:not([disabled]):hover) .fwc-chip {\n    cursor: pointer;\n  }\n  :host .fwc-chip__graphic {\n    margin-right: 0.5em;\n    font-size: 0.75em;\n  }\n  :host .fwc-chip__remove {\n    margin-left: 0.5em;\n    font-size: 0.75em;\n  }\n  :host .fwc-chip__remove:hover {\n    cursor: pointer;\n    color: var(--fwc-chip-ink-hover-color);\n  }\n  :host([size='small']) {\n    --fwc-chip-size: 1.25rem;\n    --fwc-chip-font-size: 0.625rem;\n  }\n  :host([size='medium']) {\n    --fwc-chip-size: 1.75rem;\n    --fwc-chip-font-size: 0.875rem;\n  }\n  :host([size='large']) {\n    --fwc-chip-size: 2.5rem;\n    --fwc-chip-font-size: 1.25rem;\n  }\n  :host([color='primary'][variant='filled']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-chip-fill-hover-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))};\n  }\n  :host([color='primary'][variant='outlined']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.primary__hover.getVariable('color'))};\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.primary__hover.getVariable('color'))};\n  }\n  :host([color='secondary'][variant='filled']) {\n    --fwc-chip-ink-color: #fff;\n    --fwc-chip-ink-hover-color: #fff;\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    --fwc-chip-fill-hover-color: ${unsafeCSS(theme.colors.interactive.secondary__link_hover.getVariable('color'))};\n  }\n  :host([color='secondary'][variant='outlined']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.secondary__link_hover.getVariable('color'))};\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.secondary__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.secondary__link_hover.getVariable('color'))};\n  }\n  :host([color='success'][variant='filled']) {\n    --fwc-chip-ink-color: #fff;\n    --fwc-chip-ink-hover-color: #fff;\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.success__hover.getVariable('color'))};\n  }\n  :host([color='success'][variant='outlined']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.success__hover.getVariable('color'))};\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.success__hover.getVariable('color'))};\n  }\n  :host([color='danger'][variant='filled']) {\n    --fwc-chip-ink-color: #fff;\n    --fwc-chip-ink-hover-color: #fff;\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    --fwc-chip-fill-hover-color: ${unsafeCSS(theme.colors.interactive.danger__hover.getVariable('color'))};\n  }\n  :host([color='danger'][variant='outlined']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.danger__hover.getVariable('color'))};\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.danger__hover.getVariable('color'))};\n  }\n  :host([color='warning'][variant='filled']) {\n    --fwc-chip-ink-color: #fff;\n    --fwc-chip-ink-hover-color: #fff;\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    --fwc-chip-fill-hover-color: ${unsafeCSS(theme.colors.interactive.warning__hover.getVariable('color'))};\n  }\n  :host([color='warning'][variant='outlined']) {\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    --fwc-chip-ink-hover-color: ${unsafeCSS(theme.colors.interactive.warning__hover.getVariable('color'))};\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n    --fwc-chip-border-hover-color: ${unsafeCSS(theme.colors.interactive.warning__hover.getVariable('color'))};\n  }\n  :host([disabled][variant='filled']) {\n    --fwc-chip-fill-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))} !important;\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))} !important;\n  }\n  :host([disabled][variant='outlined']) {\n    --fwc-chip-border-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))} !important;\n    --fwc-chip-ink-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))} !important;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport style from './element.css';\n/**\n * TODO: Chips that are set to both removable and clickable will not handle the 'click' and 'remove' events correctly.\n * @tag fwc-chip\n * @property {ChipSize} size - Set the size of the chip element\n * @property {ChipVariant} variant - Set the variant of the chip element\n * @property {ChipColor} size - Set the color of the chip element\n * @property {string} value - Set the text value to render within the chip\n * @property {IconName} icon - Set the icon to render within the chip\n * @property {string} tooltip - Set a tooltip text to display on hover\n * @property {boolean} active - Set the chip as active (selected)\n * @property {boolean} clickable - Set the chip as clickable to render hover/click effects\n * @property {boolean} removable - Set the chip as removable to render remove icon\n * @property {boolean} disabled - Set the chip to render as disabled\n *\n * @cssprop {theme.colors.text.static_icons__tertiary} --fwc-chip-base-color - Base color of the element\n * @cssprop {theme.colors.ui.background__light} --fwc-chip-fill-color - Background color of element\n * @cssprop {theme.colors.text.static_icons__default} --fwc-chip-ink-color - Text color\n * @cssprop {theme.colors.text.static_icons__default} --fwc-chip-disabled-ink-color - Text color when disabled\n *\n * @fires click - When the element is clicked\n * @fires remove - When the remove icon is clicked\n *\n * @summary Component to render chips\n */\nexport class ChipElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the chip\n         * @default medium\n         */\n        this.size = 'medium';\n        /**\n         * Variant of the chip\n         * @default outlined\n         */\n        this.variant = 'filled';\n        /**\n         * Color of the chip\n         * @default primary\n         */\n        this.color = 'primary';\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('disabled')) {\n            if (this.disabled) {\n                this.clickable = false;\n                this.requestUpdate('clickable');\n                this.requestUpdate('color');\n            }\n        }\n    }\n    /**\n     * Render the graphic element.\n     */\n    renderGraphic() {\n        return this.icon ? html `<fwc-icon class=\"fwc-chip__graphic\" icon=${this.icon}></fwc-icon>` : null;\n    }\n    /**\n     * Render the remove icon.\n     */\n    renderRemoveIcon() {\n        return this.removable\n            ? html `<fwc-icon class=\"fwc-chip__remove\" icon=\"close\" @click=${this.handleRemoveOnClick}> </fwc-icon>`\n            : null;\n    }\n    /**\n     * Render the content.\n     */\n    renderContent() {\n        return this.value || null;\n    }\n    /** {@inheritDoc} */\n    render() {\n        return html `<span class=\"fwc-chip\" @click=${this.handleOnClick}>\n      <slot class=\"fwc-chip__graphic\" name=\"graphic\">${this.renderGraphic()}</slot>\n      <slot>${this.renderContent()}</slot>\n      <slot class=\"fwc-chip__remove\" name=\"remove\" @click=${this.handleRemoveOnClick}>${this.renderRemoveIcon()}</slot>\n    </span>`;\n    }\n    /**\n     * Handle element on click.\n     */\n    handleOnClick(e) {\n        if (this.clickable) {\n            this.dispatchEvent(new PointerEvent('click', e));\n        }\n    }\n    /**\n     * Handle remove icon on click.\n     */\n    handleRemoveOnClick(e) {\n        if (this.removable) {\n            this.dispatchEvent(new PointerEvent('remove', e));\n        }\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], ChipElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ChipElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ChipElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String })\n], ChipElement.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ChipElement.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], ChipElement.prototype, \"tooltip\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ChipElement.prototype, \"active\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ChipElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ChipElement.prototype, \"removable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ChipElement.prototype, \"disabled\", void 0);\nChipElement.styles = [style];\nexport default ChipElement;\n//# sourceMappingURL=element.js.map","import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { formatDistance, formatRelative } from 'date-fns';\nimport { enGB } from 'date-fns/locale';\nimport { dateConverter, resolveLocale } from '../utils';\nimport '../datetime';\nexport class DateRangeElement extends LitElement {\n    constructor() {\n        //#region Attributes\n        super(...arguments);\n        this.suffix = undefined;\n        this.from = new Date();\n        this.seconds = undefined;\n        /** date-fns/locale */\n        this.locale = enGB.code;\n        this.variant = 'datetime';\n        this.weekstart = 1;\n        this.format = undefined;\n        this.capitalize = undefined;\n        this.formatText = (value) => {\n            return this.capitalize ? value.charAt(0).toUpperCase() + value.slice(1) : value;\n        };\n    }\n    //#endregion\n    // #region PROPS\n    get Locale() {\n        return resolveLocale(this.locale);\n    }\n    get Distance() {\n        return formatDistance(this.from, this.to || new Date(), {\n            locale: this.Locale,\n            addSuffix: this.suffix,\n            includeSeconds: this.seconds,\n        });\n    }\n    get Relative() {\n        return formatRelative(this.from, this.to || new Date(), {\n            locale: this.Locale,\n            weekStartsOn: this.weekstart,\n        });\n    }\n    //#endregion\n    /** @overide */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('format')) {\n            if (this.format !== undefined && this.variant !== 'datetime') {\n                this.variant = 'datetime';\n            }\n            this.requestUpdate();\n        }\n    }\n    render() {\n        var _a, _b;\n        switch (this.variant) {\n            case 'relative':\n                return html `<span>\n          <time data-date-start=${this.from.toISOString()}></time>\n          <time data-date-end=${ifDefined((_a = this.to) === null || _a === void 0 ? void 0 : _a.toISOString())}></time>\n          ${this.formatText(this.Relative)}\n        </span>`;\n            case 'distance':\n                return html `<span>\n          <time data-date-start=${this.from.toISOString()}></time>\n          <time data-date-end=${ifDefined((_b = this.to) === null || _b === void 0 ? void 0 : _b.toISOString())}></time>\n          ${this.formatText(this.Distance)}\n        </span>`;\n            case 'datetime':\n                return html `<span>\n          <fwc-datetime .date=${this.from} format=${ifDefined(this.format)}></fwc-datetime>\n          <slot name=\"separator\"><span>-</span></slot>\n          <fwc-datetime .date=${this.to} format=${ifDefined(this.format)}></fwc-datetime>\n        </span>`;\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"suffix\", void 0);\n__decorate([\n    property({ type: String, converter: dateConverter })\n], DateRangeElement.prototype, \"from\", void 0);\n__decorate([\n    property({ type: String, converter: dateConverter })\n], DateRangeElement.prototype, \"to\", void 0);\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"seconds\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n    /** date-fns/locale */\n], DateRangeElement.prototype, \"locale\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DateRangeElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: Number })\n], DateRangeElement.prototype, \"weekstart\", void 0);\n__decorate([\n    property({ type: String })\n], DateRangeElement.prototype, \"format\", void 0);\n__decorate([\n    property({ type: Boolean })\n], DateRangeElement.prototype, \"capitalize\", void 0);\nexport default DateRangeElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: flex;\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))};\n  }\n  :host .divider {\n    border: none;\n    background-color: var(--fwc-divider-color);\n  }\n  :host([color='medium']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))};\n  }\n  :host([color='light']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n  }\n  :host([color='lighter']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__default.getVariable('color'))};\n  }\n  :host([orientation='horizontal']) .divider {\n    width: 100%;\n    height: 1px;\n  }\n  :host([orientation='vertical']) .divider {\n    width: 1px;\n    height: auto;\n    align-self: stretch;\n  }\n  :host([variant='full'][orientation='vertical']) .divider {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  :host([variant='middle'][orientation='horizontal']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([variant='middle'][orientation='vertical']) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([variant='list'][orientation='horizontal']) .divider {\n    margin: 0;\n    padding: 0;\n    flex-shrink: 0;\n    height: 1px;\n    list-style: none;\n  }\n  :host([spacing='small'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([spacing='medium'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([spacing='large'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n  }\n  :host([spacing='small'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([spacing='medium'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([spacing='large'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { DividerColor, DividerSpacing, DividerVariant, DividerOrientation } from './types';\nimport style from './element.css';\n/**\n * Element for rendering a divider\n * {@inheritdoc}\n *\n * @tag fwc-divider\n *\n * @property {DividerColor} color - Sets the color of the divider.\n * @property {DividerSpacing} spacing - Sets the spacing type for the divider.\n * @property {DividerVariant} variant - Sets the divider variant.\n * @property {DividerOrientation} orientation - Sets orientation type for the divider.\n *\n * @cssprop {theme.colors.ui.background__medium} --fwc-divider-color - color of the divider.\n */\nexport class DividerElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Color of the divider.\n         */\n        this.color = DividerColor.Medium;\n        /**\n         * Spacing of the divider.\n         */\n        this.spacing = DividerSpacing.Medium;\n        /**\n         * Variant of the divider.\n         */\n        this.variant = DividerVariant.Full;\n        /**\n         * Orientation of the divider.\n         */\n        this.orientation = DividerOrientation.Horizontal;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            if (this.variant === 'list' && this.orientation === 'vertical') {\n                this.variant = DividerVariant.Full;\n            }\n            this.requestUpdate();\n        }\n    }\n    /** {@inheritDoc} */\n    render() {\n        if (this.variant === 'list' && this.orientation === 'horizontal') {\n            return html `<li class=\"divider\" role=\"separator\"></li>`;\n        }\n        return html `<hr class=\"divider\" />`;\n    }\n}\nDividerElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"spacing\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"orientation\", void 0);\nexport default DividerElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport MDCFormFieldFoundation from '@material/form-field/foundation.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query, queryAssignedNodes } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport class FormfieldBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.alignEnd = false;\n        this.spaceBetween = false;\n        this.nowrap = false;\n        this.label = '';\n        this.mdcFoundationClass = MDCFormFieldFoundation;\n    }\n    createAdapter() {\n        return {\n            registerInteractionHandler: (type, handler) => {\n                this.labelEl.addEventListener(type, handler);\n            },\n            deregisterInteractionHandler: (type, handler) => {\n                this.labelEl.removeEventListener(type, handler);\n            },\n            activateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.startPress();\n                    }\n                }\n            },\n            deactivateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.endPress();\n                    }\n                }\n            },\n        };\n    }\n    get input() {\n        var _a, _b;\n        return (_b = (_a = this.slottedInputs) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    render() {\n        const classes = {\n            'mdc-form-field--align-end': this.alignEnd,\n            'mdc-form-field--space-between': this.spaceBetween,\n            'mdc-form-field--nowrap': this.nowrap\n        };\n        return html `\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n    }\n    click() {\n        this._labelClick();\n    }\n    _labelClick() {\n        const input = this.input;\n        if (input) {\n            input.focus();\n            input.click();\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"alignEnd\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"spaceBetween\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"nowrap\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(async function (label) {\n        var _a;\n        (_a = this.input) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-label', label);\n    })\n], FormfieldBase.prototype, \"label\", void 0);\n__decorate([\n    query('.mdc-form-field')\n], FormfieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '*')\n], FormfieldBase.prototype, \"slottedInputs\", void 0);\n__decorate([\n    query('label')\n], FormfieldBase.prototype, \"labelEl\", void 0);\n//# sourceMappingURL=mwc-formfield-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  .mdc-label {\n    ${unsafeCSS(theme.typography.input.label)};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { FormfieldBase } from '@material/mwc-formfield/mwc-formfield-base';\nimport { styles as mdcStyle } from '@material/mwc-formfield/mwc-formfield.css';\nimport style from './element.css';\nexport class FormfieldElement extends FormfieldBase {\n}\nFormfieldElement.styles = [mdcStyle, style];\nexport default FormfieldElement;\n//# sourceMappingURL=element.js.map","import { svg } from 'lit';\nimport * as edsIcons from '@equinor/eds-icons';\nexport const iconNames = Object.keys(edsIcons);\nexport var IconType;\n(function (IconType) {\n    IconType[\"EDS\"] = \"eds\";\n})(IconType || (IconType = {}));\nexport const createSvg = ({ height, width, svgPathData }) => svg `\n  <svg viewBox=\"0 0 ${width} ${height}\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"${svgPathData}\"></path>\n  </svg>\n`;\nexport const createIcon = (name, type = IconType.EDS) => {\n    switch (type) {\n        case IconType.EDS: {\n            const icon = edsIcons[name];\n            if (!icon) {\n                console.warn('could not find icon', name);\n                return null;\n            }\n            return createSvg(edsIcons[name]);\n        }\n    }\n};\nexport default createIcon;\n//# sourceMappingURL=create-icon.js.map","import { __decorate } from \"tslib\";\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport createIcon from './utils/create-icon';\nimport { style } from './element.css';\nexport class IconElement extends LitElement {\n    render() {\n        return this.icon ? createIcon(this.icon) : null;\n    }\n}\nIconElement.styles = [style];\n__decorate([\n    property()\n], IconElement.prototype, \"icon\", void 0);\n__decorate([\n    property()\n], IconElement.prototype, \"type\", void 0);\n//# sourceMappingURL=element.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport Checkbox from '@equinor/fusion-wc-checkbox';\nimport { ListItemElement } from '../list-item';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\n// persist elements\nCheckbox;\n/**\n * Element for check list item\n * {@inheritdoc}\n *\n * @tag fwc-check-list-item\n *\n * @property {boolean} left - Displays the checkbox on the left. Overrides graphic.\n *\n * @summary Enhanced check list item element based on [FWC Checkbox](https://github.com/equinor/fusion-web-components/tree/main/packages/checkbox)\n */\nexport class CheckListItemElement extends ListItemElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Displays the checkbox on the left. Overrides graphic.\n         */\n        this.left = false;\n        /**\n         * Determines which graphic layout to show and enables the graphic slot.\n         */\n        this.graphic = 'control';\n    }\n    render() {\n        const checkboxClasses = {\n            'fwc-list-item__checkbox-right': !this.left,\n            'fwc-list-item__checkbox-left': this.left,\n        };\n        const text = this.renderText();\n        const graphic = this.graphic ? this.renderGraphic() : html ``;\n        const ripple = this.renderRipple();\n        return html ` ${ripple} ${graphic} ${this.left ? '' : text}\n      <fwc-checkbox\n        class=${classMap(checkboxClasses)}\n        reducedTouchTarget\n        tabindex=${this.tabindex}\n        .checked=${this.selected}\n        ?disabled=${this.disabled}\n        @change=${this.onChange}\n      >\n      </fwc-checkbox>\n      ${this.left ? text : ''} <slot class=\"meta\" name=\"meta\"></slot>`;\n    }\n    onChange(evt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const checkbox = evt.target;\n            const changeFromProp = this.selected === checkbox.checked;\n            if (!changeFromProp) {\n                this._skipPropRequest = true;\n                this.selected = checkbox.checked;\n                yield this.updateComplete;\n                this._skipPropRequest = false;\n            }\n        });\n    }\n}\nCheckListItemElement.styles = [mdcStyle, style];\n__decorate([\n    property({ type: Boolean })\n], CheckListItemElement.prototype, \"left\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CheckListItemElement.prototype, \"graphic\", void 0);\nexport default CheckListItemElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-list-vertical-padding: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    --fwc-list-side-padding: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    --fwc-list-inset-margin: calc(4 * ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))});\n    --mdc-list-vertical-padding: var(--fwc-list-vertical-padding);\n    --mdc-list-side-padding: var(--fwc-list-side-padding);\n    --mdc-list-inset-margin: var(--fwc-list-inset-margin);\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { ListBase } from '@material/mwc-list/mwc-list-base';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list.css';\nimport style from './element.css';\n/**\n * Element for list\n * {@inheritdoc}\n *\n * @tag fwc-list\n *\n * @property {boolean} activatable - Sets activated attribute on selected items which provides a focus-persistent highlight.\n * @property {boolean} rootTabbable - When `true`, sets `tabindex=\"0\"` on the internal list. Otherwise sets `tabindex=\"-1\"`.\n * @property {boolean} multi - When `true`, enables selection of multiple items. This will result in `index` being of type `Set<number>` and selected returning `ListItemBase[]`.\n * @property {boolean} wrapFocus - When `true`, pressing `up` on the keyboard when focused on the first item will focus the last item and `down` when focused on the last item will focus the first item.\n * @property {string} itemRoles - Determines what `role` attribute to set on all list items.\n * @property {string} innerAriaLabel - ARIA label of the internal `<ul>` element.\n * @property {string} innerRole - Role of the internal `<ul>` element.\n * @property {boolean} noninteractive - When `true`, disables focus and pointer events (thus ripples) on the list. Used for display-only lists.\n *\n * @property {ListItemBase[]} items - (readonly*) All list items that are available for selection. Eligible items have the `[mwc-list-item]` attribute which `ListItemBase` applies automatically.\n * @property {SelectedType} selected - (readonly*) Currently-selected list item(s). When `multi` is `true`, `selected` is of type `ListItemBase[]` and when `false`, `selected` is of type `ListItemBase`. `selected` is `null` when no item is selected.\n * @property {MWCListIndex} index - (readonly*) Index / indices of selected item(s). When `multi` is `true`, `index` is of type `number` and when `false`, `index` is of type `Set<number>`. Unset indicies are `-1` and empty `Set<number>` for single and multi selection respectively.\n *\n * @function items - Selects the elements at the given index / indices.\n * @function toggle - Toggles the selected index, and forcibly selects or deselects the value of force if attribute is provided.\n * @function getFocusedItemIndex - Returns the index of the currently-focused item. -1 if none are focused.\n * @function focusItemAtIndex - Focuses the item at the given index and manages tabindex on all other items.\n * @function layout - Resets tabindex on all items and will update items model if provided true. It may be required to call layout if selectability of an element is dynamically changed. e.g. [mwc-list-item] attribute is removed from a list item or noninteractive is dynamically set on a list item.\n *\n * @cssprop {theme.spacing.comfortable.small} --fwc-list-vertical-padding - Padding before and after the first and last list items.\n * @cssprop {theme.spacing.comfortable.medium} --fwc-list-side-padding - Adjusts the padding of the [padded] list dividers (also propagates to fwc-list-item).\n * @cssprop {4.5 * theme.spacing.comfortable.medium} --fwc-list-inset-margin - Adjusts the left inset padding of an [inset] list divider. Typically used for dividing list items with icons.\n *\n * @fires selected - Selects the elements at the given index / indices.\n * @fires action - When a selection has been made via click or keyboard aciton.\n * @fires items-updated - When any of the child items are updated\n *\n * @summary Enhanced list element, based on [Material Web Component](https://github.com/material-components/material-web/tree/master/packages/list)\n */\nexport class ListElement extends ListBase {\n}\nListElement.styles = [mdcStyle, style];\nexport default ListElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-list-side-padding: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    --mdc-list-side-padding: var(--fwc-list-side-padding);\n    --fwc-list-item-ink-color: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('color'))};\n    --fwc-list-item-secondary-ink-color: ${unsafeCSS(theme.typography.paragraph.caption.getVariable('color'))};\n    --fwc-list-item-meta-color: ${unsafeCSS(theme.typography.paragraph.meta.getVariable('color'))};\n    --fwc-list-item-font-size: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('fontSize'))};\n    --fwc-list-item-font-weight: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('fontWeight'))};\n    --fwc-list-item-secondary-font-size: ${unsafeCSS(theme.typography.paragraph.caption.getVariable('fontSize'))};\n  }\n  .fwc-list-item__text {\n    flex: 1;\n    color: var(--fwc-list-item-ink-color);\n    font-size: var(--fwc-list-item-font-size);\n    font-weight: var(--fwc-list-item-font-weight);\n    overflow: hidden;\n  }\n  .fwc-list-item__primary-text {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    line-height: normal;\n    display: block;\n  }\n  .fwc-list-item__secondary-text {\n    color: var(--fwc-list-item-secondary-ink-color);\n    font-size: var(--fwc-list-item-secondary-font-size);\n  }\n  .fwc-list-item__meta {\n    margin-left: auto;\n    color: var(--fwc-list-item-meta-color);\n    font-size: 0.875rem;\n  }\n  .fwc-list-item__graphic {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  :host([graphic='icon']) .fwc-list-item__graphic {\n    font-size: 1rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='avatar']) .fwc-list-item__graphic {\n    width: 2rem;\n    height: 2rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='medium']) .fwc-list-item__graphic {\n    width: 2rem;\n    height: 2rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='large']) .fwc-list-item__graphic {\n    max-width: 5rem;\n    height: 100%;\n    margin-right: 0.625rem;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { html } from 'lit';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\n/**\n * Element for list item\n * {@inheritdoc}\n *\n * @tag fwc-list-item\n *\n * @property {string} value - Value associated with this list item (used by fwc-select).\n * @property {string|null} group - Used to group items together (used by mwc-menu for menu selection groups and mwc-radio-list-element).\n * @property {number} tabindex - Reflects tabindex and sets internal tab indices.\n * @property {boolean} disabled - Reflects disabled and sets internal disabled attributes.\n * @property {boolean} twoline - Activates the two-line variant and enables the secondary slot.\n * @property {boolean} activated - Activates focus-persistent ripple.\n * @property {GraphicType} graphic - Determines which graphic layout to show and enables the graphic slot.\n * @property {boolean} hasMeta - Activates the meta layout tile and enables the meta slot.\n * @property {boolean} noninteractive - Disables focus and pointer events for the list item.\n * @property {boolean} selected - Denotes that the list item is selected.\n *\n * @property {string} text - (readonly*) Trimmed textContent of the list item.\n *\n * @cssprop {theme.spacing.comfortable.medium} --fwc-list-side-padding - Adjusts the padding of the [padded] list dividers (also propagates to fwc-list-item).\n * @cssprop {theme.typography.paragraph.body_short.color} --fwc-list-item-ink-color - Sets the primary text color.\n * @cssprop {theme.typography.paragraph.caption.color} --fwc-list-item-secondary-ink-color - Sets the secondary text color.\n * @cssprop {theme.typography.paragraph.meta.color} --fwc-list-item-meta-color - Sets the meta color.\n * @cssprop {theme.typography.paragraph.body_short.fontSize} --fwc-list-item-font-size - Sets primary text font size.\n * @cssprop {theme.typography.paragraph.body_short.fontWeight} --fwc-list-item-font-weight - Sets primary text font weight.\n * @cssprop {theme.typography.paragraph.caption.fontSize} --fwc-list-item-secondary-font-weight - Sets secondary text font size.\n *\n * @fires request-selected - Fired upon click and when selected property is changed. Requests selection from the mwc-list.\n * @fires list-item-rendered - When a list item has been rendered\n *\n * @summary Enhanced list item element, based on [Material Web Component](https://github.com/material-components/material-web/tree/master/packages/list)\n */\nexport class ListItemElement extends ListItemBase {\n    /**\n     * Render text slot\n     */\n    renderText() {\n        const inner = this.twoline ? this.renderTwoLines() : this.renderSingleLine();\n        return html ` <span class=\"fwc-list-item__text\"> ${inner}</span>`;\n    }\n    /**\n     * Render text as two lines (default and secondary slots)\n     */\n    renderTwoLines() {\n        return html `\n      <span class=\"fwc-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"fwc-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n    }\n    /**\n     * Render graphic slot\n     */\n    renderGraphic() {\n        if (this.graphic) {\n            return html `<span class=\"fwc-list-item__graphic\"><slot name=\"graphic\"></slot></span>`;\n        }\n        return html ``;\n    }\n    /** {@inheritDoc} */\n    render() {\n        const text = this.renderText();\n        return html `${this.renderRipple()}${this.renderGraphic()}${text}\n      <slot class=\"fwc-list-item__meta\" name=\"meta\"></slot>`;\n    }\n}\nListItemElement.styles = [mdcStyle, style];\nexport default ListItemElement;\n//# sourceMappingURL=element.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport Radio from '@equinor/fusion-wc-radio';\nimport Icon from '@equinor/fusion-wc-icon';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\nimport { ListItemElement } from '../list-item';\n// persist elements\nRadio;\nIcon;\n/**\n * Element for radio list item\n * {@inheritdoc}\n *\n * @tag fwc-radio-list-item\n *\n * @property {boolean} left - Displays the checkbox on the left. Overrides graphic.\n *\n * @summary Enhanced radio list item element based on [FWC Radio](https://github.com/equinor/fusion-web-components/tree/main/packages/radio)\n */\nexport class RadioListItemElement extends ListItemElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Displays the checkbox on the left. Overrides graphic.\n         */\n        this.left = false;\n        /**\n         * Determines which graphic layout to show and enables the graphic slot.\n         */\n        this.graphic = 'control';\n        this._changeFromClick = false;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('icon')) {\n            if (this.icon) {\n                this.graphic = 'icon';\n            }\n        }\n    }\n    /**\n     * Render icon by slot or name\n     */\n    renderIcon() {\n        return html `<slot name=\"icon\"><fwc-icon icon=${ifDefined(this.icon)}></fwc-icon></slot>`;\n    }\n    /**\n     * Render avatar slot\n     */\n    renderAvatar() {\n        if (this.graphic === 'avatar') {\n            return html `<slot name=\"avatar\"></slot>`;\n        }\n        return html ``;\n    }\n    /** {@inheritDoc} */\n    renderGraphic() {\n        switch (this.graphic) {\n            case 'avatar':\n                return this.renderAvatar();\n            case 'icon':\n                return this.renderIcon();\n            default:\n                return super.renderGraphic();\n        }\n    }\n    /** {@inheritDoc} */\n    render() {\n        const radioClasses = {\n            'fwc-list-item__radio-right': !this.left,\n            'fwc-list-item__radio-left': this.left,\n        };\n        const text = this.renderText();\n        const graphic = this.graphic && this.graphic !== 'control' && !this.left ? this.renderGraphic() : html ``;\n        const meta = this.hasMeta && this.left ? this.renderMeta() : html ``;\n        const ripple = this.renderRipple();\n        return html ` ${ripple} ${graphic} ${this.left ? '' : text}\n      <fwc-radio\n        global\n        class=${classMap(radioClasses)}\n        tabindex=${this.tabindex}\n        name=${ifDefined(this.group === null ? undefined : this.group)}\n        .checked=${this.selected}\n        ?disabled=${this.disabled}\n        @checked=${this.onChange}\n      >\n      </fwc-radio>\n      ${this.left ? text : ''} ${meta}`;\n    }\n    onClick() {\n        this._changeFromClick = true;\n        super.onClick();\n    }\n    /**\n     * Handle on change and fire required events\n     */\n    onChange(evt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const checkbox = evt.target;\n            const changeFromProp = this.selected === checkbox.checked;\n            if (!changeFromProp) {\n                this._skipPropRequest = true;\n                this.selected = checkbox.checked;\n                yield this.updateComplete;\n                this._skipPropRequest = false;\n                if (!this._changeFromClick) {\n                    this.fireRequestSelected(this.selected, 'interaction');\n                }\n            }\n            this._changeFromClick = false;\n        });\n    }\n}\nRadioListItemElement.styles = [mdcStyle, style];\n__decorate([\n    property({ type: Boolean })\n], RadioListItemElement.prototype, \"left\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], RadioListItemElement.prototype, \"graphic\", void 0);\n__decorate([\n    property({ type: String })\n], RadioListItemElement.prototype, \"icon\", void 0);\nexport default RadioListItemElement;\n//# sourceMappingURL=element.js.map","import { MenuBase } from '@material/mwc-menu/mwc-menu-base';\nimport { html } from 'lit-html';\n/**\n * Element for menu\n * {@inheritdoc}\n *\n * @remarks This element is based on [Material Web Component](https://github.com/material-components/material-web/tree/master/packages/menu)\n *\n * @tag fwc-menu\n *\n * @property {boolean} open - Whether the menu should open and display.\n * @property {HTMLElement|null} anchor - Determines from which element the floating menu should calculate sizing and position offsets. In the default case, both `fwc-menu` and the anchor should share a parent with `position:relative`. Changing anchor typically requires `absolute` or `fixed`.\n * @property {Corner`*`} corner - Corner of the anchor from which the menu should position itself.\n * @property {MenuCorner`**`} menuCorner - Horizontal corner of the menu from which the menu should position itself. `NOTE`: Only horizontal corners are supported.\n * @property {boolean} quick - Whether to skip the opening animation.\n * @property {boolean} absolute - Makes the menu's position `absolute` which will be relative to whichever ancestor has `position:relative`. Setting `x` and `y` will modify the menu's `left` and `top`. Setting `anchor` will attempt to position the menu to the `anchor`.\n * @property {boolean} fixed - Makes the menu's position `fixed` which will be relative to the window. Setting `x` and `y` will modify the menu's left and top. Setting `anchor` will attempt to position the menu to the `anchor`'s immediate position before opening.\n * @property {number|null} x - Sets horizontal position when `absolute`. When given an `anchor`, sets horizontal position relative to `anchor` at given `corner`. Requires `y` not to be null.\n * @property {number|null} y - Sets vertical position when `absolute`. When given an `anchor`, sets vertical position relative to `anchor` at given `corner`. Requires `x` not to be null.\n * @property {boolean} forceGroupSelection - Forces a menu group to have a selected item by preventing deselection of menu items in menu groups via user interaction.\n * @property {DefaultFocusState`***`} defaultFocus - Item to focus upon menu open.\n * @property {boolean} fullwidth - Sets surface width to 100%.\n * @property {boolean} stayOpenOnBodyClick - Prevents the menu from closing when clicking outside the menu.\n *\n * @property {boolean} wrapFocus - Proxies to [fwc-list](https://github.com/equinor/fusion-web-components/tree/main/packages/list#propertiesattributes)'s wrapFocus property.\n * @property {string|null} innerAriaLabel - Proxies to [fwc-list](https://github.com/equinor/fusion-web-components/tree/main/packages/list#propertiesattributes)'s innerAriaLabel property.\n * @property {\"menu\"|\"listbox\"} innerRole - Proxies to [fwc-list](https://github.com/equinor/fusion-web-components/tree/main/packages/list#propertiesattributes)'s innerRole property.\n * @property {boolean} multi - Proxies to [fwc-list](https://github.com/equinor/fusion-web-components/tree/main/packages/list#propertiesattributes)'s multi property.\n * @property {boolean} activatable - Proxies to [fwc-list](https://github.com/equinor/fusion-web-components/tree/main/packages/list#propertiesattributes)'s activatable property.\n *\n * @property {ListItemBase[]} items - (readonly) All list items that are available for selection. Eligible items have the `[mwc-list-item]` attribute which `ListItemBase` applies automatically.\n * @property {MWCListIndex`****`} index - (readonly) Index / indices of selected item(s). When `multi` is `true`, `index` is of type `number` and when `false`, `index` is of type `Set<number>`. Unset indicies are `-1` and empty `Set<number>` for single and multi selection respectively.\n * @property {SelectedType`*****`} selected - (readonly) Currently-selected list item(s). When `multi` is `true`, `selected` is of type `ListItemBase[]` and when `false`, `selected` is of type `ListItemBase`. `selected` is `null` when no item is selected.\n *\n * `*` Corner is equivalent to type \"TOP_LEFT\"|\"TOP_RIGHT\"|\"BOTTOM_LEFT\"|\"BOTTOM_RIGHT\"|\"TOP_START\"|\"TOP_END\" |\"BOTTOM_START\"|\"BOTTOM_END\"\n *\n * `**` MenuCorner  is equivalent to type \"START\"|\"END\"\n *\n * `***` DefaultFocusState is equivalent to type \"NONE\"|\"LIST_ROOT\"|\"FIRST_ITEM\"|\"LAST_ITEM\"\n *\n * `****` MWCListIndex is equivalent to type number|Set<number>\n *\n * `*****` SelectedType is equivalent to type ListItemBase|ListItemBase[]|null. ListItemBase is the base class of fwc-list-item of which both fwc-check-list-item and fwc-radio-list-item also inherit from.\n *\n * @function show() => void - Sets `open` to true.\n * @function close() => void - Sets `open` to false.\n * @function select(index: MWCMenuIndex) => void - Selects the elements at the given index / indices.\n * @function getFocusedItemIndex() => number - Returns the index of the currently-focused item. `-1` if none are focused.\n * @function focusItemAtIndex(index) => void - Focuses the item at the given index and manages tabindex on all other items.\n * @function layout(updateItems = true) => void - Resets tabindex on all items and will update `items` model if provided true. It may be required to call layout if selectability of an element is dynamically changed. e.g. `[mwc-list-item]` attribute is removed from a list item or `noninteractive` is dynamically set on a list item.\n *\n * @fires opened - Targets mwc-menu-surface. Fired when opened.\n * @fires closing - Targets mwc-menu-surface. Fired when closing but animation may not have completed yet. Use for time-sensitive logic that must be run immediately upon close.\n * @fires closed - Targets mwc-menu-surface. Fired when closed.\n * @fires action - Targetsfwc-list. Fired when a selection has been made via click or keyboard aciton.\n * @fires selected - Targets fwc-list. Fired when a selection has been made. `index` is the selected index (will be of type `Set<number>` if multi and `number` if single), and diff (of type IndexDiff**) represents the diff of added and removed indices from previous selection.\n *\n */\nexport class MenuElement extends MenuBase {\n    get listElement() {\n        if (!this.listElement_) {\n            this.listElement_ = this.renderRoot.querySelector('fwc-list');\n            return this.listElement_;\n        }\n        return this.listElement_;\n    }\n    render() {\n        return html `<mwc-menu-surface\n      ?hidden=${!this.open}\n      .anchor=${this.anchor}\n      .open=${this.open}\n      .quick=${this.quick}\n      .corner=${this.corner}\n      .x=${this.x}\n      .y=${this.y}\n      .absolute=${this.absolute}\n      .fixed=${this.fixed}\n      .fullwidth=${this.fullwidth}\n      .menuCorner=${this.menuCorner}\n      ?stayOpenOnBodyClick=${this.stayOpenOnBodyClick}\n      class=\"mdc-menu mdc-menu-surface\"\n      @closed=${this.onClosed}\n      @opened=${this.onOpened}\n      @keydown=${this.onKeydown}\n    >\n      ${this.renderList()}\n    </mwc-menu-surface>`;\n    }\n    renderList() {\n        const itemRoles = this.innerRole === 'menu' ? 'menuitem' : 'option';\n        return html `<fwc-list\n      rootTabbable\n      .innerAriaLabel=${this.innerAriaLabel}\n      .innerRole=${this.innerRole}\n      .multi=${this.multi}\n      class=\"mdc-deprecated-list\"\n      .itemRoles=${itemRoles}\n      .wrapFocus=${this.wrapFocus}\n      .activatable=${this.activatable}\n      @action=${this.onAction}\n    >\n      <slot></slot>\n    </fwc-list>`;\n    }\n}\nexport default MenuElement;\n//# sourceMappingURL=element.js.map","import { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { PersonElement } from '../person';\nimport { PersonAccountType, PersonAvailability } from '../types';\nimport Badge, { BadgeColor } from '@equinor/fusion-wc-badge';\nimport Avatar, { AvatarSize } from '@equinor/fusion-wc-avatar';\nimport Skeleton, { SkeletonVariant } from '@equinor/fusion-wc-skeleton';\nimport style from './element.css';\n// persist elements\nBadge;\nAvatar;\nSkeleton;\n//TODO: Handle errors better in task error render function\n/**\n * Element for displaying a persons avatar with presence badge.\n * {@inheritdoc}\n *\n * @tag fwc-person-avatar\n *\n * @property {string} azureId - Azure unique id for the person.\n * @property {AvatarSize} size - Size of the avatar.\n * @property {boolean} clickable - Sets the avatar to be clickable to render hover/ripple effects.\n * @property {disabled} disabled - Sets the avatar to be rendered as disabled.\n *\n * @fires click - When the element is clicked, only fires when `clickable` is set to `true` and `disabled` is set to `false`.\n *\n * @summary\n */\nexport class PersonAvatarElement extends PersonElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the avatar.\n         */\n        this.size = AvatarSize.Medium;\n    }\n    /**\n     * Returns the badge color for the current presence\n     */\n    getRenderClasses(accountType) {\n        return {\n            'fwc-person-avatar__employee': accountType === PersonAccountType.Employee,\n            'fwc-person-avatar__external-hire': accountType === PersonAccountType.ExternalHire,\n            'fwc-person-avatar__x-external': accountType === PersonAccountType.XExternal,\n            'fwc-person-avatar__joint-venture-affiliate': accountType === PersonAccountType.JointVentureAffiliate,\n        };\n    }\n    /**\n     * Returns the badge color for the current presence\n     */\n    getBadgeColor(availability) {\n        if (this.disabled) {\n            return BadgeColor.Disabled;\n        }\n        switch (availability) {\n            case PersonAvailability.Available:\n            case PersonAvailability.AvailableIdle:\n                return BadgeColor.Success;\n            case PersonAvailability.Away:\n            case PersonAvailability.BeRightBack:\n                return BadgeColor.Warning;\n            case PersonAvailability.Busy:\n            case PersonAvailability.BusyIdle:\n            case PersonAvailability.DoNotDisturb:\n                return BadgeColor.Danger;\n            default:\n                return BadgeColor.Disabled;\n        }\n    }\n    /**\n     * Returns the badge icon for the current presence\n     */\n    getBadgeIcon(availability) {\n        switch (availability) {\n            case PersonAvailability.Available:\n                return 'check_circle_outlined';\n            case PersonAvailability.AvailableIdle:\n            case PersonAvailability.Away:\n            case PersonAvailability.BeRightBack:\n            case PersonAvailability.BusyIdle:\n                return 'time';\n            case PersonAvailability.DoNotDisturb:\n            case PersonAvailability.Busy:\n                return 'blocked';\n            case PersonAvailability.Offline:\n                return 'close_circle_outlined';\n            case PersonAvailability.Pending:\n                return 'more_horizontal';\n            default:\n                return 'do_not_disturb';\n        }\n    }\n    /**\n     * Returns the first character in the person's name as upper case initial\n     */\n    getInitial(name) {\n        var _a;\n        return (_a = name === null || name === void 0 ? void 0 : name.substr(0, 1)) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n    }\n    /**\n     * Renders the presence badge\n     */\n    renderBadge(availability) {\n        return html `<fwc-badge\n      slot=\"badge\"\n      .color=${this.getBadgeColor(availability)}\n      .icon=${this.getBadgeIcon(availability)}\n      .size=${this.size}\n      position=\"bottom-right\"\n      ?disabled=${this.disabled}\n      circular\n    />`;\n    }\n    /**\n     * Renders the avatar\n     */\n    renderAvatar(details) {\n        var _a;\n        return html `<fwc-avatar\n      class=${classMap(this.getRenderClasses(details.accountType))}\n      .size=${this.size}\n      .src=${details.pictureSrc}\n      .value=${this.getInitial(details.name)}\n      ?clickable=${this.clickable}\n      ?disabled=${this.disabled}\n      ?border=${true}\n      @click=${this.handleOnClick}\n    >\n      ${(_a = this.presence) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (presence) => this.renderBadge(presence.availability),\n            pending: () => this.renderBadge(PersonAvailability.Pending),\n            error: () => this.renderBadge(PersonAvailability.Offline),\n        })}</fwc-avatar\n    >`;\n    }\n    /**\n     * Renders the avatar pending state\n     */\n    renderPlaceholder(inactive) {\n        return html `<fwc-skeleton\n      size=${this.size}\n      variant=${SkeletonVariant.Circle}\n      icon=\"image\"\n      ?inactive=${inactive}\n    ></fwc-skeleton>`;\n    }\n    /**\n     * Renders the avatar pending state\n     */\n    renderError(error) {\n        return html `${error}`;\n    }\n    /** {@inheritDoc} */\n    render() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (details) => this.renderAvatar(details),\n            pending: () => this.renderPlaceholder(),\n            error: () => this.renderPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Handle on click.\n     */\n    handleOnClick(e) {\n        if (this.clickable) {\n            this.dispatchEvent(new PointerEvent('click', e));\n        }\n    }\n}\nPersonAvatarElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], PersonAvatarElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], PersonAvatarElement.prototype, \"clickable\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PersonAvatarElement.prototype, \"disabled\", void 0);\nexport default PersonAvatarElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    font-family: ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontFamily'))};\n    font-size: calc(\n      ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontSize'))} * var(--content-resize, 1)\n    );\n  }\n  :host([size='x-small']) {\n    --content-resize: 0.8;\n  }\n  :host([size='small']) {\n    --content-resize: 0.9;\n  }\n  :host([size='medium']) {\n    --content-resize: 1;\n  }\n  :host([size='large']) {\n    --content-resize: 1.2;\n  }\n  header {\n    font-size: calc(${unsafeCSS(theme.typography.heading.h3.getVariable('fontSize'))} * var(--content-resize, 1));\n    font-weight: 500;\n  }\n  a {\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  a:hover {\n    color: ${unsafeCSS(theme.colors.interactive.primary__hover.getVariable('color'))};\n  }\n  .fwc-status-icon__icon {\n    border-radius: 50%;\n    color: #fff;\n    font-size: calc(0.7rem * var(--content-resize, 1));\n    background-color: ${unsafeCSS(theme.colors.interactive.disabled__border.getVariable('color'))};\n  }\n  .fwc-status-icon__success {\n    background-color: ${unsafeCSS(theme.colors.interactive.success__resting.getVariable('color'))};\n  }\n  .fwc-status-icon__warning {\n    background-color: ${unsafeCSS(theme.colors.interactive.warning__resting.getVariable('color'))};\n  }\n  .fwc-status-icon__danger {\n    background-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  .fwc-person-badge__employee {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.infographic.substitute__purple_berry.getVariable('color'))};\n  }\n  .fwc-person-badge__consultant {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.infographic.primary__energy_red_100.getVariable('color'))};\n  }\n  .fwc-person-badge__external {\n    --fwc-badge-color: ${unsafeCSS(theme.colors.infographic.substitute__pink_salmon.getVariable('color'))};\n  }\n  .fwc-person-section {\n    display: flex;\n    column-gap: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  .fwc-person-status {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    row-gap: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  .fwc-person-status__heading,\n  .fwc-person-status__profession,\n  .fwc-person-status__info {\n    display: flex;\n    flex-direction: column;\n    row-gap: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  .fwc-person-status__row {\n    display: flex;\n    align-items: center;\n    column-gap: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  .fwc-person-status__badge {\n  }\n  .fwc-person-status__icon {\n    position: relative;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { AvatarSize } from '@equinor/fusion-wc-avatar';\nimport { BadgePosition } from '@equinor/fusion-wc-badge';\nimport { SkeletonSize, SkeletonVariant } from '@equinor/fusion-wc-skeleton';\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { PersonElement } from '../person';\nimport { PersonAccountType, PersonAvailability } from '../types';\nimport style from './element.css';\n/**\n * Element for displaying a persons card with person avatar and person info.\n * {@inheritdoc}\n *\n * @tag fwc-person-card\n *\n * @property {string} azureId - Azure unique id for the person.\n * @property {AvatarSize} size - Size of the avatar, also used for font size\n *\n */\nexport class PersonCardElement extends PersonElement {\n    constructor() {\n        super(...arguments);\n        this.size = AvatarSize.Medium;\n    }\n    /**\n     * Renders person name\n     */\n    renderTitle() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.name ? html `<header>${_details.name}</header>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Render person job title\n     */\n    renderJobTitle() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.jobTitle ? html `<div>${_details.jobTitle}</div>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Render person job department\n     */\n    renderDepartment() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.department ? html `<div>${_details.department}</div>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Render person email\n     */\n    renderEmail() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.mail ? html `<div><a href=\"mailto:${_details.mail}\">${_details.mail}</a></div>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Render person mobile phone\n     */\n    renderMobile() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.mobilePhone ? html `<div>${_details.mobilePhone}</div>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Render person office location\n     */\n    renderLocation() {\n        var _a;\n        return html `${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (_details) => html `${_details.officeLocation ? html `<div>${_details.officeLocation}</div>` : null}`,\n            pending: () => this.renderTextPlaceholder(false, SkeletonSize.small),\n            error: () => this.renderTextPlaceholder(true),\n        })}`;\n    }\n    /**\n     * Returns the status color for the current availability of the person\n     */\n    getStatusColor(availability) {\n        return {\n            'fwc-status-icon__success': availability === (PersonAvailability.Available || PersonAvailability.AvailableIdle),\n            'fwc-status-icon__warning': availability === (PersonAvailability.Away || PersonAvailability.BeRightBack),\n            'fwc-status-icon__danger': availability === (PersonAvailability.Busy || PersonAvailability.BusyIdle || PersonAvailability.DoNotDisturb),\n        };\n    }\n    /**\n     * Returns the status icon for the current availability of the person\n     */\n    getStatusIcon(availability) {\n        switch (availability) {\n            case PersonAvailability.Available:\n                return 'check_circle_outlined';\n            case PersonAvailability.AvailableIdle:\n            case PersonAvailability.Away:\n            case PersonAvailability.BeRightBack:\n            case PersonAvailability.BusyIdle:\n                return 'time';\n            case PersonAvailability.DoNotDisturb:\n            case PersonAvailability.Busy:\n                return 'blocked';\n            case PersonAvailability.Offline:\n                return 'close_circle_outlined';\n            case PersonAvailability.Pending:\n                return 'more_horizontal';\n            default:\n                return 'do_not_disturb';\n        }\n    }\n    /**\n     * Returns the icon size deppending on the avatar\n     */\n    getStatusIconSize(size) {\n        switch (size) {\n            case AvatarSize.XSmall:\n            case AvatarSize.Small:\n            case AvatarSize.Medium:\n                return AvatarSize.Small;\n            case AvatarSize.Large:\n                return AvatarSize.Medium;\n            default:\n                return AvatarSize.Small;\n        }\n    }\n    /**\n     * Renders the status icon for availability\n     */\n    renderStatusIcon(availability) {\n        return html `<fwc-icon\n      class=\"fwc-status-icon__icon ${classMap(this.getStatusColor(availability))}\"\n      .icon=${this.getStatusIcon(availability)}\n    />`;\n    }\n    /**\n     * Render AVAILABILITY status badge\n     */\n    renderAvailabilityStatus() {\n        var _a;\n        return html `<div class=\"fwc-person-status__row\">\n      ${(_a = this.presence) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (presence) => html `${this.renderStatusIcon(presence.availability)} ${presence.availability}`,\n            pending: () => html `${this.renderStatusIcon(PersonAvailability.Pending)}\n          ${this.renderTextPlaceholder(false, SkeletonSize.XSmall)}`,\n            error: () => html `${this.renderStatusIcon(PersonAvailability.Offline)} ${this.renderTextPlaceholder(true)}`,\n        })}\n    </div>`;\n    }\n    /**\n     * Returns the badge color classes for the account type\n     */\n    getBadgeColorClass(accountType) {\n        switch (accountType) {\n            case PersonAccountType.Employee:\n                return 'fwc-person-badge__employee';\n            case PersonAccountType.ExternalHire:\n            case PersonAccountType.XExternal:\n                return 'fwc-person-badge__external';\n            case PersonAccountType.JointVentureAffiliate:\n                return 'fwc-person-badge__consultant';\n        }\n    }\n    /**\n     * Renders the avatar badge\n     */\n    renderBadge(details, position) {\n        return html `<fwc-badge\n      class=${this.getBadgeColorClass(details.accountType)}\n      slot=\"badge\"\n      icon=\"person\"\n      .size=${this.size}\n      .position=${position}\n      circular\n    />`;\n    }\n    /**\n     * Returns the first character in the person's name as upper case initial\n     */\n    getInitial(name) {\n        var _a;\n        return (_a = name === null || name === void 0 ? void 0 : name.substring(0, 1)) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n    }\n    /**\n     * Renders the avatar\n     */\n    renderAvatar(details) {\n        return html `<fwc-avatar .size=${this.size} .src=${details.pictureSrc} .value=${this.getInitial(details.name)}>\n      ${details.accountType ? this.renderBadge(details, BadgePosition.BottomRight) : null}</fwc-avatar\n    >`;\n    }\n    /**\n     * Renders the account type badge\n     */\n    renderTypeBadge(details) {\n        return html `<fwc-badge\n      class=\"fwc-person-status__icon ${this.getBadgeColorClass(details.accountType)}\"\n      size=${this.getStatusIconSize(this.size)}\n      icon=\"person\"\n      position\n    />`;\n    }\n    /**\n     * Render the account TYPE status\n     */\n    renderTypeStatus() {\n        var _a;\n        return html `<div class=\"fwc-person-status__row\">\n      ${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (details) => html `${details.accountType ? html `${this.renderTypeBadge(details)} ${details.accountType}` : null}`,\n            pending: () => html `${this.renderStatusIcon(PersonAvailability.Pending)}\n          ${this.renderTextPlaceholder(false, SkeletonSize.small)}`,\n            error: () => html `${this.renderStatusIcon(PersonAvailability.Error)} ${this.renderTextPlaceholder(true)}`,\n        })}\n    </div>`;\n    }\n    /**\n     * Renders pending state for avatar\n     */\n    renderPlaceholder(inactive) {\n        return html `<fwc-skeleton\n      size=${this.size}\n      variant=${SkeletonVariant.Circle}\n      icon=\"image\"\n      ?inactive=${inactive}\n    ></fwc-skeleton>`;\n    }\n    /**\n     * Renders pending state for content\n     */\n    renderTextPlaceholder(inactive, size) {\n        return html `<fwc-skeleton\n      size=${size}\n      variant=${SkeletonVariant.Text}\n      icon=\"image\"\n      ?inactive=${inactive}\n    ></fwc-skeleton>`;\n    }\n    /**\n     * Renders the error\n     */\n    renderError(error) {\n        return html `${error}`;\n    }\n    /** {@inheritDoc} */\n    render() {\n        var _a;\n        return html `<section class=\"fwc-person-section\">\n      <div class=\"fwc-person-status\">\n        <div class=\"fwc-person-status__heading\">${this.renderTitle()} ${this.renderAvailabilityStatus()}</div>\n        <div class=\"fwc-person-status__profession\">\n          ${this.renderJobTitle()} ${this.renderDepartment()} ${this.renderTypeStatus()}\n        </div>\n        <div class=\"fwc-person-status__info\">${this.renderEmail()} ${this.renderMobile()} ${this.renderLocation()}</div>\n      </div>\n      <div class=\"fwc-person-avatar\">\n        ${(_a = this.details) === null || _a === void 0 ? void 0 : _a.render({\n            complete: (details) => this.renderAvatar(details),\n            pending: () => this.renderPlaceholder(),\n            error: () => this.renderPlaceholder(true),\n        })}\n      </div>\n    </section>`;\n    }\n}\nPersonCardElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], PersonCardElement.prototype, \"azureId\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], PersonCardElement.prototype, \"size\", void 0);\n//# sourceMappingURL=element.js.map","import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property, queryAsync, eventOptions } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport style from './element.css';\nimport { popperjs } from './directories/popperjs';\n/**\n * Element wrapper for PopperJS\n */\nexport class PopoverElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.placement = 'auto';\n        this.triggers = [];\n        this._modifiers = [];\n    }\n    get options() {\n        const { placement, disabled, modifiers } = this;\n        const enabled = !disabled && (this.triggers.includes('hover') || this.show);\n        return { placement, enabled, modifiers };\n    }\n    get modifiers() {\n        var _a;\n        return [\n            {\n                name: 'flip',\n                enabled: !!this.flip || !!((_a = this.placement) === null || _a === void 0 ? void 0 : _a.match(/auto/)),\n            },\n            {\n                name: 'offset',\n                options: {\n                    offset: this.offset,\n                },\n            },\n            ...this._modifiers,\n        ];\n    }\n    /** Set popper modifiers for element */\n    set modifiers(modifiers) {\n        this._modifiers = modifiers;\n        this.requestUpdate();\n    }\n    render() {\n        const popperClasses = this.disabled\n            ? 'disabled'\n            : classMap({\n                show: !!this.show,\n                hover: this.triggers.includes('hover'),\n            });\n        return html `\n      <span id=\"content\" popperjs=${popperjs(this.popper, this.options)} @click=${this.handleClick}>\n        <slot></slot>\n      </span>\n      <span id=\"popper\" class=${popperClasses}>\n        <slot name=\"popover\"></slot>\n      </span>\n    `;\n    }\n    handleClick() {\n        if (this.triggers.includes('click')) {\n            this.show = !this.show;\n        }\n    }\n}\nPopoverElement.styles = [style];\n__decorate([\n    property({ reflect: true })\n], PopoverElement.prototype, \"placement\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"show\", void 0);\n__decorate([\n    property({ type: Boolean })\n], PopoverElement.prototype, \"flip\", void 0);\n__decorate([\n    property({ type: Array })\n], PopoverElement.prototype, \"offset\", void 0);\n__decorate([\n    property({ type: Array })\n], PopoverElement.prototype, \"triggers\", void 0);\n__decorate([\n    queryAsync('#popper')\n], PopoverElement.prototype, \"popper\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], PopoverElement.prototype, \"handleClick\", null);\nexport default PopoverElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: flex;\n    justify-content: center;\n    color: var(--fwc-star-progress-color, ${unsafeCSS(theme.colors.logo.fill_positive.getVariable('color'))});\n  }\n  svg {\n    fill: currentColor;\n  }\n  .container {\n    display: inline-flex;\n    flex-flow: column;\n    align-items: center;\n    gap: var(--fwc-star-progress-spacing, ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))});\n  }\n  .title {\n    ${unsafeCSS(theme.typography.heading.h2.css)};\n    font-size: var(--fwc-star-progress-header-size, ${unsafeCSS(theme.typography.heading.h2.getVariable('fontSize'))});\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { css, svg } from 'lit';\nexport const styles = css `\n  svg {\n    height: calc(var(--fwc-star-progress-size) * 1px);\n    width: calc(var(--fwc-star-progress-size) / 1.2px);\n  }\n  .graphics path {\n    animation: indicator_animation 1.3s linear infinite;\n  }\n  .graphics path:nth-child(2) {\n    animation-delay: 0.3s;\n  }\n  .graphics path:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n  .graphics path:nth-child(4) {\n    animation-delay: 0.6s;\n  }\n  .graphics path:nth-child(5) {\n    animation-delay: 0.8s;\n  }\n  .graphics path:nth-child(6) {\n    animation-delay: 1s;\n  }\n\n  @keyframes indicator_animation {\n    0% {\n      opacity: 1;\n    }\n    20% {\n      opacity: 0.8;\n    }\n    40% {\n      opacity: 0.6;\n    }\n    60% {\n      opacity: 0.4;\n    }\n    80% {\n      opacity: 0.2;\n    }\n    100% {\n      opacity: 0.05;\n    }\n  }\n`;\nexport const graphics = svg `\n  <svg\n    role=\"progressbar\"\n    viewBox=\"0 0 40 48\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    preserveAspectRatio=\"xMidYMid meet\"\n  >\n    <g class=\"graphics\">\n      <path\n        d=\"M32.756 34.6798L29.482 36.5817C29.4139 36.6219 29.3295 36.6227 29.2606 36.5829L25.9476 34.7151C25.7975 34.6306 25.7967 34.4149 25.9456 34.3284L29.2397 32.4256C29.3077 32.3858 29.3914 32.3858 29.4603 32.4248L32.754 34.2931C32.9033 34.3784 32.9041 34.5929 32.756 34.6798Z\"\n      />\n      <path\n        d=\"M25.9596 45.4706L22.6655 43.5867C22.5966 43.5469 22.554 43.4744 22.554 43.396V41.4289V39.5922C22.5519 39.4204 22.7381 39.3109 22.8878 39.397L26.1819 41.2981C26.25 41.3379 26.2926 41.4104 26.2934 41.4896V43.4268V45.2762C26.2947 45.4472 26.1085 45.5559 25.9596 45.4706Z\"\n      />\n      <path\n        d=\"M12.3022 47.7037V44.9795V42.6544C12.3022 42.5495 12.3576 42.4515 12.4482 42.3986L14.1262 41.4062L16.8143 39.8188C17.0119 39.7019 17.2617 39.8442 17.2625 40.0739L17.2633 42.7627V45.1456C17.2633 45.251 17.2079 45.3486 17.1165 45.4015L12.7496 47.9587C12.552 48.0748 12.3031 47.9325 12.3022 47.7037Z\"\n      />\n      <path\n        d=\"M0.221343 34.2106L6.76939 30.4056C6.90636 30.326 7.07449 30.3256 7.21227 30.4023L13.8378 34.1401C14.138 34.3095 14.14 34.7413 13.8415 34.9131L7.25492 38.7182C7.11795 38.7977 6.94941 38.7985 6.81204 38.7206L0.225854 34.9836C-0.0734986 34.8139 -0.075549 34.3833 0.221343 34.2106Z\"\n      />\n      <path\n        d=\"M6.03876 9.125L16.9237 15.5151C17.1513 15.6484 17.2903 15.8912 17.2903 16.1549V28.8331C17.2903 29.4076 16.665 29.7647 16.1704 29.4728L5.28546 23.0264C5.05869 22.8919 4.92008 22.6479 4.9209 22.3855V9.76307C4.92254 9.1902 5.54503 8.83467 6.03876 9.125Z\"\n      />\n      <path\n        d=\"M39.6262 1.07261V11.7603V19.3368C39.627 19.7178 39.4265 20.0709 39.0988 20.2644L31.4145 24.8195L23.3545 29.5964C22.6385 30.0192 21.7339 29.5029 21.7339 28.6717V10.3259C21.7339 9.94495 21.9356 9.5927 22.2641 9.39955L38.008 0.149533C38.7232 -0.270381 39.6241 0.24385 39.6262 1.07261Z\"\n      />\n    </g>\n  </svg>\n`;\nexport default graphics;\n//# sourceMappingURL=graphics.svg.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport style from './element.css';\nimport { graphics, styles as graphicsStyles } from './graphics.svg';\n/**\n * Element for displaying a Equinor loader.\n * {@inheritdoc}\n *\n * @tag fwc-star-progress\n *\n */\nexport class StarProgressElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.size = 200;\n    }\n    render() {\n        const { size = 200, text } = this;\n        return html `\n      <div class=\"container\" style=\"--fwc-star-progress-size: ${size};\">\n        ${graphics}\n        <header class=\"title\">\n          <slot>\n            <span>${text}</span>\n          </slot>\n        </header\n      </div>\n    `;\n    }\n}\n__decorate([\n    property({ type: Number, reflect: true })\n], StarProgressElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: false })\n], StarProgressElement.prototype, \"text\", void 0);\nStarProgressElement.styles = [style, graphicsStyles];\nexport default StarProgressElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: flex;\n    justify-content: center;\n  }\n  :host([color='primary']) {\n    --fwc-dots-progress-color: ${unsafeCSS(theme.colors.infographic.primary__moss_green_100.getVariable('color'))};\n  }\n  :host([color='tertiary']) {\n    --fwc-dots-progress-color: ${unsafeCSS(theme.colors.interactive.danger__resting.getVariable('color'))};\n  }\n  :host([color='neutral']) {\n    --fwc-dots-progress-color: ${unsafeCSS(theme.colors.interactive.icon_on_interactive_colors.getVariable('color'))};\n  }\n`;\nconst sizeStyle = css `\n  :host([size='small']) {\n    --fwc-dots-progress-size: 32px;\n  }\n  :host([size='medium']) {\n    --fwc-dots-progress-size: 48px;\n  }\n  :host([size='large']) {\n    --fwc-dots-progress-size: 64px;\n  }\n`;\nconst graphicsStyles = css `\n  svg {\n    fill: var(--fwc-dots-progress-color, currentColor);\n    height: var(calc(--fwc-dots-progress-size / 4), calc(1.2em / 4));\n    width: var(--fwc-dots-progress-size, 1.2em);\n  }\n\n  circle:nth-child(1) {\n    animation: opacity 1s ease infinite;\n  }\n  circle:nth-child(2) {\n    animation: opacity 1s ease 0.2s infinite;\n  }\n  circle:nth-child(3) {\n    animation: opacity 1s ease 0.4s infinite;\n  }\n\n  @keyframes opacity {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0.5;\n    }\n  }\n`;\nexport default [style, sizeStyle, graphicsStyles];\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, svg } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport style from './element.css';\nexport var DotsSize;\n(function (DotsSize) {\n    DotsSize[\"Small\"] = \"small\";\n    DotsSize[\"Medium\"] = \"medium\";\n    DotsSize[\"Large\"] = \"large\";\n})(DotsSize || (DotsSize = {}));\n/**\n * Element for displaying a Equinor loader.\n * {@inheritdoc}\n *\n * @tag fwc-dots-progress\n *\n */\nexport class DotsProgressElement extends LitElement {\n    render() {\n        return svg `\n      <svg \n        role=\"progressbar\"\n        viewBox=\"0 0 16 4\"\n        preserveAspectRatio=\"xMidYMid meet\" \n      >\n        <circle cx=\"2\" cy=\"2\" r=\"2\" />\n        <circle cx=\"8\" cy=\"2\" r=\"2\" />\n        <circle cx=\"14\" cy=\"2\" r=\"2\" />\n      </svg>\n    `;\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], DotsProgressElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DotsProgressElement.prototype, \"color\", void 0);\nDotsProgressElement.styles = [style];\nexport default DotsProgressElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: inline-flex;\n    justify-content: center;\n  }\n\n  :host([color='primary']) {\n    --fwc-circular-progress-color: ${unsafeCSS(theme.colors.infographic.primary__moss_green_100.getVariable('color'))};\n  }\n\n  :host([color='neutral']) {\n    --fwc-circular-progress-color: ${unsafeCSS(theme.colors.interactive.icon_on_interactive_colors.getVariable('color'))};\n  }\n`;\nconst sizeStyle = css `\n  :host([size='x-small']) {\n    --fwc-circular-progress-size: 16px;\n  }\n  :host([size='small']) {\n    --fwc-circular-progress-size: 24px;\n  }\n  :host([size='medium']) {\n    --fwc-circular-progress-size: 32px;\n  }\n  :host([size='large']) {\n    --fwc-circular-progress-size: 40px;\n  }\n  :host([size='x-large']) {\n    --fwc-circular-progress-size: 48px;\n  }\n`;\nconst graphicStyles = css `\n  svg {\n    height: var(--fwc-circular-progress-size, 1.2em);\n    width: var(--fwc-circular-progress-size, 1.2em);\n    stroke: var(--fwc-circular-progress-color, currentColor);\n  }\n\n  .track {\n    filter: opacity(13%);\n  }\n\n  .progress {\n    transform-origin: center;\n    animation: spin 1.3s linear infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\nexport default [style, sizeStyle, graphicStyles];\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, svg } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport styles from './element.css';\nexport var CircularSize;\n(function (CircularSize) {\n    CircularSize[\"XSmall\"] = \"x-small\";\n    CircularSize[\"Small\"] = \"small\";\n    CircularSize[\"Medium\"] = \"medium\";\n    CircularSize[\"Large\"] = \"large\";\n    CircularSize[\"XLarge\"] = \"x-large\";\n})(CircularSize || (CircularSize = {}));\n/**\n * Element for displaying a Equinor loader.\n * {@inheritdoc}\n *\n * @tag fwc-circular-progress\n *\n */\nexport class CircularProgressElement extends LitElement {\n    render() {\n        const thickness = 4;\n        return svg `\n        <svg \n          viewBox=\"0 0 48 48\" \n          role=\"progressbar\" \n          preserveAspectRatio=\"xMidYMid meet\" \n        >\n          <circle \n            cx=\"50%\" \n            cy=\"50%\" \n            r=\"${(48 - thickness) / 2}\"\n            fill=\"none\" \n            stroke-width=\"${thickness}\"\n            class=\"track\">\n          </circle>\n          <circle \n            cx=\"50%\" \n            cy=\"50%\" \n            r=\"${(48 - thickness) / 2}\"\n            fill=\"none\" \n            stroke-width=\"${thickness}\"\n            stroke-linecap=\"round\" \n            stroke-dasharray=\"48\" \n            class=\"progress\">\n          </circle>\n        </svg>\n    `;\n    }\n}\n__decorate([\n    property({ type: String, reflect: true })\n], CircularProgressElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CircularProgressElement.prototype, \"color\", void 0);\nCircularProgressElement.styles = styles;\nexport default CircularProgressElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { SingleSelectionController } from '@material/mwc-radio/single-selection-controller.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport MDCRadioFoundation from '@material/radio/foundation.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/**\n * @fires checked\n * @soyCompatible\n */\nexport class RadioBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this._checked = false;\n        this.useStateLayerCustomProperties = false;\n        this.global = false;\n        this.disabled = false;\n        this.value = 'on';\n        this.name = '';\n        /**\n         * Touch target extends beyond visual boundary of a component by default.\n         * Set to `true` to remove touch target added to the component.\n         * @see https://material.io/design/usability/accessibility.html\n         */\n        this.reducedTouchTarget = false;\n        this.mdcFoundationClass = MDCRadioFoundation;\n        /**\n         * input's tabindex is updated based on checked status.\n         * Tab navigation will be removed from unchecked radios.\n         */\n        this.formElementTabIndex = 0;\n        this.focused = false;\n        this.shouldRenderRipple = false;\n        this.rippleElement = null;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            this.ripple.then((v) => {\n                this.rippleElement = v;\n            });\n            return this.ripple;\n        });\n    }\n    get checked() {\n        return this._checked;\n    }\n    /**\n     * We define our own getter/setter for `checked` because we need to track\n     * changes to it synchronously.\n     *\n     * The order in which the `checked` property is set across radio buttons\n     * within the same group is very important. However, we can't rely on\n     * UpdatingElement's `updated` callback to observe these changes (which is\n     * also what the `@observer` decorator uses), because it batches changes to\n     * all properties.\n     *\n     * Consider:\n     *\n     *   radio1.disabled = true;\n     *   radio2.checked = true;\n     *   radio1.checked = true;\n     *\n     * In this case we'd first see all changes for radio1, and then for radio2,\n     * and we couldn't tell that radio1 was the most recently checked.\n     */\n    set checked(isChecked) {\n        var _a, _b;\n        const oldValue = this._checked;\n        if (isChecked === oldValue) {\n            return;\n        }\n        this._checked = isChecked;\n        if (this.formElement) {\n            this.formElement.checked = isChecked;\n        }\n        (_a = this._selectionController) === null || _a === void 0 ? void 0 : _a.update(this);\n        if (isChecked === false) {\n            // Remove focus ring when unchecked on other radio programmatically.\n            // Blur on input since this determines the focus style.\n            (_b = this.formElement) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n        this.requestUpdate('checked', oldValue);\n        // useful when unchecks self and wrapping element needs to synchronize\n        // TODO(b/168543810): Remove triggering event on programmatic API call.\n        this.dispatchEvent(new Event('checked', { bubbles: true, composed: true }));\n    }\n    _handleUpdatedValue(newValue) {\n        // the observer function can't access protected fields (according to\n        // closure compiler) because it's not a method on the class, so we need this\n        // wrapper.\n        this.formElement.value = newValue;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? html `<mwc-ripple unbounded accent\n        .internalUseStateLayerCustomProperties=\"${this.useStateLayerCustomProperties}\"\n        .disabled=\"${this.disabled}\"></mwc-ripple>` :\n            '';\n    }\n    get isRippleActive() {\n        var _a;\n        return ((_a = this.rippleElement) === null || _a === void 0 ? void 0 : _a.isActive) || false;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note that we must defer creating the selection controller until the\n        // element has connected, because selection controllers are keyed by the\n        // radio's shadow root. For example, if we're stamping in a lit map\n        // or repeat, then we'll be constructed before we're added to a root node.\n        //\n        // Also note if we aren't using native shadow DOM, we still need a\n        // SelectionController, because we should update checked status of other\n        // radios in the group when selection changes. It also simplifies\n        // implementation and testing to use one in all cases.\n        //\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        this._selectionController = SingleSelectionController.getController(this);\n        this._selectionController.register(this);\n        // Radios maybe checked before connected, update selection as soon it is\n        // connected to DOM. Last checked radio button in the DOM will be selected.\n        //\n        // NOTE: If we update selection only after firstUpdate() we might mistakenly\n        // update checked status before other radios are rendered.\n        this._selectionController.update(this);\n    }\n    disconnectedCallback() {\n        // The controller is initialized in connectedCallback, so if we are in\n        // disconnectedCallback then it must be initialized.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this._selectionController.unregister(this);\n        this._selectionController = undefined;\n    }\n    focus() {\n        this.formElement.focus();\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { setNativeControlDisabled: (disabled) => {\n                this.formElement.disabled = disabled;\n            } });\n    }\n    handleFocus() {\n        this.focused = true;\n        this.handleRippleFocus();\n    }\n    handleClick() {\n        // Firefox has weird behavior with radios if they are not focused\n        this.formElement.focus();\n    }\n    handleBlur() {\n        this.focused = false;\n        this.formElement.blur();\n        this.rippleHandlers.endFocus();\n    }\n    setFormData(formData) {\n        if (this.name && this.checked) {\n            formData.append(this.name, this.value);\n        }\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes radioAttributes: input\n     * @soyClasses radioClasses: .mdc-radio\n     */\n    render() {\n        /** @classMap */\n        const classes = {\n            'mdc-radio--touch': !this.reducedTouchTarget,\n            'mdc-ripple-upgraded--background-focused': this.focused,\n            'mdc-radio--disabled': this.disabled,\n        };\n        return html `\n      <div class=\"mdc-radio ${classMap(classes)}\">\n        <input\n          tabindex=\"${this.formElementTabIndex}\"\n          class=\"mdc-radio__native-control\"\n          type=\"radio\"\n          name=\"${this.name}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n          aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n          .checked=\"${this.checked}\"\n          .value=\"${this.value}\"\n          ?disabled=\"${this.disabled}\"\n          @change=\"${this.changeHandler}\"\n          @focus=\"${this.handleFocus}\"\n          @click=\"${this.handleClick}\"\n          @blur=\"${this.handleBlur}\"\n          @mousedown=\"${this.handleRippleMouseDown}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleTouchStart}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        <div class=\"mdc-radio__background\">\n          <div class=\"mdc-radio__outer-circle\"></div>\n          <div class=\"mdc-radio__inner-circle\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    changeHandler() {\n        this.checked = this.formElement.checked;\n    }\n}\n__decorate([\n    query('.mdc-radio')\n], RadioBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], RadioBase.prototype, \"formElement\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"useStateLayerCustomProperties\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RadioBase.prototype, \"global\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], RadioBase.prototype, \"checked\", null);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (disabled) {\n        this.mdcFoundation.setDisabled(disabled);\n    })\n], RadioBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        this._handleUpdatedValue(value);\n    })\n], RadioBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], RadioBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RadioBase.prototype, \"reducedTouchTarget\", void 0);\n__decorate([\n    property({ type: Number })\n], RadioBase.prototype, \"formElementTabIndex\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"focused\", void 0);\n__decorate([\n    state()\n], RadioBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], RadioBase.prototype, \"ripple\", void 0);\n__decorate([\n    ariaProperty,\n    property({ attribute: 'aria-label' })\n], RadioBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ attribute: 'aria-labelledby' })\n], RadioBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], RadioBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-radio-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-radio/mwc-radio.css';\nexport const style = css `\n  :host {\n    --fwc-radio-size: 18px;\n    --fwc-radio-spacing: calc(var(--fwc-radio-size) / 2);\n    --fwc-radio-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-radio-circle-color: var(--fwc-radio-color);\n    --fwc-radio-color-unchecked: var(--fwc-radio-color);\n    --fwc-radio-color-disabled: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n  }\n  :host([reducedtouchtarget]) {\n    --fwc-radio-size: 14px;\n  }\n`;\nexport const mdcStyleOverride = css `\n  :host {\n    --mdc-radio-ink-color: var(--fwc-radio-color);\n    --mdc-radio-unchecked-color: var(--fwc-radio-color-unchecked);\n    --mdc-radio-disabled-color: var(--fwc-radio-color-disabled);\n  }\n  .mdc-radio {\n    flex: 0 0 var(--fwc-radio-size) !important;\n    width: var(--fwc-radio-size) !important;\n    height: var(--fwc-radio-size) !important;\n    padding: var(--fwc-radio-spacing) !important;\n    margin: 0 !important;\n  }\n  .mdc-radio .mdc-radio__background {\n    width: var(--fwc-radio-size) !important;\n    height: var(--fwc-radio-size) !important;\n  }\n\n  .mdc-radio .mdc-radio__background::before {\n    top: calc(var(--fwc-radio-spacing) * -1) !important;\n    left: calc(var(--fwc-radio-spacing) * -1) !important;\n    width: calc(var(--fwc-radio-size) + var(--fwc-radio-spacing) * 2) !important;\n    height: calc(var(--fwc-radio-size) + var(--fwc-radio-spacing) * 2) !important;\n  }\n\n  .mdc-radio .mdc-radio__native-control {\n    width: calc(var(--fwc-radio-size) + var(--fwc-radio-spacing) * 2) !important;\n    height: calc(var(--fwc-radio-size) + var(--fwc-radio-spacing) * 2) !important;\n    top: 0 !important;\n    left: 0 !important;\n  }\n\n  .mdc-radio__inner-circle {\n    background: var(--fwc-radio-color);\n    border: none !important;\n  }\n\n  .mdc-radio .mdc-radio__native-control:enabled:checked + .mdc-radio__background .mdc-radio__outer-circle {\n    border-color: var(--fwc-radio-circle-color);\n  }\n\n  :host([disabled]) .mdc-radio__inner-circle {\n    background: var(--mdc-radio-disabled-color);\n  }\n`;\nexport const styles = [mdcStyle, mdcStyleOverride, style];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-list-vertical-padding: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    --fwc-list-side-padding: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    --fwc-list-inset-margin: calc(4 * ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))});\n    --mdc-list-vertical-padding: var(--fwc-list-vertical-padding);\n    --mdc-list-side-padding: var(--fwc-list-side-padding);\n    --mdc-list-inset-margin: var(--fwc-list-inset-margin);\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { ListBase } from '@material/mwc-list/mwc-list-base';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list.css';\nimport style from './element.css';\n/**\n * Element for list\n * {@inheritdoc}\n *\n * @tag fwc-list\n *\n * @property {boolean} activatable - Sets activated attribute on selected items which provides a focus-persistent highlight.\n * @property {boolean} rootTabbable - When `true`, sets `tabindex=\"0\"` on the internal list. Otherwise sets `tabindex=\"-1\"`.\n * @property {boolean} multi - When `true`, enables selection of multiple items. This will result in `index` being of type `Set<number>` and selected returning `ListItemBase[]`.\n * @property {boolean} wrapFocus - When `true`, pressing `up` on the keyboard when focused on the first item will focus the last item and `down` when focused on the last item will focus the first item.\n * @property {string} itemRoles - Determines what `role` attribute to set on all list items.\n * @property {string} innerAriaLabel - ARIA label of the internal `<ul>` element.\n * @property {string} innerRole - Role of the internal `<ul>` element.\n * @property {boolean} noninteractive - When `true`, disables focus and pointer events (thus ripples) on the list. Used for display-only lists.\n *\n * @property {ListItemBase[]} items - (readonly*) All list items that are available for selection. Eligible items have the `[mwc-list-item]` attribute which `ListItemBase` applies automatically.\n * @property {SelectedType} selected - (readonly*) Currently-selected list item(s). When `multi` is `true`, `selected` is of type `ListItemBase[]` and when `false`, `selected` is of type `ListItemBase`. `selected` is `null` when no item is selected.\n * @property {MWCListIndex} index - (readonly*) Index / indices of selected item(s). When `multi` is `true`, `index` is of type `number` and when `false`, `index` is of type `Set<number>`. Unset indicies are `-1` and empty `Set<number>` for single and multi selection respectively.\n *\n * @function items - Selects the elements at the given index / indices.\n * @function toggle - Toggles the selected index, and forcibly selects or deselects the value of force if attribute is provided.\n * @function getFocusedItemIndex - Returns the index of the currently-focused item. -1 if none are focused.\n * @function focusItemAtIndex - Focuses the item at the given index and manages tabindex on all other items.\n * @function layout - Resets tabindex on all items and will update items model if provided true. It may be required to call layout if selectability of an element is dynamically changed. e.g. [mwc-list-item] attribute is removed from a list item or noninteractive is dynamically set on a list item.\n *\n * @cssprop {theme.spacing.comfortable.small} --fwc-list-vertical-padding - Padding before and after the first and last list items.\n * @cssprop {theme.spacing.comfortable.medium} --fwc-list-side-padding - Adjusts the padding of the [padded] list dividers (also propagates to fwc-list-item).\n * @cssprop {4.5 * theme.spacing.comfortable.medium} --fwc-list-inset-margin - Adjusts the left inset padding of an [inset] list divider. Typically used for dividing list items with icons.\n *\n * @fires selected - Selects the elements at the given index / indices.\n * @fires action - When a selection has been made via click or keyboard aciton.\n * @fires items-updated - When any of the child items are updated\n *\n * @summary Enhanced list element, based on [Material Web Component](https://github.com/material-components/material-web/tree/master/packages/list)\n */\nexport class ListElement extends ListBase {\n}\nListElement.styles = [mdcStyle, style];\nexport default ListElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-list-side-padding: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    --mdc-list-side-padding: var(--fwc-list-side-padding);\n    --fwc-list-item-ink-color: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('color'))};\n    --fwc-list-item-secondary-ink-color: ${unsafeCSS(theme.typography.paragraph.caption.getVariable('color'))};\n    --fwc-list-item-meta-color: ${unsafeCSS(theme.typography.paragraph.meta.getVariable('color'))};\n    --fwc-list-item-font-size: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('fontSize'))};\n    --fwc-list-item-font-weight: ${unsafeCSS(theme.typography.paragraph.body_short.getVariable('fontWeight'))};\n    --fwc-list-item-secondary-font-size: ${unsafeCSS(theme.typography.paragraph.caption.getVariable('fontSize'))};\n  }\n  .fwc-list-item__text {\n    flex: 1;\n    color: var(--fwc-list-item-ink-color);\n    font-size: var(--fwc-list-item-font-size);\n    font-weight: var(--fwc-list-item-font-weight);\n    overflow: hidden;\n  }\n  .fwc-list-item__primary-text {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    line-height: normal;\n    display: block;\n  }\n  .fwc-list-item__secondary-text {\n    color: var(--fwc-list-item-secondary-ink-color);\n    font-size: var(--fwc-list-item-secondary-font-size);\n  }\n  .fwc-list-item__meta {\n    margin-left: auto;\n    color: var(--fwc-list-item-meta-color);\n    font-size: 0.875rem;\n  }\n  .fwc-list-item__graphic {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  :host([graphic='icon']) .fwc-list-item__graphic {\n    font-size: 1rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='avatar']) .fwc-list-item__graphic {\n    width: 2rem;\n    height: 2rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='medium']) .fwc-list-item__graphic {\n    width: 2rem;\n    height: 2rem;\n    margin-right: 0.625rem;\n  }\n  :host([graphic='large']) .fwc-list-item__graphic {\n    max-width: 5rem;\n    height: 100%;\n    margin-right: 0.625rem;\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { html } from 'lit';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\n/**\n * Element for list item\n * {@inheritdoc}\n *\n * @tag fwc-list-item\n *\n * @property {string} value - Value associated with this list item (used by fwc-select).\n * @property {string|null} group - Used to group items together (used by mwc-menu for menu selection groups and mwc-radio-list-element).\n * @property {number} tabindex - Reflects tabindex and sets internal tab indices.\n * @property {boolean} disabled - Reflects disabled and sets internal disabled attributes.\n * @property {boolean} twoline - Activates the two-line variant and enables the secondary slot.\n * @property {boolean} activated - Activates focus-persistent ripple.\n * @property {GraphicType} graphic - Determines which graphic layout to show and enables the graphic slot.\n * @property {boolean} hasMeta - Activates the meta layout tile and enables the meta slot.\n * @property {boolean} noninteractive - Disables focus and pointer events for the list item.\n * @property {boolean} selected - Denotes that the list item is selected.\n *\n * @property {string} text - (readonly*) Trimmed textContent of the list item.\n *\n * @cssprop {theme.spacing.comfortable.medium} --fwc-list-side-padding - Adjusts the padding of the [padded] list dividers (also propagates to fwc-list-item).\n * @cssprop {theme.typography.paragraph.body_short.color} --fwc-list-item-ink-color - Sets the primary text color.\n * @cssprop {theme.typography.paragraph.caption.color} --fwc-list-item-secondary-ink-color - Sets the secondary text color.\n * @cssprop {theme.typography.paragraph.meta.color} --fwc-list-item-meta-color - Sets the meta color.\n * @cssprop {theme.typography.paragraph.body_short.fontSize} --fwc-list-item-font-size - Sets primary text font size.\n * @cssprop {theme.typography.paragraph.body_short.fontWeight} --fwc-list-item-font-weight - Sets primary text font weight.\n * @cssprop {theme.typography.paragraph.caption.fontSize} --fwc-list-item-secondary-font-weight - Sets secondary text font size.\n *\n * @fires request-selected - Fired upon click and when selected property is changed. Requests selection from the mwc-list.\n * @fires list-item-rendered - When a list item has been rendered\n *\n * @summary Enhanced list item element, based on [Material Web Component](https://github.com/material-components/material-web/tree/master/packages/list)\n */\nexport class ListItemElement extends ListItemBase {\n    /**\n     * Render text slot\n     */\n    renderText() {\n        const inner = this.twoline ? this.renderTwoLines() : this.renderSingleLine();\n        return html ` <span class=\"fwc-list-item__text\"> ${inner}</span>`;\n    }\n    /**\n     * Render text as two lines (default and secondary slots)\n     */\n    renderTwoLines() {\n        return html `\n      <span class=\"fwc-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"fwc-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n    }\n    /** {@inheritDoc} */\n    render() {\n        const text = this.renderText();\n        return html ` ${this.renderRipple()}<span class=\"fwc-list-item__graphic\"><slot name=\"graphic\"></slot></span>${text}\n      <slot class=\"fwc-list-item__meta\" name=\"meta\"></slot>`;\n    }\n}\nListItemElement.styles = [mdcStyle, style];\nexport default ListItemElement;\n//# sourceMappingURL=element.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport Checkbox from '@equinor/fusion-wc-checkbox';\nimport { ListItemElement } from '../list-item';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\n// persist elements\nCheckbox;\n/**\n * Element for check list item\n * {@inheritdoc}\n *\n * @tag fwc-check-list-item\n *\n * @property {boolean} left - Displays the checkbox on the left. Overrides graphic.\n *\n * @summary Enhanced check list item element based on [FWC Checkbox](https://github.com/equinor/fusion-web-components/tree/main/packages/checkbox)\n */\nexport class CheckListItemElement extends ListItemElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Displays the checkbox on the left. Overrides graphic.\n         */\n        this.left = false;\n        /**\n         * Determines which graphic layout to show and enables the graphic slot.\n         */\n        this.graphic = 'control';\n    }\n    render() {\n        const checkboxClasses = {\n            'fwc-list-item__checkbox-right': !this.left,\n            'fwc-list-item__checkbox-left': this.left,\n        };\n        const text = this.renderText();\n        const graphic = this.graphic ? this.renderGraphic() : html ``;\n        const ripple = this.renderRipple();\n        return html ` ${ripple} ${graphic} ${this.left ? '' : text}\n      <fwc-checkbox\n        class=${classMap(checkboxClasses)}\n        reducedTouchTarget\n        tabindex=${this.tabindex}\n        .checked=${this.selected}\n        ?disabled=${this.disabled}\n        @change=${this.onChange}\n      >\n      </fwc-checkbox>\n      ${this.left ? text : ''} <slot class=\"meta\" name=\"meta\"></slot>`;\n    }\n    onChange(evt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const checkbox = evt.target;\n            const changeFromProp = this.selected === checkbox.checked;\n            if (!changeFromProp) {\n                this._skipPropRequest = true;\n                this.selected = checkbox.checked;\n                yield this.updateComplete;\n                this._skipPropRequest = false;\n            }\n        });\n    }\n}\nCheckListItemElement.styles = [mdcStyle, style];\n__decorate([\n    property({ type: Boolean })\n], CheckListItemElement.prototype, \"left\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CheckListItemElement.prototype, \"graphic\", void 0);\nexport default CheckListItemElement;\n//# sourceMappingURL=element.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport Radio from '@equinor/fusion-wc-radio';\nimport Icon from '@equinor/fusion-wc-icon';\nimport { styles as mdcStyle } from '@material/mwc-list/mwc-list-item.css';\nimport style from './element.css';\nimport { ListItemElement } from '../list-item';\n// persist elements\nRadio;\nIcon;\n/**\n * Element for radio list item\n * {@inheritdoc}\n *\n * @tag fwc-radio-list-item\n *\n * @property {boolean} left - Displays the checkbox on the left. Overrides graphic.\n *\n * @summary Enhanced radio list item element based on [FWC Radio](https://github.com/equinor/fusion-web-components/tree/main/packages/radio)\n */\nexport class RadioListItemElement extends ListItemElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Displays the checkbox on the left. Overrides graphic.\n         */\n        this.left = false;\n        /**\n         * Determines which graphic layout to show and enables the graphic slot.\n         */\n        this.graphic = 'control';\n        this._changeFromClick = false;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('icon')) {\n            if (this.icon) {\n                this.graphic = 'icon';\n            }\n        }\n    }\n    /**\n     * Render icon by slot or name\n     */\n    renderIcon() {\n        return html `<slot name=\"icon\"><fwc-icon icon=${ifDefined(this.icon)}></fwc-icon></slot>`;\n    }\n    /**\n     * Render avatar slot\n     */\n    renderAvatar() {\n        if (this.graphic === 'avatar') {\n            return html `<slot name=\"avatar\"></slot>`;\n        }\n        return html ``;\n    }\n    /** {@inheritDoc} */\n    renderGraphic() {\n        switch (this.graphic) {\n            case 'avatar':\n                return this.renderAvatar();\n            case 'icon':\n                return this.renderIcon();\n            default:\n                return super.renderGraphic();\n        }\n    }\n    /** {@inheritDoc} */\n    render() {\n        const radioClasses = {\n            'fwc-list-item__radio-right': !this.left,\n            'fwc-list-item__radio-left': this.left,\n        };\n        const text = this.renderText();\n        const graphic = this.graphic && this.graphic !== 'control' && !this.left ? this.renderGraphic() : html ``;\n        const meta = this.hasMeta && this.left ? this.renderMeta() : html ``;\n        const ripple = this.renderRipple();\n        return html ` ${ripple} ${graphic} ${this.left ? '' : text}\n      <fwc-radio\n        global\n        class=${classMap(radioClasses)}\n        tabindex=${this.tabindex}\n        name=${ifDefined(this.group === null ? undefined : this.group)}\n        .checked=${this.selected}\n        ?disabled=${this.disabled}\n        @checked=${this.onChange}\n      >\n      </fwc-radio>\n      ${this.left ? text : ''} ${meta}`;\n    }\n    onClick() {\n        this._changeFromClick = true;\n        super.onClick();\n    }\n    /**\n     * Handle on change and fire required events\n     */\n    onChange(evt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const checkbox = evt.target;\n            const changeFromProp = this.selected === checkbox.checked;\n            if (!changeFromProp) {\n                this._skipPropRequest = true;\n                this.selected = checkbox.checked;\n                yield this.updateComplete;\n                this._skipPropRequest = false;\n                if (!this._changeFromClick) {\n                    this.fireRequestSelected(this.selected, 'interaction');\n                }\n            }\n            this._changeFromClick = false;\n        });\n    }\n}\nRadioListItemElement.styles = [mdcStyle, style];\n__decorate([\n    property({ type: Boolean })\n], RadioListItemElement.prototype, \"left\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], RadioListItemElement.prototype, \"graphic\", void 0);\n__decorate([\n    property({ type: String })\n], RadioListItemElement.prototype, \"icon\", void 0);\nexport default RadioListItemElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-textfield/mwc-textfield.css';\nexport const fwcsdd = css `\n  :host {\n    position: relative;\n    width: 100%;\n    --textinput-dense-size: 32px;\n    --fwc-text-field-base-color: ${unsafeCSS(theme.colors.text.static_icons__tertiary.getVariable('color'))};\n    --fwc-text-field-fill-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-text-field-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n    --fwc-text-field-disabled-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n  }\n  .input {\n    posistion: relative;\n  }\n  fwc-textinput {\n    width: 100%;\n  }\n  fwc-textinput[dense] {\n    --mdc-text-field-outlined-idle-border-color: transparent;\n    --mdc-shape-small: 0;\n    --mdc-text-field-outlined-hover-border-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n  .interactive {\n    cursor: pointer;\n  }\n  [slot='trailing'] {\n    display: block;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n    bottom: 2px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: var(--textinput-dense-size);\n    color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    font-size: 0.8em;\n  }\n  .list {\n    position: absolute;\n    top: calc(100% + 4px);\n    left: 0;\n    width: 100%;\n    height: auto;\n    overflow: hidden;\n    z-index: 99;\n    box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2), 0px 3px 4px rgba(0, 0, 0, 0.12), 0px 2px 4px rgba(0, 0, 0, 0.14);\n    border-radius: 4px;\n  }\n  .list-scroll {\n    width: 100%;\n    height: auto;\n    overflow: hidden auto;\n    scrollbar-width: thin;\n    scrollbar-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))} transparent;\n  }\n  fwc-list {\n    background-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n  }\n  .variant-outlined fwc-list {\n    background-color: ${unsafeCSS(theme.colors.ui.background__default.getVariable('color'))};\n  }\n  .item-text {\n    display: flex;\n    flex-direction: column;\n    font-size: 1em;\n  }\n  .item-title {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    font-size: 1em;\n    line-height: 1.6;\n  }\n  .item-subtitle {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    font-size: 0.8em;\n    font-style: italic;\n    line-height: 1.6;\n  }\n  [slot='graphic'] {\n    display: flex;\n    font-size: 0.8em;\n    padding-right: 6px;\n  }\n  fwc-divider {\n    display: flex;\n    align-items: center;\n    height: 1em;\n  }\n  .section-title {\n    font-weight: 600;\n    font-size: 16px;\n    padding: 0 1em;\n    margin: 1em 0 0;\n  }\n  .item-error {\n    background-color: ${unsafeCSS(theme.colors.interactive.danger__highlight.getVariable('color'))};\n  }\n`;\nexport const styles = [mdcStyle, fwcsdd];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { query } from 'lit/decorators/query.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { v4 as uuid } from 'uuid';\nimport { SearchableDropdownController } from '../provider';\nimport { CheckListItemElement, ListElement, ListItemElement } from '@equinor/fusion-wc-list';\nimport { TextInputElement } from '@equinor/fusion-wc-textinput';\nimport { DividerElement } from '@equinor/fusion-wc-divider';\nimport { IconElement } from '@equinor/fusion-wc-icon';\nListElement;\nListItemElement;\nCheckListItemElement;\nTextInputElement;\nDividerElement;\nIconElement;\nimport { styles as sddStyles } from './element.css';\n/**\n * Element for SearchableDropdown\n * @tag fwc-searchabledropdown\n *\n * @property {boolean} autofocus Focus the fwx-textInput on hostconnect\n * @property {string} label Label for fwc-textinput element\n * @property {string} placeholder Placeholder text for fwc-textinput element\n * @property {string} value value for TextInput element\n * @property {'page' | 'page-outlined' | 'page-dense' | 'header' | 'header-filled'} variant Set variant to header|page style\n * @property {string} meta Icon to show after each fwc-list-item. If you want an icon only on one list-item then use the meta property on the SearchableDropdownResultItem\n * @property {string} multiple Able to select multiple items\n * @property {string} graphic Icon to show before each fwc-list-item. If you want an icon only on one list-item then use the meta property on the SearchableDropdownResultItem\n * @property {string} initialText Text to display in dropdown before/without querystring in fwc-textinput\n * @property {string} leadingIcon Leading Icon to display in fwc-text-input\n * @property {string} dropdownHeight Sets max-height of list so user can scroll trough results\n *\n * @fires action Fires when a selection has been made on the fwc-list element\n */\nexport class SearchableDropdownElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.controller = new SearchableDropdownController(this);\n        /* Label passed to the fwc-text-input component */\n        this.label = '';\n        /* Placeholder passe to fwc-textinput */\n        this.placeholder = '';\n        /* Textinput variant passed to the fwc-text-input component */\n        this.variant = 'page';\n        /* The leading icon to display in fwc-textinput */\n        this.leadingIcon = 'search';\n        /* The trailing icon to display in fwc-textinput */\n        this.trailingIcon = '';\n        /* The icon string to render in result list items on the meta slot */\n        this.meta = '';\n        /* value passed to textinput */\n        this.value = '';\n        /* The icon string to render in result list items on the graphic slot */\n        this.graphic = '';\n        /* The initial text in the dropdown before keyup event */\n        this.initialText = 'Start typing to search';\n        /* The leading icon to display in fwc-textinput */\n        this.multiple = false;\n        /* Label passed to the fwc-text-input component */\n        this.dropdownHeight = '250px';\n        this.autofocus = false;\n    }\n    /* Build fwc-list-items */\n    buildListItem(item) {\n        this.controller._listItems.push(item.id);\n        const itemClasses = {\n            'list-item': true,\n            'item-selected': !!item.isSelected,\n            'item-error': !!item.isError,\n        };\n        const renderItemText = () => {\n            /* Geticonf for either meta or graphic slot */\n            const getIconSlot = (type) => {\n                if ((this[type] && this[type] !== 'check') || (item[type] && item[type] !== 'check')) {\n                    return html `<span class=\"slot-${type}\" slot=${type}>\n            <fwc-icon icon=${item[type] ? item[type] : this[type]}></fwc-icon>\n          </span>`;\n                }\n                return html ``;\n            };\n            /* title and subtitle slots */\n            const generateTextContent = () => {\n                const text = [];\n                if (item.title) {\n                    text.push(html `<span class=\"item-title\">${item.title}</span>`);\n                }\n                if (item.subTitle) {\n                    text.push(html `<span slot=\"secondary\" class=\"item-subtitle\">${item.subTitle}</span></span>`);\n                }\n                return text;\n            };\n            return html `${getIconSlot('graphic')}\n        <span class=\"item-text\">${generateTextContent()}</span>\n        ${getIconSlot('meta')}`;\n        };\n        const disabled = item.isDisabled || item.isError ? true : undefined;\n        const selected = item.isSelected ? true : undefined;\n        /* Sett checkmark on selected items */\n        if (item.meta === 'check') {\n            return html `<fwc-check-list-item\n        key=${item.id}\n        class=${classMap(itemClasses)}\n        disabled=${ifDefined(disabled)}\n        selected=${ifDefined(selected)}\n        twoline=${ifDefined(item.subTitle)}\n      >\n        ${renderItemText()}\n      </fwc-check-list-item>`;\n        }\n        return html `<fwc-list-item\n      key=${item.id}\n      class=${classMap(itemClasses)}\n      disabled=${ifDefined(disabled)}\n      selected=${ifDefined(selected)}\n      twoline=${ifDefined(item.subTitle)}\n    >\n      ${renderItemText()}\n    </fwc-list-item>`;\n    }\n    /**\n     * Render the menu if state is open\n     * @returns HTMLTemplateResult\n     */\n    renderList() {\n        if (!this.controller.isOpen) {\n            return html ``;\n        }\n        return html `<fwc-list @action=${this.controller.handleSelect} activatable=${true} multi=${this.multiple}>\n      ${this.controller.task.render({\n            complete: (result) => {\n                /*\n                 * clear previous render items.\n                 * we need to save rendered items in state to be able to select them by index from action event\n                 */\n                this.controller._listItems = [];\n                /* Loop over task result */\n                return result.map((item, index) => {\n                    var _a;\n                    if (item.type === 'section') {\n                        if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {\n                            const kids = item.children.map((i) => this.buildListItem(i));\n                            return html `\n                  <p key=${uuid()} class=\"section-title\">${item.title}</p>\n                  ${kids}\n                  ${index + 1 < result.length\n                                ? html `<fwc-divider key=${uuid()} variant=\"list\" color=\"medium\"></fwc-divider>`\n                                : html ``}\n                `;\n                        }\n                    }\n                    /* Divider after the selected items stored in controller */\n                    if (item.type === 'divider') {\n                        return html `<fwc-divider key=${item.id} variant=\"list\" color=\"medium\"></fwc-divider>`;\n                    }\n                    return this.buildListItem(item);\n                });\n            },\n            pending: () => html `<fwc-list-item disabled=${true}><fwc-dots-progress size=\"small\" color=\"primary\" /></fwc-list-item>`,\n            /* Error from resolvers searchQuery Promise */\n            error: (e) => html `<fwc-list-item disabled=${true} class=\"item-error\">\n            <span class=\"item-text\"><span class=\"item-title\">${e}</span></span>\n          </fwc-list-item>`,\n        })}\n    </fwc-list>`;\n    }\n    /**\n     * The main render function\n     * @returns HTMLTemplateResult\n     */\n    render() {\n        const dense = ['page-dense', 'header', 'header-filled'].indexOf(this.variant) > -1 ? true : undefined;\n        const variant = ['header', 'page-outlined'].indexOf(this.variant) > -1 ? 'outlined' : 'filled';\n        const cssClasses = {\n            'fwc-sdd': true,\n            'list-open': this.controller.isOpen,\n            dense: dense == true,\n            'variant-filled': variant === 'filled',\n            'variant-outlined': variant === 'outlined',\n        };\n        return html `<div id=${this.id} class=${classMap(cssClasses)}>\n        <div class=\"input\">\n          <slot name=\"leading\"></slot>\n          <fwc-textinput\n            label=${ifDefined(this.label)}\n            type=\"text\"\n            value=${this.value}\n            name=\"searchabledropdown\"\n            variant=${variant}\n            icon=${this.leadingIcon}\n            dense=${ifDefined(dense)}\n            placeholder=${this.placeholder}\n            @focus=${() => (this.controller.isOpen = true)}\n            @keyup=${this.controller.handleKeyup}\n          ></fwc-textinput>\n          <slot name=\"trailing\">\n            <span slot=\"trailing\">\n              <fwc-icon\n                class=\"trailing interactive\"\n                @click=${this.controller.closeClick}\n                icon=${this.trailingIcon}\n              ></fwc-icon>\n            </span>\n          </slot>\n        </div>\n        <div class=\"list\">\n          <div class=\"list-scroll\">${this.renderList()}</div>\n        </div>\n      </div>\n      <style>\n        input[name='eik']:focus {\n          background: red;\n        }\n        .list-scroll {\n          max-height: ${this.dropdownHeight};\n        }\n      </style>`;\n    }\n}\nSearchableDropdownElement.shadowRootOptions = Object.assign({}, Object.assign(LitElement.shadowRootOptions, { delegatesFocus: true }));\n/* style object css */\nSearchableDropdownElement.styles = [sddStyles];\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"label\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"placeholder\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"variant\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"leadingIcon\", void 0);\n__decorate([\n    property({ attribute: false, state: true })\n], SearchableDropdownElement.prototype, \"trailingIcon\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"meta\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"value\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"graphic\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"initialText\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"multiple\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"dropdownHeight\", void 0);\n__decorate([\n    property()\n], SearchableDropdownElement.prototype, \"autofocus\", void 0);\n__decorate([\n    query('fwc-textinput')\n], SearchableDropdownElement.prototype, \"textInputElement\", void 0);\nexport default SearchableDropdownElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-notched-outline/mwc-notched-outline.js';\nimport '@material/mwc-menu/mwc-menu.js';\nimport '@material/mwc-icon/mwc-icon.js';\nimport { KEY, normalizeKey } from '@material/dom/keyboard.js';\nimport * as typeahead from '@material/list/typeahead.js';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { isNodeElement } from '@material/mwc-base/utils.js';\nimport { floatingLabel } from '@material/mwc-floating-label/mwc-floating-label-directive.js';\nimport { lineRipple } from '@material/mwc-line-ripple/mwc-line-ripple-directive.js';\nimport MDCSelectFoundation from '@material/select/foundation.js';\nimport { html, nothing } from 'lit';\nimport { eventOptions, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nconst createValidityObj = (customValidity = {}) => {\n    /*\n     * We need to make ValidityState an object because it is readonly and\n     * we cannot use the spread operator. Also, we don't export\n     * `CustomValidityState` because it is a leaky implementation and the user\n     * already has access to `ValidityState` in lib.dom.ts. Also an interface\n     * {a: Type} can be casted to {readonly a: Type} so passing any object\n     * should be fine.\n     */\n    const objectifiedCustomValidity = {};\n    // eslint-disable-next-line guard-for-in\n    for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName] =\n            customValidity[propName];\n    }\n    return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);\n};\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires opened\n * @fires closed\n * @fires change\n * @fires invalid\n */\nexport class SelectBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCSelectFoundation;\n        this.disabled = false;\n        this.outlined = false;\n        this.label = '';\n        this.outlineOpen = false;\n        this.outlineWidth = 0;\n        this.value = '';\n        this.name = '';\n        this.selectedText = '';\n        this.icon = '';\n        this.menuOpen = false;\n        this.helper = '';\n        this.validateOnInitialRender = false;\n        this.validationMessage = '';\n        this.required = false;\n        this.naturalMenuWidth = false;\n        this.isUiValid = true;\n        this.fixedMenuPosition = false;\n        // Transiently holds current typeahead prefix from user.\n        this.typeaheadState = typeahead.initState();\n        this.sortedIndexByFirstChar = new Map();\n        this.menuElement_ = null;\n        this.listeners = [];\n        this.onBodyClickBound = () => undefined;\n        this._menuUpdateComplete = null;\n        this.valueSetDirectly = false;\n        this.validityTransform = null;\n        this._validity = createValidityObj();\n    }\n    get items() {\n        // memoize menuElement to prevent unnecessary querySelector calls.\n        if (!this.menuElement_) {\n            this.menuElement_ = this.menuElement;\n        }\n        if (this.menuElement_) {\n            return this.menuElement_.items;\n        }\n        return [];\n    }\n    get selected() {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n            return menuElement.selected;\n        }\n        return null;\n    }\n    get index() {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n            return menuElement.index;\n        }\n        return -1;\n    }\n    get shouldRenderHelperText() {\n        return !!this.helper || !!this.validationMessage;\n    }\n    get validity() {\n        this._checkValidity(this.value);\n        return this._validity;\n    }\n    render() {\n        const classes = {\n            'mdc-select--disabled': this.disabled,\n            'mdc-select--no-label': !this.label,\n            'mdc-select--filled': !this.outlined,\n            'mdc-select--outlined': this.outlined,\n            'mdc-select--with-leading-icon': !!this.icon,\n            'mdc-select--required': this.required,\n            'mdc-select--invalid': !this.isUiValid,\n        };\n        const labelledby = !!this.label ? 'label' : undefined;\n        const describedby = this.shouldRenderHelperText ? 'helper-text' : undefined;\n        return html `\n      <div\n          class=\"mdc-select ${classMap(classes)}\">\n        <input\n            class=\"formElement\"\n            name=\"${this.name}\"\n            .value=\"${this.value}\"\n            hidden\n            ?disabled=\"${this.disabled}\"\n            ?required=${this.required}>\n        <!-- @ts-ignore -->\n        <div class=\"mdc-select__anchor\"\n            aria-autocomplete=\"none\"\n            role=\"combobox\"\n            aria-expanded=${this.menuOpen}\n            aria-invalid=${!this.isUiValid}\n            aria-haspopup=\"listbox\"\n            aria-labelledby=${ifDefined(labelledby)}\n            aria-required=${this.required}\n            aria-describedby=${ifDefined(describedby)}\n            @click=${this.onClick}\n            @focus=${this.onFocus}\n            @blur=${this.onBlur}\n            @keydown=${this.onKeydown}>\n          ${this.renderRipple()}\n          ${this.outlined ? this.renderOutline() : this.renderLabel()}\n          ${this.renderLeadingIcon()}\n          <span class=\"mdc-select__selected-text-container\">\n            <span class=\"mdc-select__selected-text\">${this.selectedText}</span>\n          </span>\n          <span class=\"mdc-select__dropdown-icon\">\n            <svg\n                class=\"mdc-select__dropdown-icon-graphic\"\n                viewBox=\"7 10 10 5\"\n                focusable=\"false\">\n              <polygon\n                  class=\"mdc-select__dropdown-icon-inactive\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 10 12 15 17 10\">\n              </polygon>\n              <polygon\n                  class=\"mdc-select__dropdown-icon-active\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 15 12 10 17 15\">\n              </polygon>\n            </svg>\n          </span>\n          ${this.renderLineRipple()}\n        </div>\n        ${this.renderMenu()}\n      </div>\n      ${this.renderHelperText()}`;\n    }\n    renderMenu() {\n        const classes = this.getMenuClasses();\n        return html `\n      <mwc-menu\n        innerRole=\"listbox\"\n        wrapFocus\n        class=\" ${classMap(classes)}\"\n        activatable\n        .fullwidth=${this.fixedMenuPosition ? false : !this.naturalMenuWidth}\n        .open=${this.menuOpen}\n        .anchor=${this.anchorElement}\n        .fixed=${this.fixedMenuPosition}\n        @selected=${this.onSelected}\n        @opened=${this.onOpened}\n        @closed=${this.onClosed}\n        @items-updated=${this.onItemsUpdated}\n        @keydown=${this.handleTypeahead}>\n      ${this.renderMenuContent()}\n    </mwc-menu>`;\n    }\n    getMenuClasses() {\n        return {\n            'mdc-select__menu': true,\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-select__menu--invalid': !this.isUiValid,\n        };\n    }\n    renderMenuContent() {\n        return html `<slot></slot>`;\n    }\n    renderRipple() {\n        if (this.outlined) {\n            return nothing;\n        }\n        return html `\n      <span class=\"mdc-select__ripple\"></span>\n    `;\n    }\n    renderOutline() {\n        if (!this.outlined) {\n            return nothing;\n        }\n        return html `\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n    }\n    renderLabel() {\n        if (!this.label) {\n            return nothing;\n        }\n        return html `\n      <span\n          .floatingLabelFoundation=${floatingLabel(this.label)}\n          id=\"label\">${this.label}</span>\n    `;\n    }\n    renderLeadingIcon() {\n        if (!this.icon) {\n            return nothing;\n        }\n        return html `<mwc-icon class=\"mdc-select__icon\"><div>${this.icon}</div></mwc-icon>`;\n    }\n    renderLineRipple() {\n        if (this.outlined) {\n            return nothing;\n        }\n        return html `\n      <span .lineRippleFoundation=${lineRipple()}></span>\n    `;\n    }\n    renderHelperText() {\n        if (!this.shouldRenderHelperText) {\n            return nothing;\n        }\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        const classes = {\n            'mdc-select-helper-text--validation-msg': showValidationMessage,\n        };\n        return html `\n        <p\n          class=\"mdc-select-helper-text ${classMap(classes)}\"\n          id=\"helper-text\">${showValidationMessage ? this.validationMessage : this.helper}</p>`;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { activateBottomLine: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.activate();\n                }\n            }, deactivateBottomLine: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.deactivate();\n                }\n            }, hasLabel: () => {\n                return !!this.label;\n            }, floatLabel: (shouldFloat) => {\n                if (this.labelElement) {\n                    this.labelElement.floatingLabelFoundation.float(shouldFloat);\n                }\n            }, getLabelWidth: () => {\n                if (this.labelElement) {\n                    return this.labelElement.floatingLabelFoundation.getWidth();\n                }\n                return 0;\n            }, setLabelRequired: (isRequired) => {\n                if (this.labelElement) {\n                    this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n                }\n            }, hasOutline: () => this.outlined, notchOutline: (labelWidth) => {\n                const outlineElement = this.outlineElement;\n                if (outlineElement && !this.outlineOpen) {\n                    this.outlineWidth = labelWidth;\n                    this.outlineOpen = true;\n                }\n            }, closeOutline: () => {\n                if (this.outlineElement) {\n                    this.outlineOpen = false;\n                }\n            }, setRippleCenter: (normalizedX) => {\n                if (this.lineRippleElement) {\n                    const foundation = this.lineRippleElement.lineRippleFoundation;\n                    foundation.setRippleCenter(normalizedX);\n                }\n            }, notifyChange: async (value) => {\n                if (!this.valueSetDirectly && value === this.value) {\n                    return;\n                }\n                this.valueSetDirectly = false;\n                this.value = value;\n                await this.updateComplete;\n                const ev = new Event('change', { bubbles: true });\n                this.dispatchEvent(ev);\n            }, setSelectedText: (value) => this.selectedText = value, isSelectAnchorFocused: () => {\n                const selectAnchorElement = this.anchorElement;\n                if (!selectAnchorElement) {\n                    return false;\n                }\n                const rootNode = selectAnchorElement.getRootNode();\n                return rootNode.activeElement === selectAnchorElement;\n            }, getSelectAnchorAttr: (attr) => {\n                const selectAnchorElement = this.anchorElement;\n                if (!selectAnchorElement) {\n                    return null;\n                }\n                return selectAnchorElement.getAttribute(attr);\n            }, setSelectAnchorAttr: (attr, value) => {\n                const selectAnchorElement = this.anchorElement;\n                if (!selectAnchorElement) {\n                    return;\n                }\n                selectAnchorElement.setAttribute(attr, value);\n            }, removeSelectAnchorAttr: (attr) => {\n                const selectAnchorElement = this.anchorElement;\n                if (!selectAnchorElement) {\n                    return;\n                }\n                selectAnchorElement.removeAttribute(attr);\n            }, openMenu: () => {\n                this.menuOpen = true;\n            }, closeMenu: () => {\n                this.menuOpen = false;\n            }, addMenuClass: () => undefined, removeMenuClass: () => undefined, getAnchorElement: () => this.anchorElement, setMenuAnchorElement: () => {\n                /* Handled by anchor directive */\n            }, setMenuAnchorCorner: () => {\n                const menuElement = this.menuElement;\n                if (menuElement) {\n                    menuElement.corner = 'BOTTOM_START';\n                }\n            }, setMenuWrapFocus: (wrapFocus) => {\n                const menuElement = this.menuElement;\n                if (menuElement) {\n                    menuElement.wrapFocus = wrapFocus;\n                }\n            }, focusMenuItemAtIndex: (index) => {\n                const menuElement = this.menuElement;\n                if (!menuElement) {\n                    return;\n                }\n                const element = menuElement.items[index];\n                if (!element) {\n                    return;\n                }\n                element.focus();\n            }, getMenuItemCount: () => {\n                const menuElement = this.menuElement;\n                if (menuElement) {\n                    return menuElement.items.length;\n                }\n                return 0;\n            }, getMenuItemValues: () => {\n                const menuElement = this.menuElement;\n                if (!menuElement) {\n                    return [];\n                }\n                const items = menuElement.items;\n                return items.map((item) => item.value);\n            }, getMenuItemTextAtIndex: (index) => {\n                const menuElement = this.menuElement;\n                if (!menuElement) {\n                    return '';\n                }\n                const element = menuElement.items[index];\n                if (!element) {\n                    return '';\n                }\n                return element.text;\n            }, getSelectedIndex: () => this.index, setSelectedIndex: () => undefined, isTypeaheadInProgress: () => typeahead.isTypingInProgress(this.typeaheadState), typeaheadMatchItem: (nextChar, startingIndex) => {\n                if (!this.menuElement) {\n                    return -1;\n                }\n                const opts = {\n                    focusItemAtIndex: (index) => {\n                        this.menuElement.focusItemAtIndex(index);\n                    },\n                    focusedItemIndex: startingIndex ?\n                        startingIndex :\n                        this.menuElement.getFocusedItemIndex(),\n                    nextChar,\n                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n                    skipFocus: false,\n                    isItemAtIndexDisabled: (index) => this.items[index].disabled,\n                };\n                const index = typeahead.matchItem(opts, this.typeaheadState);\n                if (index !== -1) {\n                    this.select(index);\n                }\n                return index;\n            } });\n    }\n    checkValidity() {\n        const isValid = this._checkValidity(this.value);\n        if (!isValid) {\n            const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });\n            this.dispatchEvent(invalidEvent);\n        }\n        return isValid;\n    }\n    reportValidity() {\n        const isValid = this.checkValidity();\n        this.isUiValid = isValid;\n        return isValid;\n    }\n    _checkValidity(value) {\n        const nativeValidity = this.formElement.validity;\n        let validity = createValidityObj(nativeValidity);\n        if (this.validityTransform) {\n            const customValidity = this.validityTransform(value, validity);\n            validity = Object.assign(Object.assign({}, validity), customValidity);\n        }\n        this._validity = validity;\n        return this._validity.valid;\n    }\n    setCustomValidity(message) {\n        this.validationMessage = message;\n        this.formElement.setCustomValidity(message);\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        await this._menuUpdateComplete;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    async firstUpdated() {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n            this._menuUpdateComplete = menuElement.updateComplete;\n            await this._menuUpdateComplete;\n        }\n        super.firstUpdated();\n        this.mdcFoundation.isValid = () => true;\n        this.mdcFoundation.setValid = () => undefined;\n        this.mdcFoundation.setDisabled(this.disabled);\n        if (this.validateOnInitialRender) {\n            this.reportValidity();\n        }\n        // Select an option based on init value\n        if (!this.selected) {\n            if (!this.items.length && this.slotElement &&\n                this.slotElement.assignedNodes({ flatten: true }).length) {\n                // Shady DOM initial render fix\n                await new Promise((res) => requestAnimationFrame(res));\n                await this.layout();\n            }\n            const hasEmptyFirstOption = this.items.length && this.items[0].value === '';\n            if (!this.value && hasEmptyFirstOption) {\n                this.select(0);\n                return;\n            }\n            this.selectByValue(this.value);\n        }\n        this.sortedIndexByFirstChar = typeahead.initSortedIndex(this.items.length, (index) => this.items[index].text);\n    }\n    onItemsUpdated() {\n        this.sortedIndexByFirstChar = typeahead.initSortedIndex(this.items.length, (index) => this.items[index].text);\n    }\n    select(index) {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n            menuElement.select(index);\n        }\n    }\n    selectByValue(value) {\n        let indexToSelect = -1;\n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i];\n            if (item.value === value) {\n                indexToSelect = i;\n                break;\n            }\n        }\n        this.valueSetDirectly = true;\n        this.select(indexToSelect);\n        this.mdcFoundation.handleChange();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        for (const listener of this.listeners) {\n            listener.target.removeEventListener(listener.name, listener.cb);\n        }\n    }\n    focus() {\n        const focusEvt = new CustomEvent('focus');\n        const selectAnchorElement = this.anchorElement;\n        if (selectAnchorElement) {\n            selectAnchorElement.dispatchEvent(focusEvt);\n            selectAnchorElement.focus();\n        }\n    }\n    blur() {\n        const focusEvt = new CustomEvent('blur');\n        const selectAnchorElement = this.anchorElement;\n        if (selectAnchorElement) {\n            selectAnchorElement.dispatchEvent(focusEvt);\n            selectAnchorElement.blur();\n        }\n    }\n    onFocus() {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleFocus();\n        }\n    }\n    onBlur() {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleBlur();\n        }\n        const menuElement = this.menuElement;\n        if (menuElement && !menuElement.open) {\n            this.reportValidity();\n        }\n    }\n    onClick(evt) {\n        if (this.mdcFoundation) {\n            this.focus();\n            const targetClientRect = evt.target.getBoundingClientRect();\n            let xCoord = 0;\n            if ('touches' in evt) {\n                xCoord = evt.touches[0].clientX;\n            }\n            else {\n                xCoord = evt.clientX;\n            }\n            const normalizedX = xCoord - targetClientRect.left;\n            this.mdcFoundation.handleClick(normalizedX);\n        }\n    }\n    onKeydown(evt) {\n        const arrowUp = normalizeKey(evt) === KEY.ARROW_UP;\n        const arrowDown = normalizeKey(evt) === KEY.ARROW_DOWN;\n        if (arrowDown || arrowUp) {\n            const shouldSelectNextItem = arrowUp && this.index > 0;\n            const shouldSelectPrevItem = arrowDown && this.index < this.items.length - 1;\n            if (shouldSelectNextItem) {\n                this.select(this.index - 1);\n            }\n            else if (shouldSelectPrevItem) {\n                this.select(this.index + 1);\n            }\n            evt.preventDefault();\n            this.mdcFoundation.openMenu();\n            return;\n        }\n        this.mdcFoundation.handleKeydown(evt);\n    }\n    // must capture to run before list foundation captures event\n    handleTypeahead(event) {\n        if (!this.menuElement) {\n            return;\n        }\n        const focusedItemIndex = this.menuElement.getFocusedItemIndex();\n        const target = isNodeElement(event.target) ?\n            event.target :\n            null;\n        const isTargetListItem = target ? target.hasAttribute('mwc-list-item') : false;\n        const opts = {\n            event,\n            focusItemAtIndex: (index) => {\n                this.menuElement.focusItemAtIndex(index);\n            },\n            focusedItemIndex,\n            isTargetListItem,\n            sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n            isItemAtIndexDisabled: (index) => this.items[index].disabled,\n        };\n        typeahead.handleKeydown(opts, this.typeaheadState);\n    }\n    async onSelected(event) {\n        if (!this.mdcFoundation) {\n            await this.updateComplete;\n        }\n        this.mdcFoundation.handleMenuItemAction(event.detail.index);\n        const item = this.items[event.detail.index];\n        if (item) {\n            this.value = item.value;\n        }\n    }\n    onOpened() {\n        if (this.mdcFoundation) {\n            this.menuOpen = true;\n            this.mdcFoundation.handleMenuOpened();\n        }\n    }\n    onClosed() {\n        if (this.mdcFoundation) {\n            this.menuOpen = false;\n            this.mdcFoundation.handleMenuClosed();\n        }\n    }\n    setFormData(formData) {\n        if (this.name && this.selected !== null) {\n            formData.append(this.name, this.value);\n        }\n    }\n    async layout(updateItems = true) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.layout();\n        }\n        await this.updateComplete;\n        const menuElement = this.menuElement;\n        if (menuElement) {\n            menuElement.layout(updateItems);\n        }\n        const labelElement = this.labelElement;\n        if (!labelElement) {\n            this.outlineOpen = false;\n            return;\n        }\n        const shouldFloat = !!this.label && !!this.value;\n        labelElement.floatingLabelFoundation.float(shouldFloat);\n        if (!this.outlined) {\n            return;\n        }\n        this.outlineOpen = shouldFloat;\n        await this.updateComplete;\n        /* When the textfield automatically notches due to a value and label\n         * being defined, the textfield may be set to `display: none` by the user.\n         * this means that the notch is of size 0px. We provide this function so\n         * that the user may manually resize the notch to the floated label's\n         * width.\n         */\n        const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n        if (this.outlineOpen) {\n            this.outlineWidth = labelWidth;\n        }\n    }\n    async layoutOptions() {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        this.mdcFoundation.layoutOptions();\n    }\n}\n__decorate([\n    query('.mdc-select')\n], SelectBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('.formElement')\n], SelectBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('slot')\n], SelectBase.prototype, \"slotElement\", void 0);\n__decorate([\n    query('select')\n], SelectBase.prototype, \"nativeSelectElement\", void 0);\n__decorate([\n    query('input')\n], SelectBase.prototype, \"nativeInputElement\", void 0);\n__decorate([\n    query('.mdc-line-ripple')\n], SelectBase.prototype, \"lineRippleElement\", void 0);\n__decorate([\n    query('.mdc-floating-label')\n], SelectBase.prototype, \"labelElement\", void 0);\n__decorate([\n    query('mwc-notched-outline')\n], SelectBase.prototype, \"outlineElement\", void 0);\n__decorate([\n    query('.mdc-menu')\n], SelectBase.prototype, \"menuElement\", void 0);\n__decorate([\n    query('.mdc-select__anchor')\n], SelectBase.prototype, \"anchorElement\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disabled', reflect: true }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setDisabled(value);\n        }\n    })\n], SelectBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.outlined !== oldVal) {\n            this.layout(false);\n        }\n    })\n], SelectBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.label !== oldVal) {\n            this.layout(false);\n        }\n    })\n], SelectBase.prototype, \"label\", void 0);\n__decorate([\n    state()\n], SelectBase.prototype, \"outlineOpen\", void 0);\n__decorate([\n    state()\n], SelectBase.prototype, \"outlineWidth\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            const initialization = this.selected === null && !!value;\n            const valueSetByUser = this.selected && this.selected.value !== value;\n            if (initialization || valueSetByUser) {\n                this.selectByValue(value);\n            }\n            this.reportValidity();\n        }\n    })\n], SelectBase.prototype, \"value\", void 0);\n__decorate([\n    property()\n], SelectBase.prototype, \"name\", void 0);\n__decorate([\n    state()\n], SelectBase.prototype, \"selectedText\", void 0);\n__decorate([\n    property({ type: String })\n], SelectBase.prototype, \"icon\", void 0);\n__decorate([\n    state()\n], SelectBase.prototype, \"menuOpen\", void 0);\n__decorate([\n    property({ type: String })\n], SelectBase.prototype, \"helper\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SelectBase.prototype, \"validateOnInitialRender\", void 0);\n__decorate([\n    property({ type: String })\n], SelectBase.prototype, \"validationMessage\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SelectBase.prototype, \"required\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SelectBase.prototype, \"naturalMenuWidth\", void 0);\n__decorate([\n    state()\n], SelectBase.prototype, \"isUiValid\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SelectBase.prototype, \"fixedMenuPosition\", void 0);\n__decorate([\n    eventOptions({ capture: true })\n], SelectBase.prototype, \"handleTypeahead\", null);\n//# sourceMappingURL=mwc-select-base.js.map","import { SelectBase } from '@material/mwc-select/mwc-select-base';\nimport { html } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { styles } from '@material/mwc-select/mwc-select.css';\nimport '@equinor/fusion-wc-menu';\nexport class SelectElement extends SelectBase {\n    render() {\n        const classes = {\n            'mdc-select--disabled': this.disabled,\n            'mdc-select--no-label': !this.label,\n            'mdc-select--filled': !this.outlined,\n            'mdc-select--outlined': this.outlined,\n            'mdc-select--with-leading-icon': !!this.icon,\n            'mdc-select--required': this.required,\n            'mdc-select--invalid': !this.isUiValid,\n        };\n        const labelledby = this.label ? 'label' : undefined;\n        const describedby = this.shouldRenderHelperText ? 'helper-text' : undefined;\n        return html ` <div class=\"mdc-select ${classMap(classes)}\">\n        <input\n          class=\"formElement\"\n          name=\"${this.name}\"\n          .value=\"${this.value}\"\n          hidden\n          ?disabled=\"${this.disabled}\"\n          ?required=${this.required}\n        />\n        <!-- @ts-ignore -->\n        <div\n          class=\"mdc-select__anchor\"\n          aria-autocomplete=\"none\"\n          role=\"combobox\"\n          aria-expanded=${this.menuOpen}\n          aria-invalid=${!this.isUiValid}\n          aria-haspopup=\"listbox\"\n          aria-labelledby=${ifDefined(labelledby)}\n          aria-required=${this.required}\n          aria-describedby=${ifDefined(describedby)}\n          @click=${this.onClick}\n          @focus=${this.onFocus}\n          @blur=${this.onBlur}\n          @keydown=${this.onKeydown}\n        >\n          ${this.renderRipple()} ${this.outlined ? this.renderOutline() : this.renderLabel()}\n          ${this.renderLeadingIcon()}\n          <span class=\"mdc-select__selected-text-container\">\n            <span class=\"mdc-select__selected-text\">${this.selectedText}</span>\n          </span>\n          <span class=\"mdc-select__dropdown-icon\">\n            <svg class=\"mdc-select__dropdown-icon-graphic\" viewBox=\"7 10 10 5\" focusable=\"false\">\n              <polygon\n                class=\"mdc-select__dropdown-icon-inactive\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 10 12 15 17 10\"\n              ></polygon>\n              <polygon\n                class=\"mdc-select__dropdown-icon-active\"\n                stroke=\"none\"\n                fill-rule=\"evenodd\"\n                points=\"7 15 12 10 17 15\"\n              ></polygon>\n            </svg>\n          </span>\n          ${this.renderLineRipple()}\n        </div>\n        ${this.renderMenu()}\n      </div>\n      ${this.renderHelperText()}`;\n    }\n    renderMenu() {\n        const menuClasses = {\n            'mdc-select__menu--invalid': !this.isUiValid,\n        };\n        return html `<fwc-menu\n      innerRole=\"listbox\"\n      wrapFocus\n      class=\"mdc-select__menu mdc-menu mdc-menu-surface ${classMap(menuClasses)}\"\n      activatable\n      .fullwidth=${this.fixedMenuPosition ? false : !this.naturalMenuWidth}\n      .open=${this.menuOpen}\n      .anchor=${this.anchorElement}\n      .fixed=${this.fixedMenuPosition}\n      @selected=${this.onSelected}\n      @opened=${this.onOpened}\n      @closed=${this.onClosed}\n      @items-updated=${this.onItemsUpdated}\n      @keydown=${this.handleTypeahead}\n    >\n      <slot></slot>\n    </fwc-menu>`;\n    }\n}\nSelectElement.styles = styles;\nexport default SelectElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: block;\n    position: relative;\n    overflow: hidden;\n    --fwc-skeleton-fill-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n    --fwc-skeleton-ink-color: ${unsafeCSS(theme.colors.interactive.disabled__text.getVariable('color'))};\n    background-color: var(--fwc-skeleton-fill-color);\n  }\n  :host([variant='rectangle']) {\n    border-radius: 0.25rem;\n  }\n  :host([variant='rectangle'][size='x-small']) {\n    height: 1.25rem;\n    font-size: 0.625rem;\n    line-height: 1.25rem;\n  }\n  :host([variant='rectangle'][size='x-small']:not([fluid])) {\n    width: 3rem;\n  }\n  :host([variant='rectangle'][size='small']) {\n    height: 2.5rem;\n    font-size: 1.25rem;\n    line-height: 2.5rem;\n  }\n  :host([variant='rectangle'][size='small']:not([fluid])) {\n    width: 5rem;\n  }\n  :host([variant='rectangle'][size='medium']) {\n    height: 5rem;\n    font-size: 3rem;\n    line-height: 5rem;\n  }\n  :host([variant='rectangle'][size='medium']:not([fluid])) {\n    width: 10rem;\n  }\n  :host([variant='rectangle'][size='large']) {\n    height: 7.5rem;\n    font-size: 5rem;\n    line-height: 7.5rem;\n  }\n  :host([variant='rectangle'][size='large']:not([fluid])) {\n    width: 15rem;\n  }\n  :host([variant='square']) {\n    border-radius: 0.25rem;\n  }\n  :host([variant='square'][size='x-small']) {\n    height: 1.25rem;\n    font-size: 0.625rem;\n    line-height: 1.25rem;\n  }\n  :host([variant='square'][size='x-small']:not([fluid])) {\n    width: 1.25rem;\n  }\n  :host([variant='square'][size='small']) {\n    height: 2.5rem;\n    font-size: 1.25rem;\n    line-height: 2.5rem;\n  }\n  :host([variant='square'][size='small']:not([fluid])) {\n    width: 2.5rem;\n  }\n  :host([variant='square'][size='medium']) {\n    height: 5rem;\n    font-size: 3rem;\n    line-height: 5rem;\n  }\n  :host([variant='square'][size='medium']:not([fluid])) {\n    width: 5rem;\n  }\n  :host([variant='square'][size='large']) {\n    height: 7.5rem;\n    font-size: 5rem;\n    line-height: 7.5rem;\n  }\n  :host([variant='square'][size='large']:not([fluid])) {\n    width: 7.5rem;\n  }\n  :host([variant='text']) {\n    border-radius: 0.25rem;\n  }\n  :host([variant='text'][size='x-small']) {\n    height: 1em;\n    line-height: 1em;\n  }\n  :host([variant='text'][size='x-small']:not([fluid])) {\n    width: 5rem;\n  }\n  :host([variant='text'][size='small']) {\n    height: 1em;\n    line-height: 1em;\n  }\n  :host([variant='text'][size='small']:not([fluid])) {\n    width: 10rem;\n  }\n  :host([variant='text'][size='medium']) {\n    height: 1em;\n    line-height: 1em;\n  }\n  :host([variant='text'][size='medium']:not([fluid])) {\n    width: 20rem;\n  }\n  :host([variant='text'][size='large']) {\n    height: 1em;\n    line-height: 1em;\n  }\n  :host([variant='text'][size='large']:not([fluid])) {\n    width: 30rem;\n  }\n  :host([fluid]:not([variant='circle'])) {\n    width: 100%;\n  }\n  :host([fluid][variant='circle']) {\n    height: auto;\n  }\n  :host([variant='circle']) {\n    border-radius: 50%;\n  }\n  :host([variant='circle'][size='x-small']) {\n    width: 1.25rem;\n    height: 1.25rem;\n    font-size: 0.625rem;\n    line-height: 1.25rem;\n  }\n  :host([variant='circle'][size='small']) {\n    width: 2rem;\n    height: 2rem;\n    font-size: 1rem;\n    line-height: 2rem;\n  }\n  :host([variant='circle'][size='medium']) {\n    width: 3.5rem;\n    height: 3.5rem;\n    font-size: 2rem;\n    line-height: 3.5rem;\n  }\n  :host([variant='circle'][size='large']) {\n    width: 5rem;\n    height: 5rem;\n    font-size: 3rem;\n    line-height: 5rem;\n  }\n  :host(:not([inactive])):after {\n    background-image: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);\n    animation: 1.6s linear 0.5s infinite normal none running fwc-skeleton__animation-shine;\n    content: '';\n    position: absolute;\n    transform: translateX(-100%);\n    inset: 0px;\n  }\n  .fwc-skeleton__icon {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: var(--fwc-skeleton-ink-color);\n    font-size: 0.875em;\n  }\n  :host([variant='text']) .fwc-skeleton__icon {\n    justify-content: left;\n  }\n  :host(:not([variant='text'])) .fwc-skeleton__icon {\n    justify-content: center;\n  }\n  @keyframes fwc-skeleton__animation-shine {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { SkeletonSize, SkeletonVariant } from './types';\nimport Icon from '@equinor/fusion-wc-icon';\nimport style from './element.css';\n// Persist element\nIcon;\n/**\n * Element for rendering pending state placeholders for components.\n * {@inheritdoc}\n *\n * @tag fwc-skeleton\n *\n * @property {SkeletonSize} size - Sets the size of the skeleton element.\n * @property {SkeletonVariant} variant - Sets the skeleton element variant to render.\n * @property {boolean} inactive - Disables the skeleton element active animation.\n * @property {boolean} fluid - Sets the width of the element to fill the parent width.\n * @property {boolean} icon - Sets the name of an icon to be rendered within the component.\n *\n * @cssprop {theme.colors.interactive.disabled__fill} --fwc-skeleton-fill-color - background color of the element.\n * @cssprop {theme.colors.interactive.disabled__text} --fwc-skeleton-ink-color - text color of the element.\n *\n * Icons can be slotted in with a slot named 'icon'.\n */\nexport class SkeletonElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the skeleton element.\n         * @default medium\n         */\n        this.size = SkeletonSize.Medium;\n        /**\n         * Variant of the skeleton element.\n         * @default rectangle\n         */\n        this.variant = SkeletonVariant.Rectangle;\n    }\n    /**\n     * Renders the icon provided by icon name or the slotted icon\n     */\n    renderIcon() {\n        if (this.variant === 'text') {\n            return html ``;\n        }\n        const icon = this.icon ? html `<fwc-icon icon=${ifDefined(this.icon)}></fwc-icon>` : undefined;\n        return html `<slot class=\"fwc-skeleton__icon\" name=\"icon\">${icon}</slot>`;\n    }\n    /** {@inheritDoc} */\n    render() {\n        return html `<span>${this.renderIcon()}</span>`;\n    }\n}\nSkeletonElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], SkeletonElement.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], SkeletonElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], SkeletonElement.prototype, \"inactive\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], SkeletonElement.prototype, \"fluid\", void 0);\n__decorate([\n    property({ type: String })\n], SkeletonElement.prototype, \"icon\", void 0);\nexport default SkeletonElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --fwc-skeleton-wrapper-spacing: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    display: flex;\n    gap: var(--fwc-skeleton-wrapper-spacing);\n  }\n  :host([direction='horizontal']) {\n    flex-direction: row;\n  }\n  :host([direction='vertical']) {\n    flex-direction: column;\n  }\n  :host([spacing='small']) {\n    --fwc-skeleton-wrapper-spacing: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([spacing='medium']) {\n    --fwc-skeleton-wrapper-spacing: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([spacing='large']) {\n    --fwc-skeleton-wrapper-spacing: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SkeletonSpacing, SkeletonDirection } from './types';\nimport style from './element.css';\n/**\n * Wrapper element for combining skeleton elements.\n * {@inheritdoc}\n *\n * @tag fwc-skeleton-wrapper\n *\n * @property {SkeletonSpacing} spacing - Sets the spacing between the skeleton child elements.\n * @property {SkeletonDirection} direction - Sets direction to flex the skeleton child elements.\n *\n * @cssprop {theme.spacing.comfortable.medium} --fwc-skeleton-wrapper-spacing - gap spacing between the child elements.\n */\nexport class SkeletonWrapperElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Spacing between the skeleton elements.\n         */\n        this.spacing = SkeletonSpacing.Medium;\n        /**\n         * Direction to flex the skeleton elements.\n         */\n        this.direction = SkeletonDirection.Horizontal;\n    }\n    /** {@inheritDoc} */\n    render() {\n        return html `<slot></slot>`;\n    }\n}\nSkeletonWrapperElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], SkeletonWrapperElement.prototype, \"spacing\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], SkeletonWrapperElement.prototype, \"direction\", void 0);\nexport default SkeletonWrapperElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { MDCSwitchFoundation } from '@material/switch/foundation.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nexport class SwitchBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        // MDCSwitchState\n        this.processing = false;\n        this.selected = false;\n        // Aria\n        /** @soyPrefixAttribute */\n        this.ariaLabel = '';\n        /** @soyPrefixAttribute */\n        this.ariaLabelledBy = '';\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n        // FormElement\n        this.name = '';\n        this.value = 'on';\n        this.mdcFoundationClass = MDCSwitchFoundation;\n    }\n    setFormData(formData) {\n        if (this.name && this.selected) {\n            formData.append(this.name, this.value);\n        }\n    }\n    click() {\n        var _a, _b;\n        // Switch uses a hidden input as its form element, but a different <button>\n        // for interaction. It overrides click() from FormElement to avoid clicking\n        // the hidden input.\n        if (this.disabled) {\n            return;\n        }\n        (_a = this.mdcRoot) === null || _a === void 0 ? void 0 : _a.focus();\n        (_b = this.mdcRoot) === null || _b === void 0 ? void 0 : _b.click();\n    }\n    /** @soyTemplate */\n    render() {\n        return html `\n      <button\n        type=\"button\"\n        class=\"mdc-switch ${classMap(this.getRenderClasses())}\"\n        role=\"switch\"\n        aria-checked=\"${this.selected}\"\n        aria-label=\"${ifDefined(this.ariaLabel || undefined)}\"\n        aria-labelledby=\"${ifDefined(this.ariaLabelledBy || undefined)}\"\n        .disabled=${this.disabled}\n        @click=${this.handleClick}\n        @focus=\"${this.handleFocus}\"\n        @blur=\"${this.handleBlur}\"\n        @pointerdown=\"${this.handlePointerDown}\"\n        @pointerup=\"${this.handlePointerUp}\"\n        @pointerenter=\"${this.handlePointerEnter}\"\n        @pointerleave=\"${this.handlePointerLeave}\"\n      >\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__handle-track\">\n          ${this.renderHandle()}\n        </div>\n      </button>\n\n      <input\n        type=\"checkbox\"\n        aria-hidden=\"true\"\n        name=\"${this.name}\"\n        .checked=${this.selected}\n        .value=${this.value}\n      >\n    `;\n    }\n    /** @soyTemplate */\n    getRenderClasses() {\n        return {\n            'mdc-switch--processing': this.processing,\n            'mdc-switch--selected': this.selected,\n            'mdc-switch--unselected': !this.selected,\n        };\n    }\n    /** @soyTemplate */\n    renderHandle() {\n        return html `\n      <div class=\"mdc-switch__handle\">\n        ${this.renderShadow()}\n        ${this.renderRipple()}\n        <div class=\"mdc-switch__icons\">\n          ${this.renderOnIcon()}\n          ${this.renderOffIcon()}\n        </div>\n      </div>\n    `;\n    }\n    /** @soyTemplate */\n    renderShadow() {\n        return html `\n      <div class=\"mdc-switch__shadow\">\n        <div class=\"mdc-elevation-overlay\"></div>\n      </div>\n    `;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        if (this.shouldRenderRipple) {\n            return html `\n        <div class=\"mdc-switch__ripple\">\n          <mwc-ripple\n            internalUseStateLayerCustomProperties\n            .disabled=\"${this.disabled}\"\n            unbounded>\n          </mwc-ripple>\n        </div>\n      `;\n        }\n        else {\n            return html ``;\n        }\n    }\n    /** @soyTemplate */\n    renderOnIcon() {\n        return html `\n      <svg class=\"mdc-switch__icon mdc-switch__icon--on\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n      </svg>\n    `;\n    }\n    /** @soyTemplate */\n    renderOffIcon() {\n        return html `\n      <svg class=\"mdc-switch__icon mdc-switch__icon--off\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 13H4v-2h16v2z\" />\n      </svg>\n    `;\n    }\n    handleClick() {\n        var _a;\n        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleClick();\n    }\n    handleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    handlePointerDown(event) {\n        event.target.setPointerCapture(event.pointerId);\n        this.rippleHandlers.startPress(event);\n    }\n    handlePointerUp() {\n        this.rippleHandlers.endPress();\n    }\n    handlePointerEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handlePointerLeave() {\n        this.rippleHandlers.endHover();\n    }\n    createAdapter() {\n        return { state: this };\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], SwitchBase.prototype, \"processing\", void 0);\n__decorate([\n    property({ type: Boolean })\n], SwitchBase.prototype, \"selected\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], SwitchBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-labelledby' })\n], SwitchBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], SwitchBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], SwitchBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], SwitchBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], SwitchBase.prototype, \"value\", void 0);\n__decorate([\n    query('input')\n], SwitchBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('.mdc-switch')\n], SwitchBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], SwitchBase.prototype, \"handlePointerDown\", null);\n//# sourceMappingURL=mwc-switch-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    --mdc-switch-selected-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-focus-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-pressed-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-hover-track-color: ${unsafeCSS(theme.colors.interactive.primary__selected_highlight.getVariable('color'))};\n    --mdc-switch-selected-hover-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-selected-focus-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-selected-pressed-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-hover-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-focus-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-switch-unselected-pressed-handle-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { SwitchBase } from '@material/mwc-switch/mwc-switch-base';\nimport { styles as mdcStyle } from '@material/mwc-switch/styles.css';\nimport style from './element.css';\nexport class SwitchElement extends SwitchBase {\n}\nSwitchElement.styles = [mdcStyle, style];\nexport default SwitchElement;\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { TextFieldBase } from '@material/mwc-textfield/mwc-textfield-base.js';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nconst booleanOrStringConverter = {\n    fromAttribute(value) {\n        if (value === null) {\n            return false;\n        }\n        else if (value === '') {\n            return true;\n        }\n        return value;\n    },\n    toAttribute(value) {\n        if (typeof value === 'boolean') {\n            return value ? '' : null;\n        }\n        return value;\n    }\n};\n/** @soyCompatible */\nexport class TextAreaBase extends TextFieldBase {\n    constructor() {\n        super(...arguments);\n        this.rows = 2;\n        this.cols = 20;\n        this.charCounter = false;\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n        const shouldRenderInternalCharCounter = shouldRenderCharCounter && this.charCounter === 'internal';\n        const shouldRenderExternalCharCounter = shouldRenderCharCounter && !shouldRenderInternalCharCounter;\n        const shouldRenderHelperText = !!this.helper || !!this.validationMessage ||\n            shouldRenderExternalCharCounter;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field--disabled': this.disabled,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--filled': !this.outlined,\n            'mdc-text-field--outlined': this.outlined,\n            'mdc-text-field--end-aligned': this.endAligned,\n            'mdc-text-field--with-internal-counter': shouldRenderInternalCharCounter,\n        };\n        return html `\n      <label class=\"mdc-text-field mdc-text-field--textarea ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderInput()}\n        ${this.renderCharCounter(shouldRenderInternalCharCounter)}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderExternalCharCounter)}\n    `;\n    }\n    /** @soyTemplate */\n    renderInput() {\n        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n        const autocapitalizeOrUndef = this.autocapitalize ?\n            this.autocapitalize :\n            undefined;\n        return html `\n      <textarea\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          class=\"mdc-text-field__input\"\n          .value=\"${live(this.value)}\"\n          rows=\"${this.rows}\"\n          cols=\"${this.cols}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @blur=\"${this.onInputBlur}\">\n      </textarea>`;\n    }\n}\n__decorate([\n    query('textarea')\n], TextAreaBase.prototype, \"formElement\", void 0);\n__decorate([\n    property({ type: Number })\n], TextAreaBase.prototype, \"rows\", void 0);\n__decorate([\n    property({ type: Number })\n], TextAreaBase.prototype, \"cols\", void 0);\n__decorate([\n    property({ converter: booleanOrStringConverter })\n], TextAreaBase.prototype, \"charCounter\", void 0);\n//# sourceMappingURL=mwc-textarea-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-textfield/mwc-textfield.css';\nexport const attributes = css `\n  :host {\n    --fwc-text-field-base-color: ${unsafeCSS(theme.colors.text.static_icons__tertiary.getVariable('color'))};\n    --fwc-text-field-fill-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-text-field-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n    --fwc-text-field-disabled-ink-color: ${unsafeCSS(theme.colors.text.static_icons__default.getVariable('color'))};\n  }\n`;\nexport const mdcOverride = css `\n  :host {\n    --mdc-text-field-idle-line-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-hover-line-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-disabled-line-color: transparent;\n    --mdc-text-field-outlined-idle-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-outlined-hover-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-outlined-disabled-border-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-fill-color: var(--fwc-text-field-fill-color);\n    --mdc-text-field-disabled-fill-color: var(--fwc-text-field-fill-color);\n    --mdc-text-field-ink-color: var(--fwc-text-field-ink-color);\n    --mdc-text-field-label-ink-color: var(--fwc-text-field-base-color);\n    --mdc-text-field-disabled-ink-color: var(--fwc-text-field-disabled-ink-color);\n  }\n`;\nexport const dense = css `\n  :host([dense]) {\n    --textinput-dense-size: 32px;\n  }\n\n  :host([dense]) .mdc-text-field__icon {\n    font-size: calc(var(--textinput-dense-size) / 2.5);\n    padding: 0;\n  }\n\n  :host([dense]) .mdc-text-field__input {\n    height: calc(var(--textinput-dense-size) * 1.1);\n    font-size: calc(var(--textinput-dense-size) / 2);\n  }\n\n  :host([dense]) .mdc-text-field__icon--leading {\n    margin: 0;\n    padding-right: 4px;\n  }\n\n  :host([dense]) .mdc-text-field--outlined,\n  :host([dense]) .mdc-text-field--filled {\n    height: var(--textinput-dense-size);\n    padding: 0 calc(var(--textinput-dense-size) / 4);\n  }\n\n  :host([dense]) .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label {\n    left: calc(var(--textinput-dense-size) / 2);\n  }\n  :host([dense]) .mdc-text-field--outlined .mdc-floating-label--float-above {\n    transform: translateY(calc(var(--textinput-dense-size) * -0.75)) scale(1);\n  }\n  :host([dense]) .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above {\n    transform: translateY(calc(var(--textinput-dense-size) * -0.75))\n      translateX(calc(var(--textinput-dense-size) * -0.4)) scale(1);\n  }\n\n  :host([dense]) .mdc-text-field--filled .mdc-floating-label {\n    left: 8px;\n  }\n  :host([dense]) .mdc-text-field--filled.mdc-text-field--with-leading-icon .mdc-floating-label {\n    left: var(--textinput-dense-size);\n  }\n  :host([dense]) .mdc-text-field--filled:before {\n    height: calc(var(--textinput-dense-size) / 2);\n  }\n  :host([dense]) .mdc-text-field--filled .mdc-floating-label--float-above {\n    transform: translateY(calc(var(--textinput-dense-size) * -0.55)) scale(0.75);\n  }\n`;\nconst search = css `\n  input[type='search']::-webkit-search-cancel-button {\n    -webkit-appearance: none;\n    height: 1em;\n    width: 1em;\n    margin-left: 0.25em;\n    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23777'><path d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>\");\n    cursor: pointer;\n  }\n`;\nexport const styles = [mdcStyle, mdcOverride, attributes, dense, search];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { TextFieldBase } from '@material/mwc-textfield/mwc-textfield-base';\nimport { styles } from './element.css';\nimport('@equinor/fusion-wc-icon');\n/**\n * Follows the basic `<input>` [constraint validation model](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation).\n * It exposes:\n *\n * * required\n * * maxLength\n * * pattern\n * * min\n * * max\n * * step\n * * validity\n * * willValidate\n * * checkValidity()\n * * reportValidity()\n * * setCustomValidity(message)\n *\n * Additionally, it implements more features such as:\n *\n * * validationMessage\n * * validateOnInitialRender\n * * validityTransform\n *\n * The element will report validation on `blur`.\n *\n * @tag fwc-textinput\n * @property {string} name - should only be used for browser autofill as webcomponent form participation does not currently consider the `name` attribute. See [#289](https://github.com/material-components/material-components-web-components/issues/289).\n * @property {string} value - The input control's value.\n * @property {text|search|tel|url|email|password|date|month|week|time|datetime-local|number|color} type - A string specifying the type of control to render.\n * @property {filled|outlined} variant - Input style variant to render\n * @property {string} label - Sets floating label value\n * @property {string} placeholder - Sets disappearing input placeholder\n * @property {string} prefix - Prefix text to display before the input\n * @property {string} suffix - Suffix text to display after the input\n * @property {boolean} disabled - Whether or not the input should be disabled\n * @property {boolean|\"external\"|\"internal\"} charCounter - Display character counter with max length. **Note: requries `maxLength` to be set.**\n * @property {string} helper - Helper text to display below the input. Display default only when focused\n * @property {boolean} helperPersistent - Always show the helper text despite focus\n * @property {number} maxLength - Maximum length to accept input\n * @property {string} validationMessage - Message to show in the error color when the input is invalid _(Helper text will not be visible)_\n * @property {string} pattern - [`HTMLInputElement.prototype.pattern`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} min - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} max - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number|string} step - [`HTMLInputElement.prototype.min`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes) _(empty string will unset attribute)_\n * @property {number} size - [`HTMLInputElement.prototype.size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefsize) _(null will unset attribute)_\n * @property {boolean} autoValidate - Reports validity on value change rather than only on blur\n * @property {ValidityState} validity - The [`ValidityState`](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) of the input **readonly**\n * @property {boolean} willValidate - [`HTMLInputElement.prototype.willValidate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties) **readonly**\n * @property {boolean} validateOnInitialRender - Runs validation check on initial render\n * @property {(value: string, nativeValidity: ValidityState) => Partial<ValidityState>} validityTransform - Callback called before each validation check. See the [validation section](#Validation) for more details.\n *\n * @cssprop {theme.colors.text.static_icons__tertiary} --fwc-text-field-base-color - base color of the element\n * @cssprop {theme.colors.ui.background__light} --fwc-text-field-fill-color - background color of element\n * @cssprop {theme.colors.text.static_icons__default} --fwc-text-field-ink-color -  Text color\n * @cssprop {theme.colors.text.static_icons__default} --fwc-text-field-disabled-ink-color - Text color when disabled\n *\n * @fires change - When the focus is removed from the element\n * @fires input - When the value of the element changes\n * @fires invalid - When the validation of element fails\n *\n * @summary Enhanced input element, based on [Material Web Component](https://github.com/material-components/material-components-web-components/tree/master/packages/textfield)\n */\nexport class TextInputElement extends TextFieldBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Input style variant to render.\n         */\n        this.variant = 'filled';\n        /**\n         * Sets provided message as custom validity and displays it.\n         */\n        this.errorMessage = '';\n    }\n    /**\n     * Returns `true` if the textinput passes validity checks. Returns `false` and fires an [`invalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event) event on the textinput otherwise.\n     *\n     * **NOTE:** When accessing any property or function that checks validity at textinput initial boot up, you may have to await `<fwc-textinput>.updateComplete`.\n     */\n    checkValidity() {\n        return super.checkValidity();\n    }\n    /**\n     * Runs `checkValidity()` method, and if it returns false, then it reports to the user that the input is invalid.\n     */\n    reportValidity() {\n        return super.reportValidity();\n    }\n    /**\n     * Reset validity of element\n     */\n    clearValidity() {\n        this.mdcFoundation.setValid(true);\n        this.isUiValid = true;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            switch (this.variant) {\n                case 'filled': {\n                    this.outlined = false;\n                    break;\n                }\n                case 'outlined': {\n                    this.outlined = true;\n                    break;\n                }\n            }\n            this.requestUpdate();\n        }\n        if (changedProperties.has('errorMessage')) {\n            this.setCustomValidity(this.errorMessage);\n            this.errorMessage && this.clearValidity();\n            this.reportValidity();\n        }\n    }\n    /** {@inheritDoc} */\n    renderIcon(icon, isTrailingIcon = false) {\n        return html `<fwc-icon\n      icon=${icon}\n      isTrailingIcon=${isTrailingIcon}\n      textInput\n      class=\"mdc-text-field__icon ${isTrailingIcon\n            ? 'mdc-text-field__icon--trailing'\n            : 'mdc-text-field__icon--leading'}\"\n    ></fwc-icon>`;\n    }\n}\n__decorate([\n    property({ type: String })\n], TextInputElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: String })\n], TextInputElement.prototype, \"errorMessage\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], TextInputElement.prototype, \"dense\", void 0);\nTextInputElement.styles = styles;\nexport default TextInputElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  ::slotted(*) {\n    --fwc-ripple-color: #000;\n    --fwc-ripple-hover-opacity: 0.1;\n    --fwc-theme-background: #fff;\n    --fwc-theme-primary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-theme-error: ${unsafeCSS(theme.colors.interactive.danger__text.getVariable('color'))};\n    --fwc-theme-on-primary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --fwc-theme-on-secondary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --fwc-theme-on-surface: ${unsafeCSS(theme.colors.text.static_icons__secondary.getVariable('color'))};\n    --fwc-theme-secondary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-theme-surface: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-typography-font-family: ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontFamily'))},\n      sans-serif;\n\n    --mdc-ripple-color: var(--fwc-ripple-color);\n    --mdc-ripple-hover-opacity: var(--fwc-ripple-hover-opacity);\n    --mdc-theme-background: var(--fwc-theme-background);\n    --mdc-theme-primary: var(--fwc-theme-primary);\n    --mdc-theme-error: var(--fwc-theme-error);\n    --mdc-theme-on-primary: var(--fwc-theme-on-primary);\n    --mdc-theme-on-secondary: var(--fwc-theme-on-secondary);\n    --mdc-theme-on-surface: var(--fwc-theme-on-surface);\n    --mdc-theme-secondary: var(--fwc-theme-secondary);\n    --mdc-theme-surface: var(--fwc-theme-surface);\n    --mdc-typography-font-family: var(--fwc-typography-font-family);\n    font-family: var(--fwc-typography-font-family);\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { html, LitElement } from 'lit';\nimport style from './element.css';\nconst FONT_ID = 'FUSION_EQUINOR_FONT';\n/**\n * REMARKS - might unload font on disconnect\n */\nexport default class ThemeElement extends LitElement {\n    get FontLink() {\n        return document.head.querySelector(`link#${FONT_ID}`);\n    }\n    /** @override */\n    connectedCallback() {\n        super.connectedCallback();\n        !this.FontLink && this.injectFont();\n    }\n    /**\n     * Inject font to head of current document\n     */\n    injectFont() {\n        const link = document.createElement('link');\n        link.id = FONT_ID;\n        link.href = 'https://eds-static.equinor.com/font/equinor-font.css';\n        link.rel = 'stylesheet';\n        document.head.append(link);\n    }\n    render() {\n        return html `<slot></slot>`;\n    }\n}\nThemeElement.styles = [style];\n//# sourceMappingURL=element.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport './mwc-list-item.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { deepActiveElementPath, doesElementContainFocus, isNodeElement } from '@material/mwc-base/utils.js';\nimport { html } from 'lit';\nimport { property, query, queryAssignedNodes } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport MDCListFoundation, { isIndexSet } from './mwc-list-foundation.js';\nexport { createSetFromIndex, isEventMulti, isIndexSet } from './mwc-list-foundation.js';\nfunction debounceLayout(callback, waitInMS = 50) {\n    let timeoutId;\n    // tslint:disable-next-line\n    return function (updateItems = true) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n            callback(updateItems);\n        }, waitInMS);\n    };\n}\nconst isListItem = (element) => {\n    return element.hasAttribute('mwc-list-item');\n};\nfunction clearAndCreateItemsReadyPromise() {\n    const oldResolver = this.itemsReadyResolver;\n    this.itemsReady = new Promise((res) => {\n        // TODO(b/175626389): Type '(value: never[] | PromiseLike<never[]>) => void'\n        // is not assignable to type '(value?: never[] | PromiseLike<never[]> |\n        // undefined) => void'.\n        return this.itemsReadyResolver = res;\n    });\n    oldResolver();\n}\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n */\nexport class ListBase extends BaseElement {\n    constructor() {\n        super();\n        this.mdcAdapter = null;\n        this.mdcFoundationClass = MDCListFoundation;\n        this.activatable = false;\n        this.multi = false;\n        this.wrapFocus = false;\n        this.itemRoles = null;\n        this.innerRole = null;\n        this.innerAriaLabel = null;\n        this.rootTabbable = false;\n        this.previousTabindex = null;\n        this.noninteractive = false;\n        this.itemsReadyResolver = (() => {\n            //\n        });\n        this.itemsReady = Promise.resolve([]);\n        // tslint:enable:ban-ts-ignore\n        this.items_ = [];\n        const debouncedFunction = debounceLayout(this.layout.bind(this));\n        this.debouncedLayout = (updateItems = true) => {\n            clearAndCreateItemsReadyPromise.call(this);\n            debouncedFunction(updateItems);\n        };\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        await this.itemsReady;\n        return result;\n    }\n    get items() {\n        return this.items_;\n    }\n    updateItems() {\n        var _a;\n        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];\n        const listItems = [];\n        for (const node of nodes) {\n            if (isListItem(node)) {\n                listItems.push(node);\n                node._managingList = this;\n            }\n            if (node.hasAttribute('divider') && !node.hasAttribute('role')) {\n                node.setAttribute('role', 'separator');\n            }\n        }\n        this.items_ = listItems;\n        const selectedIndices = new Set();\n        this.items_.forEach((item, index) => {\n            if (this.itemRoles) {\n                item.setAttribute('role', this.itemRoles);\n            }\n            else {\n                item.removeAttribute('role');\n            }\n            if (item.selected) {\n                selectedIndices.add(index);\n            }\n        });\n        if (this.multi) {\n            this.select(selectedIndices);\n        }\n        else {\n            const index = selectedIndices.size ? selectedIndices.entries().next().value[1] : -1;\n            this.select(index);\n        }\n        const itemsUpdatedEv = new Event('items-updated', { bubbles: true, composed: true });\n        this.dispatchEvent(itemsUpdatedEv);\n    }\n    get selected() {\n        const index = this.index;\n        if (!isIndexSet(index)) {\n            if (index === -1) {\n                return null;\n            }\n            return this.items[index];\n        }\n        const selected = [];\n        for (const entry of index) {\n            selected.push(this.items[entry]);\n        }\n        return selected;\n    }\n    get index() {\n        if (this.mdcFoundation) {\n            return this.mdcFoundation.getSelectedIndex();\n        }\n        return -1;\n    }\n    render() {\n        const role = this.innerRole === null ? undefined : this.innerRole;\n        const ariaLabel = this.innerAriaLabel === null ? undefined : this.innerAriaLabel;\n        const tabindex = this.rootTabbable ? '0' : '-1';\n        return html `\n      <!-- @ts-ignore -->\n      <ul\n          tabindex=${tabindex}\n          role=\"${ifDefined(role)}\"\n          aria-label=\"${ifDefined(ariaLabel)}\"\n          class=\"mdc-deprecated-list\"\n          @keydown=${this.onKeydown}\n          @focusin=${this.onFocusIn}\n          @focusout=${this.onFocusOut}\n          @request-selected=${this.onRequestSelected}\n          @list-item-rendered=${this.onListItemConnected}>\n        <slot></slot>\n        ${this.renderPlaceholder()}\n      </ul>\n    `;\n    }\n    renderPlaceholder() {\n        var _a;\n        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];\n        if (this.emptyMessage !== undefined && nodes.length === 0) {\n            return html `\n        <mwc-list-item noninteractive>${this.emptyMessage}</mwc-list-item>\n      `;\n        }\n        return null;\n    }\n    firstUpdated() {\n        super.firstUpdated();\n        if (!this.items.length) {\n            // required because this is called before observers\n            this.mdcFoundation.setMulti(this.multi);\n            // for when children upgrade before list\n            this.layout();\n        }\n    }\n    onFocusIn(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            this.mdcFoundation.handleFocusIn(evt, index);\n        }\n    }\n    onFocusOut(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            this.mdcFoundation.handleFocusOut(evt, index);\n        }\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            const target = evt.target;\n            const isRootListItem = isListItem(target);\n            this.mdcFoundation.handleKeydown(evt, isRootListItem, index);\n        }\n    }\n    onRequestSelected(evt) {\n        if (this.mdcFoundation) {\n            let index = this.getIndexOfTarget(evt);\n            // might happen in shady dom slowness. Recalc children\n            if (index === -1) {\n                this.layout();\n                index = this.getIndexOfTarget(evt);\n                // still not found; may not be mwc-list-item. Unsupported case.\n                if (index === -1) {\n                    return;\n                }\n            }\n            const element = this.items[index];\n            if (element.disabled) {\n                return;\n            }\n            const selected = evt.detail.selected;\n            const source = evt.detail.source;\n            this.mdcFoundation.handleSingleSelection(index, source === 'interaction', selected);\n            evt.stopPropagation();\n        }\n    }\n    getIndexOfTarget(evt) {\n        const elements = this.items;\n        const path = evt.composedPath();\n        for (const pathItem of path) {\n            let index = -1;\n            if (isNodeElement(pathItem) && isListItem(pathItem)) {\n                index = elements.indexOf(pathItem);\n            }\n            if (index !== -1) {\n                return index;\n            }\n        }\n        return -1;\n    }\n    createAdapter() {\n        this.mdcAdapter = {\n            getListItemCount: () => {\n                if (this.mdcRoot) {\n                    return this.items.length;\n                }\n                return 0;\n            },\n            getFocusedElementIndex: this.getFocusedItemIndex,\n            getAttributeForElementIndex: (index, attr) => {\n                const listElement = this.mdcRoot;\n                if (!listElement) {\n                    return '';\n                }\n                const element = this.items[index];\n                return element ? element.getAttribute(attr) : '';\n            },\n            setAttributeForElementIndex: (index, attr, val) => {\n                if (!this.mdcRoot) {\n                    return;\n                }\n                const element = this.items[index];\n                if (element) {\n                    element.setAttribute(attr, val);\n                }\n            },\n            focusItemAtIndex: (index) => {\n                const element = this.items[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            setTabIndexForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (item) {\n                    item.tabindex = value;\n                }\n            },\n            notifyAction: (index) => {\n                const init = { bubbles: true, composed: true };\n                init.detail = { index };\n                const ev = new CustomEvent('action', init);\n                this.dispatchEvent(ev);\n            },\n            notifySelected: (index, diff) => {\n                const init = { bubbles: true, composed: true };\n                init.detail = { index, diff };\n                const ev = new CustomEvent('selected', init);\n                this.dispatchEvent(ev);\n            },\n            isFocusInsideList: () => {\n                return doesElementContainFocus(this);\n            },\n            isRootFocused: () => {\n                const mdcRoot = this.mdcRoot;\n                const root = mdcRoot.getRootNode();\n                return root.activeElement === mdcRoot;\n            },\n            setDisabledStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.disabled = value;\n            },\n            getDisabledStateForElementIndex: (index) => {\n                const item = this.items[index];\n                if (!item) {\n                    return false;\n                }\n                return item.disabled;\n            },\n            setSelectedStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.selected = value;\n            },\n            getSelectedStateForElementIndex: (index) => {\n                const item = this.items[index];\n                if (!item) {\n                    return false;\n                }\n                return item.selected;\n            },\n            setActivatedStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.activated = value;\n            },\n        };\n        return this.mdcAdapter;\n    }\n    selectUi(index, activate = false) {\n        const item = this.items[index];\n        if (item) {\n            item.selected = true;\n            item.activated = activate;\n        }\n    }\n    deselectUi(index) {\n        const item = this.items[index];\n        if (item) {\n            item.selected = false;\n            item.activated = false;\n        }\n    }\n    select(index) {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        this.mdcFoundation.setSelectedIndex(index);\n    }\n    toggle(index, force) {\n        if (this.multi) {\n            this.mdcFoundation.toggleMultiAtIndex(index, force);\n        }\n    }\n    onListItemConnected(e) {\n        const target = e.target;\n        this.layout(this.items.indexOf(target) === -1);\n    }\n    layout(updateItems = true) {\n        if (updateItems) {\n            this.updateItems();\n        }\n        const first = this.items[0];\n        for (const item of this.items) {\n            item.tabindex = -1;\n        }\n        if (first) {\n            if (this.noninteractive) {\n                if (!this.previousTabindex) {\n                    this.previousTabindex = first;\n                }\n            }\n            else {\n                first.tabindex = 0;\n            }\n        }\n        this.itemsReadyResolver();\n    }\n    getFocusedItemIndex() {\n        if (!this.mdcRoot) {\n            return -1;\n        }\n        if (!this.items.length) {\n            return -1;\n        }\n        const activeElementPath = deepActiveElementPath();\n        if (!activeElementPath.length) {\n            return -1;\n        }\n        for (let i = activeElementPath.length - 1; i >= 0; i--) {\n            const activeItem = activeElementPath[i];\n            if (isListItem(activeItem)) {\n                return this.items.indexOf(activeItem);\n            }\n        }\n        return -1;\n    }\n    focusItemAtIndex(index) {\n        for (const item of this.items) {\n            if (item.tabindex === 0) {\n                item.tabindex = -1;\n                break;\n            }\n        }\n        this.items[index].tabindex = 0;\n        this.items[index].focus();\n    }\n    focus() {\n        const root = this.mdcRoot;\n        if (root) {\n            root.focus();\n        }\n    }\n    blur() {\n        const root = this.mdcRoot;\n        if (root) {\n            root.blur();\n        }\n    }\n}\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"emptyMessage\", void 0);\n__decorate([\n    query('.mdc-deprecated-list')\n], ListBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '*')\n], ListBase.prototype, \"assignedElements\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '[tabindex=\"0\"]')\n], ListBase.prototype, \"tabbableElements\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setUseActivatedClass(value);\n        }\n    })\n], ListBase.prototype, \"activatable\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (newValue, oldValue) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setMulti(newValue);\n        }\n        if (oldValue !== undefined) {\n            this.layout();\n        }\n    })\n], ListBase.prototype, \"multi\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setWrapFocus(value);\n        }\n    })\n], ListBase.prototype, \"wrapFocus\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newValue, oldValue) {\n        if (oldValue !== undefined) {\n            this.updateItems();\n        }\n    })\n], ListBase.prototype, \"itemRoles\", void 0);\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"innerRole\", void 0);\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"innerAriaLabel\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListBase.prototype, \"rootTabbable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        var _a, _b;\n        if (value) {\n            const tabbable = (_b = (_a = this.tabbableElements) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n            this.previousTabindex = tabbable;\n            if (tabbable) {\n                tabbable.setAttribute('tabindex', '-1');\n            }\n        }\n        else if (!value && this.previousTabindex) {\n            this.previousTabindex.setAttribute('tabindex', '0');\n            this.previousTabindex = null;\n        }\n    })\n], ListBase.prototype, \"noninteractive\", void 0);\n//# sourceMappingURL=mwc-list-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html, LitElement } from 'lit';\nimport { property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.value = '';\n        this.group = null;\n        this.tabindex = -1;\n        this.disabled = false;\n        this.twoline = false;\n        this.activated = false;\n        this.graphic = null;\n        this.multipleGraphics = false;\n        this.hasMeta = false;\n        this.noninteractive = false;\n        this.selected = false;\n        this.shouldRenderRipple = false;\n        this._managingList = null;\n        this.boundOnClick = this.onClick.bind(this);\n        this._firstChanged = true;\n        this._skipPropRequest = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n        this.listeners = [\n            {\n                target: this,\n                eventNames: ['click'],\n                cb: () => {\n                    this.onClick();\n                },\n            },\n            {\n                target: this,\n                eventNames: ['mouseenter'],\n                cb: this.rippleHandlers.startHover,\n            },\n            {\n                target: this,\n                eventNames: ['mouseleave'],\n                cb: this.rippleHandlers.endHover,\n            },\n            {\n                target: this,\n                eventNames: ['focus'],\n                cb: this.rippleHandlers.startFocus,\n            },\n            {\n                target: this,\n                eventNames: ['blur'],\n                cb: this.rippleHandlers.endFocus,\n            },\n            {\n                target: this,\n                eventNames: ['mousedown', 'touchstart'],\n                cb: (e) => {\n                    const name = e.type;\n                    this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n                },\n            },\n        ];\n    }\n    get text() {\n        const textContent = this.textContent;\n        return textContent ? textContent.trim() : '';\n    }\n    render() {\n        const text = this.renderText();\n        const graphic = this.graphic ? this.renderGraphic() : html ``;\n        const meta = this.hasMeta ? this.renderMeta() : html ``;\n        return html `\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n    }\n    renderRipple() {\n        if (this.shouldRenderRipple) {\n            return html `\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n        }\n        else if (this.activated) {\n            return html `<div class=\"fake-activated-ripple\"></div>`;\n        }\n        else {\n            return '';\n        }\n    }\n    renderGraphic() {\n        const graphicClasses = {\n            multi: this.multipleGraphics,\n        };\n        return html `\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n    }\n    renderMeta() {\n        return html `\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n    }\n    renderText() {\n        const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n        return html `\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n    }\n    renderSingleLine() {\n        return html `<slot></slot>`;\n    }\n    renderTwoline() {\n        return html `\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n    }\n    onClick() {\n        this.fireRequestSelected(!this.selected, 'interaction');\n    }\n    onDown(upName, evt) {\n        const onUp = () => {\n            window.removeEventListener(upName, onUp);\n            this.rippleHandlers.endPress();\n        };\n        window.addEventListener(upName, onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    fireRequestSelected(selected, source) {\n        if (this.noninteractive) {\n            return;\n        }\n        const customEv = new CustomEvent('request-selected', { bubbles: true, composed: true, detail: { source, selected } });\n        this.dispatchEvent(customEv);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.noninteractive) {\n            this.setAttribute('mwc-list-item', '');\n        }\n        for (const listener of this.listeners) {\n            for (const eventName of listener.eventNames) {\n                listener.target.addEventListener(eventName, listener.cb, { passive: true });\n            }\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        for (const listener of this.listeners) {\n            for (const eventName of listener.eventNames) {\n                listener.target.removeEventListener(eventName, listener.cb);\n            }\n        }\n        if (this._managingList) {\n            this._managingList.debouncedLayout ?\n                this._managingList.debouncedLayout(true) :\n                this._managingList.layout(true);\n        }\n    }\n    // composed flag, event fire through shadow root and up through composed tree\n    firstUpdated() {\n        const ev = new Event('list-item-rendered', { bubbles: true, composed: true });\n        this.dispatchEvent(ev);\n    }\n}\n__decorate([\n    query('slot')\n], ListItemBase.prototype, \"slotElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], ListItemBase.prototype, \"ripple\", void 0);\n__decorate([\n    property({ type: String })\n], ListItemBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ListItemBase.prototype, \"group\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], ListItemBase.prototype, \"tabindex\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        if (value) {\n            this.setAttribute('aria-disabled', 'true');\n        }\n        else {\n            this.setAttribute('aria-disabled', 'false');\n        }\n    })\n], ListItemBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ListItemBase.prototype, \"twoline\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ListItemBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ListItemBase.prototype, \"graphic\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListItemBase.prototype, \"multipleGraphics\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListItemBase.prototype, \"hasMeta\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        if (value) {\n            this.removeAttribute('aria-checked');\n            this.removeAttribute('mwc-list-item');\n            this.selected = false;\n            this.activated = false;\n            this.tabIndex = -1;\n        }\n        else {\n            this.setAttribute('mwc-list-item', '');\n        }\n    })\n], ListItemBase.prototype, \"noninteractive\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        const role = this.getAttribute('role');\n        const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n            role === 'row' || role === 'tab';\n        if (isAriaSelectable && value) {\n            this.setAttribute('aria-selected', 'true');\n        }\n        else if (isAriaSelectable) {\n            this.setAttribute('aria-selected', 'false');\n        }\n        if (this._firstChanged) {\n            this._firstChanged = false;\n            return;\n        }\n        if (this._skipPropRequest) {\n            return;\n        }\n        this.fireRequestSelected(value, 'property');\n    })\n], ListItemBase.prototype, \"selected\", void 0);\n__decorate([\n    state()\n], ListItemBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    state()\n], ListItemBase.prototype, \"_managingList\", void 0);\n//# sourceMappingURL=mwc-list-item-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { Corner as CornerEnum, CornerBit } from '@material/menu-surface/constants.js';\nimport MDCMenuSurfaceFoundation from '@material/menu-surface/foundation.js';\nimport { addHasRemoveClass, BaseElement } from '@material/mwc-base/base-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { deepActiveElementPath, doesElementContainFocus } from '@material/mwc-base/utils.js';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n// tslint:disable:no-bitwise\n// required for closure compiler\nconst stringToCorner = {\n    'TOP_LEFT': CornerEnum.TOP_LEFT,\n    'TOP_RIGHT': CornerEnum.TOP_RIGHT,\n    'BOTTOM_LEFT': CornerEnum.BOTTOM_LEFT,\n    'BOTTOM_RIGHT': CornerEnum.BOTTOM_RIGHT,\n    'TOP_START': CornerEnum.TOP_START,\n    'TOP_END': CornerEnum.TOP_END,\n    'BOTTOM_START': CornerEnum.BOTTOM_START,\n    'BOTTOM_END': CornerEnum.BOTTOM_END,\n};\n/**\n * @fires opened\n * @fires closed\n */\nexport class MenuSurfaceBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCMenuSurfaceFoundation;\n        this.absolute = false;\n        this.fullwidth = false;\n        this.fixed = false;\n        this.x = null;\n        this.y = null;\n        // must be defined before open or else race condition in foundation occurs.\n        this.quick = false;\n        this.open = false;\n        this.stayOpenOnBodyClick = false;\n        this.bitwiseCorner = CornerEnum.TOP_START;\n        this.previousMenuCorner = null;\n        // must be defined before observer of anchor corner for initialization\n        this.menuCorner = 'START';\n        this.corner = 'TOP_START';\n        this.styleTop = '';\n        this.styleLeft = '';\n        this.styleRight = '';\n        this.styleBottom = '';\n        this.styleMaxHeight = '';\n        this.styleTransformOrigin = '';\n        this.anchor = null;\n        this.previouslyFocused = null;\n        this.previousAnchor = null;\n        this.onBodyClickBound = () => undefined;\n    }\n    render() {\n        return this.renderSurface();\n    }\n    renderSurface() {\n        const classes = this.getRootClasses();\n        const styles = this.getRootStyles();\n        return html `\n      <div\n          class=${classMap(classes)}\n          style=\"${styleMap(styles)}\"\n          @keydown=${this.onKeydown}\n          @opened=${this.registerBodyClick}\n          @closed=${this.deregisterBodyClick}>\n        ${this.renderContent()}\n      </div>`;\n    }\n    getRootClasses() {\n        return {\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--fixed': this.fixed,\n            'mdc-menu-surface--fullwidth': this.fullwidth,\n        };\n    }\n    getRootStyles() {\n        return {\n            'top': this.styleTop,\n            'left': this.styleLeft,\n            'right': this.styleRight,\n            'bottom': this.styleBottom,\n            'max-height': this.styleMaxHeight,\n            'transform-origin': this.styleTransformOrigin,\n        };\n    }\n    renderContent() {\n        return html `<slot></slot>`;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { hasAnchor: () => {\n                return !!this.anchor;\n            }, notifyClose: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('closed', init);\n                this.open = false;\n                this.mdcRoot.dispatchEvent(ev);\n            }, notifyClosing: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('closing', init);\n                this.mdcRoot.dispatchEvent(ev);\n            }, notifyOpen: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('opened', init);\n                this.open = true;\n                this.mdcRoot.dispatchEvent(ev);\n            }, notifyOpening: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('opening', init);\n                this.mdcRoot.dispatchEvent(ev);\n            }, isElementInContainer: () => false, isRtl: () => {\n                if (this.mdcRoot) {\n                    return getComputedStyle(this.mdcRoot).direction === 'rtl';\n                }\n                return false;\n            }, setTransformOrigin: (origin) => {\n                const root = this.mdcRoot;\n                if (!root) {\n                    return;\n                }\n                this.styleTransformOrigin = origin;\n            }, isFocused: () => {\n                return doesElementContainFocus(this);\n            }, saveFocus: () => {\n                const activeElementPath = deepActiveElementPath();\n                const pathLength = activeElementPath.length;\n                if (!pathLength) {\n                    this.previouslyFocused = null;\n                }\n                this.previouslyFocused = activeElementPath[pathLength - 1];\n            }, restoreFocus: () => {\n                if (!this.previouslyFocused) {\n                    return;\n                }\n                if ('focus' in this.previouslyFocused) {\n                    this.previouslyFocused.focus();\n                }\n            }, getInnerDimensions: () => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return { width: 0, height: 0 };\n                }\n                return { width: mdcRoot.offsetWidth, height: mdcRoot.offsetHeight };\n            }, getAnchorDimensions: () => {\n                const anchorElement = this.anchor;\n                return anchorElement ? anchorElement.getBoundingClientRect() : null;\n            }, getBodyDimensions: () => {\n                return {\n                    width: document.body.clientWidth,\n                    height: document.body.clientHeight,\n                };\n            }, getWindowDimensions: () => {\n                return {\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                };\n            }, getWindowScroll: () => {\n                return {\n                    x: window.pageXOffset,\n                    y: window.pageYOffset,\n                };\n            }, setPosition: (position) => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return;\n                }\n                this.styleLeft = 'left' in position ? `${position.left}px` : '';\n                this.styleRight = 'right' in position ? `${position.right}px` : '';\n                this.styleTop = 'top' in position ? `${position.top}px` : '';\n                this.styleBottom = 'bottom' in position ? `${position.bottom}px` : '';\n            }, setMaxHeight: async (height) => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return;\n                }\n                // must set both for IE support as IE will not set a var\n                this.styleMaxHeight = height;\n                await this.updateComplete;\n                this.styleMaxHeight = `var(--mdc-menu-max-height, ${height})`;\n            } });\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleKeydown(evt);\n        }\n    }\n    onBodyClick(evt) {\n        if (this.stayOpenOnBodyClick) {\n            return;\n        }\n        const path = evt.composedPath();\n        if (path.indexOf(this) === -1) {\n            this.close();\n        }\n    }\n    registerBodyClick() {\n        this.onBodyClickBound = this.onBodyClick.bind(this);\n        // capture otherwise listener closes menu after quick menu opens\n        document.body.addEventListener('click', this.onBodyClickBound, { passive: true, capture: true });\n    }\n    deregisterBodyClick() {\n        document.body.removeEventListener('click', this.onBodyClickBound, { capture: true });\n    }\n    onOpenChanged(isOpen, wasOpen) {\n        if (this.mdcFoundation) {\n            if (isOpen) {\n                this.mdcFoundation.open();\n                // wasOpen helps with first render (when it is `undefined`) perf\n            }\n            else if (wasOpen !== undefined) {\n                this.mdcFoundation.close();\n            }\n        }\n    }\n    close() {\n        this.open = false;\n    }\n    show() {\n        this.open = true;\n    }\n}\n__decorate([\n    query('.mdc-menu-surface')\n], MenuSurfaceBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('slot')\n], MenuSurfaceBase.prototype, \"slotElement\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (isAbsolute) {\n        if (this.mdcFoundation && !this.fixed) {\n            this.mdcFoundation.setIsHoisted(isAbsolute);\n        }\n    })\n], MenuSurfaceBase.prototype, \"absolute\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuSurfaceBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (isFixed) {\n        if (this.mdcFoundation && !this.absolute) {\n            this.mdcFoundation.setFixedPosition(isFixed);\n        }\n    })\n], MenuSurfaceBase.prototype, \"fixed\", void 0);\n__decorate([\n    property({ type: Number }),\n    observer(function (value) {\n        if (this.mdcFoundation && this.y !== null && value !== null) {\n            this.mdcFoundation.setAbsolutePosition(value, this.y);\n            this.mdcFoundation.setAnchorMargin({ left: value, top: this.y, right: -value, bottom: this.y });\n        }\n    })\n], MenuSurfaceBase.prototype, \"x\", void 0);\n__decorate([\n    property({ type: Number }),\n    observer(function (value) {\n        if (this.mdcFoundation && this.x !== null && value !== null) {\n            this.mdcFoundation.setAbsolutePosition(this.x, value);\n            this.mdcFoundation.setAnchorMargin({ left: this.x, top: value, right: -this.x, bottom: value });\n        }\n    })\n], MenuSurfaceBase.prototype, \"y\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setQuickOpen(value);\n        }\n    })\n], MenuSurfaceBase.prototype, \"quick\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (isOpen, wasOpen) {\n        this.onOpenChanged(isOpen, wasOpen);\n    })\n], MenuSurfaceBase.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuSurfaceBase.prototype, \"stayOpenOnBodyClick\", void 0);\n__decorate([\n    state(),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            if (value) {\n                this.mdcFoundation.setAnchorCorner(value);\n            }\n            else {\n                this.mdcFoundation.setAnchorCorner(value);\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"bitwiseCorner\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            const isValidValue = value === 'START' || value === 'END';\n            const isFirstTimeSet = this.previousMenuCorner === null;\n            const cornerChanged = !isFirstTimeSet && value !== this.previousMenuCorner;\n            const initiallySetToEnd = isFirstTimeSet && value === 'END';\n            if (isValidValue && (cornerChanged || initiallySetToEnd)) {\n                this.bitwiseCorner = this.bitwiseCorner ^ CornerBit.RIGHT;\n                this.mdcFoundation.flipCornerHorizontally();\n                this.previousMenuCorner = value;\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"menuCorner\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            if (value) {\n                let newCorner = stringToCorner[value];\n                if (this.menuCorner === 'END') {\n                    newCorner = newCorner ^ CornerBit.RIGHT;\n                }\n                this.bitwiseCorner = newCorner;\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"corner\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleTop\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleLeft\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleRight\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleBottom\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleMaxHeight\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleTransformOrigin\", void 0);\n//# sourceMappingURL=mwc-menu-surface-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-list/mwc-list.js';\nimport './mwc-menu-surface.js';\nimport { DefaultFocusState as DefaultFocusStateEnum } from '@material/menu/constants.js';\nimport MDCMenuFoundation from '@material/menu/foundation.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport { createSetFromIndex, isEventMulti, isIndexSet } from '@material/mwc-list/mwc-list-foundation.js';\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n * @fires opened\n * @fires closed\n */\nexport class MenuBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCMenuFoundation;\n        this.listElement_ = null;\n        this.anchor = null;\n        this.open = false;\n        this.quick = false;\n        this.wrapFocus = false;\n        this.innerRole = 'menu';\n        this.innerAriaLabel = null;\n        this.corner = 'TOP_START';\n        this.x = null;\n        this.y = null;\n        this.absolute = false;\n        this.multi = false;\n        this.activatable = false;\n        this.fixed = false;\n        this.forceGroupSelection = false;\n        this.fullwidth = false;\n        this.menuCorner = 'START';\n        this.stayOpenOnBodyClick = false;\n        this.defaultFocus = 'LIST_ROOT';\n        this._listUpdateComplete = null;\n    }\n    get listElement() {\n        if (!this.listElement_) {\n            this.listElement_ = this.renderRoot.querySelector('mwc-list');\n            return this.listElement_;\n        }\n        return this.listElement_;\n    }\n    get items() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.items;\n        }\n        return [];\n    }\n    get index() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.index;\n        }\n        return -1;\n    }\n    get selected() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.selected;\n        }\n        return null;\n    }\n    render() {\n        return this.renderSurface();\n    }\n    renderSurface() {\n        const classes = this.getSurfaceClasses();\n        return html `\n      <mwc-menu-surface\n        ?hidden=${!this.open}\n        .anchor=${this.anchor}\n        .open=${this.open}\n        .quick=${this.quick}\n        .corner=${this.corner}\n        .x=${this.x}\n        .y=${this.y}\n        .absolute=${this.absolute}\n        .fixed=${this.fixed}\n        .fullwidth=${this.fullwidth}\n        .menuCorner=${this.menuCorner}\n        ?stayOpenOnBodyClick=${this.stayOpenOnBodyClick}\n        class=${classMap(classes)}\n        @closed=${this.onClosed}\n        @opened=${this.onOpened}\n        @keydown=${this.onKeydown}>\n      ${this.renderList()}\n    </mwc-menu-surface>`;\n    }\n    getSurfaceClasses() {\n        return {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n        };\n    }\n    renderList() {\n        const itemRoles = this.innerRole === 'menu' ? 'menuitem' : 'option';\n        const classes = this.renderListClasses();\n        return html `\n      <mwc-list\n          rootTabbable\n          .innerAriaLabel=${this.innerAriaLabel}\n          .innerRole=${this.innerRole}\n          .multi=${this.multi}\n          class=${classMap(classes)}\n          .itemRoles=${itemRoles}\n          .wrapFocus=${this.wrapFocus}\n          .activatable=${this.activatable}\n          @action=${this.onAction}>\n        <slot></slot>\n      </mwc-list>`;\n    }\n    renderListClasses() {\n        return {\n            'mdc-deprecated-list': true,\n        };\n    }\n    createAdapter() {\n        return {\n            addClassToElementAtIndex: (index, className) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                if (className === 'mdc-menu-item--selected') {\n                    if (this.forceGroupSelection && !element.selected) {\n                        listElement.toggle(index, true);\n                    }\n                }\n                else {\n                    element.classList.add(className);\n                }\n            },\n            removeClassFromElementAtIndex: (index, className) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                if (className === 'mdc-menu-item--selected') {\n                    if (element.selected) {\n                        listElement.toggle(index, false);\n                    }\n                }\n                else {\n                    element.classList.remove(className);\n                }\n            },\n            addAttributeToElementAtIndex: (index, attr, value) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                element.setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: (index, attr) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                element.removeAttribute(attr);\n            },\n            getAttributeFromElementAtIndex: (index, attr) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return null;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return null;\n                }\n                return element.getAttribute(attr);\n            },\n            elementContainsClass: (element, className) => element.classList.contains(className),\n            closeSurface: () => {\n                this.open = false;\n            },\n            getElementIndex: (element) => {\n                const listElement = this.listElement;\n                if (listElement) {\n                    return listElement.items.indexOf(element);\n                }\n                return -1;\n            },\n            notifySelected: () => { },\n            getMenuItemCount: () => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return 0;\n                }\n                return listElement.items.length;\n            },\n            focusItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            focusListRoot: () => {\n                if (this.listElement) {\n                    this.listElement.focus();\n                }\n            },\n            getSelectedSiblingOfItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return -1;\n                }\n                const elementAtIndex = listElement.items[index];\n                if (!elementAtIndex || !elementAtIndex.group) {\n                    return -1;\n                }\n                for (let i = 0; i < listElement.items.length; i++) {\n                    if (i === index) {\n                        continue;\n                    }\n                    const current = listElement.items[i];\n                    if (current.selected && current.group === elementAtIndex.group) {\n                        return i;\n                    }\n                }\n                return -1;\n            },\n            isSelectableItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return false;\n                }\n                const elementAtIndex = listElement.items[index];\n                if (!elementAtIndex) {\n                    return false;\n                }\n                return elementAtIndex.hasAttribute('group');\n            },\n        };\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleKeydown(evt);\n        }\n    }\n    onAction(evt) {\n        const listElement = this.listElement;\n        if (this.mdcFoundation && listElement) {\n            const index = evt.detail.index;\n            const el = listElement.items[index];\n            if (el) {\n                this.mdcFoundation.handleItemAction(el);\n            }\n        }\n    }\n    onOpened() {\n        this.open = true;\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleMenuSurfaceOpened();\n        }\n    }\n    onClosed() {\n        this.open = false;\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        await this._listUpdateComplete;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    async firstUpdated() {\n        super.firstUpdated();\n        const listElement = this.listElement;\n        if (listElement) {\n            this._listUpdateComplete = listElement.updateComplete;\n            await this._listUpdateComplete;\n        }\n    }\n    select(index) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.select(index);\n        }\n    }\n    close() {\n        this.open = false;\n    }\n    show() {\n        this.open = true;\n    }\n    getFocusedItemIndex() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.getFocusedItemIndex();\n        }\n        return -1;\n    }\n    focusItemAtIndex(index) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.focusItemAtIndex(index);\n        }\n    }\n    layout(updateItems = true) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.layout(updateItems);\n        }\n    }\n}\n__decorate([\n    query('.mdc-menu')\n], MenuBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('slot')\n], MenuBase.prototype, \"slotElement\", void 0);\n__decorate([\n    property({ type: Object })\n], MenuBase.prototype, \"anchor\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], MenuBase.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"quick\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"wrapFocus\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"innerRole\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"innerAriaLabel\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"corner\", void 0);\n__decorate([\n    property({ type: Number })\n], MenuBase.prototype, \"x\", void 0);\n__decorate([\n    property({ type: Number })\n], MenuBase.prototype, \"y\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"absolute\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"multi\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"activatable\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"fixed\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"forceGroupSelection\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"menuCorner\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"stayOpenOnBodyClick\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setDefaultFocusState(DefaultFocusStateEnum[value]);\n        }\n    })\n], MenuBase.prototype, \"defaultFocus\", void 0);\n//# sourceMappingURL=mwc-menu-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { MDCNotchedOutlineFoundation } from '@material/notched-outline/foundation.js';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport class NotchedOutlineBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCNotchedOutlineFoundation;\n        this.width = 0;\n        this.open = false;\n        this.lastOpen = this.open;\n    }\n    createAdapter() {\n        return {\n            addClass: (className) => this.mdcRoot.classList.add(className),\n            removeClass: (className) => this.mdcRoot.classList.remove(className),\n            setNotchWidthProperty: (width) => this.notchElement.style.setProperty('width', `${width}px`),\n            removeNotchWidthProperty: () => this.notchElement.style.removeProperty('width'),\n        };\n    }\n    openOrClose(shouldOpen, width) {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        if (shouldOpen && width !== undefined) {\n            this.mdcFoundation.notch(width);\n        }\n        else {\n            this.mdcFoundation.closeNotch();\n        }\n    }\n    render() {\n        this.openOrClose(this.open, this.width);\n        const classes = classMap({\n            'mdc-notched-outline--notched': this.open,\n        });\n        return html `\n      <span class=\"mdc-notched-outline ${classes}\">\n        <span class=\"mdc-notched-outline__leading\"></span>\n        <span class=\"mdc-notched-outline__notch\">\n          <slot></slot>\n        </span>\n        <span class=\"mdc-notched-outline__trailing\"></span>\n      </span>`;\n    }\n}\n__decorate([\n    query('.mdc-notched-outline')\n], NotchedOutlineBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Number })\n], NotchedOutlineBase.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], NotchedOutlineBase.prototype, \"open\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], NotchedOutlineBase.prototype, \"notchElement\", void 0);\n//# sourceMappingURL=mwc-notched-outline-base.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { matches } from '@material/dom/ponyfill.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport MDCRippleFoundation from '@material/ripple/foundation.js';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n/** @soyCompatible */\nexport class RippleBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.primary = false;\n        this.accent = false;\n        this.unbounded = false;\n        this.disabled = false;\n        this.activated = false;\n        this.selected = false;\n        this.internalUseStateLayerCustomProperties = false;\n        this.hovering = false;\n        this.bgFocused = false;\n        this.fgActivation = false;\n        this.fgDeactivation = false;\n        this.fgScale = '';\n        this.fgSize = '';\n        this.translateStart = '';\n        this.translateEnd = '';\n        this.leftPos = '';\n        this.topPos = '';\n        this.mdcFoundationClass = MDCRippleFoundation;\n    }\n    get isActive() {\n        return matches(this.parentElement || this, ':active');\n    }\n    createAdapter() {\n        return {\n            browserSupportsCssVars: () => true,\n            isUnbounded: () => this.unbounded,\n            isSurfaceActive: () => this.isActive,\n            isSurfaceDisabled: () => this.disabled,\n            addClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = true;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            removeClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = false;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            containsEventTarget: () => true,\n            registerInteractionHandler: () => undefined,\n            deregisterInteractionHandler: () => undefined,\n            registerDocumentInteractionHandler: () => undefined,\n            deregisterDocumentInteractionHandler: () => undefined,\n            registerResizeHandler: () => undefined,\n            deregisterResizeHandler: () => undefined,\n            updateCssVariable: (varName, value) => {\n                switch (varName) {\n                    case '--mdc-ripple-fg-scale':\n                        this.fgScale = value;\n                        break;\n                    case '--mdc-ripple-fg-size':\n                        this.fgSize = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-end':\n                        this.translateEnd = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-start':\n                        this.translateStart = value;\n                        break;\n                    case '--mdc-ripple-left':\n                        this.leftPos = value;\n                        break;\n                    case '--mdc-ripple-top':\n                        this.topPos = value;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            computeBoundingRect: () => (this.parentElement || this).getBoundingClientRect(),\n            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),\n        };\n    }\n    startPress(ev) {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.activate(ev);\n        });\n    }\n    endPress() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.deactivate();\n        });\n    }\n    startFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleFocus();\n        });\n    }\n    endFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleBlur();\n        });\n    }\n    startHover() {\n        this.hovering = true;\n    }\n    endHover() {\n        this.hovering = false;\n    }\n    /**\n     * Wait for the MDCFoundation to be created by `firstUpdated`\n     */\n    waitForFoundation(fn) {\n        if (this.mdcFoundation) {\n            fn();\n        }\n        else {\n            this.updateComplete.then(fn);\n        }\n    }\n    update(changedProperties) {\n        if (changedProperties.has('disabled')) {\n            // stop hovering when ripple is disabled to prevent a stuck \"hover\" state\n            // When re-enabled, the outer component will get a `mouseenter` event on\n            // the first movement, which will call `startHover()`\n            if (this.disabled) {\n                this.endHover();\n            }\n        }\n        super.update(changedProperties);\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldActivateInPrimary = this.activated && (this.primary || !this.accent);\n        const shouldSelectInPrimary = this.selected && (this.primary || !this.accent);\n        /** @classMap */\n        const classes = {\n            'mdc-ripple-surface--accent': this.accent,\n            'mdc-ripple-surface--primary--activated': shouldActivateInPrimary,\n            'mdc-ripple-surface--accent--activated': this.accent && this.activated,\n            'mdc-ripple-surface--primary--selected': shouldSelectInPrimary,\n            'mdc-ripple-surface--accent--selected': this.accent && this.selected,\n            'mdc-ripple-surface--disabled': this.disabled,\n            'mdc-ripple-surface--hover': this.hovering,\n            'mdc-ripple-surface--primary': this.primary,\n            'mdc-ripple-surface--selected': this.selected,\n            'mdc-ripple-upgraded--background-focused': this.bgFocused,\n            'mdc-ripple-upgraded--foreground-activation': this.fgActivation,\n            'mdc-ripple-upgraded--foreground-deactivation': this.fgDeactivation,\n            'mdc-ripple-upgraded--unbounded': this.unbounded,\n            'mdc-ripple-surface--internal-use-state-layer-custom-properties': this.internalUseStateLayerCustomProperties,\n        };\n        return html `\n        <div class=\"mdc-ripple-surface mdc-ripple-upgraded ${classMap(classes)}\"\n          style=\"${styleMap({\n            '--mdc-ripple-fg-scale': this.fgScale,\n            '--mdc-ripple-fg-size': this.fgSize,\n            '--mdc-ripple-fg-translate-end': this.translateEnd,\n            '--mdc-ripple-fg-translate-start': this.translateStart,\n            '--mdc-ripple-left': this.leftPos,\n            '--mdc-ripple-top': this.topPos,\n        })}\"></div>`;\n    }\n}\n__decorate([\n    query('.mdc-ripple-surface')\n], RippleBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"primary\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"accent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"unbounded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"internalUseStateLayerCustomProperties\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"hovering\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"bgFocused\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgActivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgDeactivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgScale\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgSize\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateStart\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateEnd\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"leftPos\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"topPos\", void 0);\n//# sourceMappingURL=mwc-ripple-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-notched-outline/mwc-notched-outline.js';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { floatingLabel } from '@material/mwc-floating-label/mwc-floating-label-directive.js';\nimport { lineRipple } from '@material/mwc-line-ripple/mwc-line-ripple-directive.js';\nimport MDCTextFieldFoundation from '@material/textfield/foundation.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nconst passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];\nconst createValidityObj = (customValidity = {}) => {\n    /*\n     * We need to make ValidityState an object because it is readonly and\n     * we cannot use the spread operator. Also, we don't export\n     * `CustomValidityState` because it is a leaky implementation and the user\n     * already has access to `ValidityState` in lib.dom.ts. Also an interface\n     * {a: Type} can be casted to {readonly a: Type} so passing any object\n     * should be fine.\n     */\n    const objectifiedCustomValidity = {};\n    // eslint-disable-next-line guard-for-in\n    for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName] =\n            customValidity[propName];\n    }\n    return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);\n};\n/** @soyCompatible */\nexport class TextFieldBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCTextFieldFoundation;\n        this.value = '';\n        this.type = 'text';\n        this.placeholder = '';\n        this.label = '';\n        this.icon = '';\n        this.iconTrailing = '';\n        this.disabled = false;\n        this.required = false;\n        this.minLength = -1;\n        this.maxLength = -1;\n        this.outlined = false;\n        this.helper = '';\n        this.validateOnInitialRender = false;\n        this.validationMessage = '';\n        this.autoValidate = false;\n        this.pattern = '';\n        this.min = '';\n        this.max = '';\n        /**\n         * step can be a number or the keyword \"any\".\n         *\n         * Use `String` typing to pass down the value as a string and let the native\n         * input cast internally as needed.\n         */\n        this.step = null;\n        this.size = null;\n        this.helperPersistent = false;\n        this.charCounter = false;\n        this.endAligned = false;\n        this.prefix = '';\n        this.suffix = '';\n        this.name = '';\n        this.readOnly = false;\n        this.autocapitalize = '';\n        this.outlineOpen = false;\n        this.outlineWidth = 0;\n        this.isUiValid = true;\n        this.focused = false;\n        this._validity = createValidityObj();\n        this.validityTransform = null;\n    }\n    get validity() {\n        this._checkValidity(this.value);\n        return this._validity;\n    }\n    get willValidate() {\n        return this.formElement.willValidate;\n    }\n    get selectionStart() {\n        return this.formElement.selectionStart;\n    }\n    get selectionEnd() {\n        return this.formElement.selectionEnd;\n    }\n    focus() {\n        const focusEvt = new CustomEvent('focus');\n        this.formElement.dispatchEvent(focusEvt);\n        this.formElement.focus();\n    }\n    blur() {\n        const blurEvt = new CustomEvent('blur');\n        this.formElement.dispatchEvent(blurEvt);\n        this.formElement.blur();\n    }\n    select() {\n        this.formElement.select();\n    }\n    setSelectionRange(selectionStart, selectionEnd, selectionDirection) {\n        this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n    }\n    update(changedProperties) {\n        if (changedProperties.has('autoValidate') && this.mdcFoundation) {\n            this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        }\n        if (changedProperties.has('value') && typeof this.value !== 'string') {\n            this.value = `${this.value}`;\n        }\n        super.update(changedProperties);\n    }\n    setFormData(formData) {\n        if (this.name) {\n            formData.append(this.name, this.value);\n        }\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n        const shouldRenderHelperText = !!this.helper || !!this.validationMessage || shouldRenderCharCounter;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field--disabled': this.disabled,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--filled': !this.outlined,\n            'mdc-text-field--outlined': this.outlined,\n            'mdc-text-field--with-leading-icon': this.icon,\n            'mdc-text-field--with-trailing-icon': this.iconTrailing,\n            'mdc-text-field--end-aligned': this.endAligned,\n        };\n        return html `\n      <label class=\"mdc-text-field ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderLeadingIcon()}\n        ${this.renderPrefix()}\n        ${this.renderInput(shouldRenderHelperText)}\n        ${this.renderSuffix()}\n        ${this.renderTrailingIcon()}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}\n    `;\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('value') &&\n            changedProperties.get('value') !== undefined) {\n            this.mdcFoundation.setValue(this.value);\n            if (this.autoValidate) {\n                this.reportValidity();\n            }\n        }\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.outlined ? '' : html `\n      <span class=\"mdc-text-field__ripple\"></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderOutline() {\n        return !this.outlined ? '' : html `\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n    }\n    /** @soyTemplate */\n    renderLabel() {\n        return !this.label ?\n            '' :\n            html `\n      <span\n          .floatingLabelFoundation=${floatingLabel(this.label)}\n          id=\"label\">${this.label}</span>\n    `;\n    }\n    /** @soyTemplate */\n    renderLeadingIcon() {\n        return this.icon ? this.renderIcon(this.icon) : '';\n    }\n    /** @soyTemplate */\n    renderTrailingIcon() {\n        return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';\n    }\n    /** @soyTemplate */\n    renderIcon(icon, isTrailingIcon = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__icon--leading': !isTrailingIcon,\n            'mdc-text-field__icon--trailing': isTrailingIcon\n        };\n        return html `<i class=\"material-icons mdc-text-field__icon ${classMap(classes)}\">${icon}</i>`;\n    }\n    /** @soyTemplate */\n    renderPrefix() {\n        return this.prefix ? this.renderAffix(this.prefix) : '';\n    }\n    /** @soyTemplate */\n    renderSuffix() {\n        return this.suffix ? this.renderAffix(this.suffix, true) : '';\n    }\n    /** @soyTemplate */\n    renderAffix(content, isSuffix = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__affix--prefix': !isSuffix,\n            'mdc-text-field__affix--suffix': isSuffix\n        };\n        return html `<span class=\"mdc-text-field__affix ${classMap(classes)}\">\n        ${content}</span>`;\n    }\n    /** @soyTemplate */\n    renderInput(shouldRenderHelperText) {\n        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n        const autocapitalizeOrUndef = this.autocapitalize ?\n            this.autocapitalize :\n            undefined;\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n        const ariaControlsOrUndef = shouldRenderHelperText ? 'helper-text' : undefined;\n        const ariaDescribedbyOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            'helper-text' :\n            undefined;\n        // TODO: live() directive needs casting for lit-analyzer\n        // https://github.com/runem/lit-analyzer/pull/91/files\n        // TODO: lit-analyzer labels min/max as (number|string) instead of string\n        return html `\n      <input\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          aria-controls=\"${ifDefined(ariaControlsOrUndef)}\"\n          aria-describedby=\"${ifDefined(ariaDescribedbyOrUndef)}\"\n          class=\"mdc-text-field__input\"\n          type=\"${this.type}\"\n          .value=\"${live(this.value)}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          pattern=\"${ifDefined(this.pattern ? this.pattern : undefined)}\"\n          min=\"${ifDefined(this.min === '' ? undefined : this.min)}\"\n          max=\"${ifDefined(this.max === '' ? undefined : this.max)}\"\n          step=\"${ifDefined(this.step === null ? undefined : this.step)}\"\n          size=\"${ifDefined(this.size === null ? undefined : this.size)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @focus=\"${this.onInputFocus}\"\n          @blur=\"${this.onInputBlur}\">`;\n    }\n    /** @soyTemplate */\n    renderLineRipple() {\n        return this.outlined ?\n            '' :\n            html `\n      <span .lineRippleFoundation=${lineRipple()}></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderHelperText(shouldRenderHelperText, shouldRenderCharCounter) {\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field-helper-text--persistent': this.helperPersistent,\n            'mdc-text-field-helper-text--validation-msg': showValidationMessage,\n        };\n        const ariaHiddenOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            undefined :\n            'true';\n        const helperText = showValidationMessage ? this.validationMessage : this.helper;\n        return !shouldRenderHelperText ? '' : html `\n      <div class=\"mdc-text-field-helper-line\">\n        <div id=\"helper-text\"\n             aria-hidden=\"${ifDefined(ariaHiddenOrUndef)}\"\n             class=\"mdc-text-field-helper-text ${classMap(classes)}\"\n             >${helperText}</div>\n        ${this.renderCharCounter(shouldRenderCharCounter)}\n      </div>`;\n    }\n    /** @soyTemplate */\n    renderCharCounter(shouldRenderCharCounter) {\n        const length = Math.min(this.value.length, this.maxLength);\n        return !shouldRenderCharCounter ? '' : html `\n      <span class=\"mdc-text-field-character-counter\"\n            >${length} / ${this.maxLength}</span>`;\n    }\n    onInputFocus() {\n        this.focused = true;\n    }\n    onInputBlur() {\n        this.focused = false;\n        this.reportValidity();\n    }\n    checkValidity() {\n        const isValid = this._checkValidity(this.value);\n        if (!isValid) {\n            const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });\n            this.dispatchEvent(invalidEvent);\n        }\n        return isValid;\n    }\n    reportValidity() {\n        const isValid = this.checkValidity();\n        this.mdcFoundation.setValid(isValid);\n        this.isUiValid = isValid;\n        return isValid;\n    }\n    _checkValidity(value) {\n        const nativeValidity = this.formElement.validity;\n        let validity = createValidityObj(nativeValidity);\n        if (this.validityTransform) {\n            const customValidity = this.validityTransform(value, validity);\n            validity = Object.assign(Object.assign({}, validity), customValidity);\n            this.mdcFoundation.setUseNativeValidation(false);\n        }\n        else {\n            this.mdcFoundation.setUseNativeValidation(true);\n        }\n        this._validity = validity;\n        return this._validity.valid;\n    }\n    setCustomValidity(message) {\n        this.validationMessage = message;\n        this.formElement.setCustomValidity(message);\n    }\n    handleInputChange() {\n        this.value = this.formElement.value;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());\n    }\n    getRootAdapterMethods() {\n        return Object.assign({ registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler), deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler), registerValidationAttributeChangeHandler: (handler) => {\n                const getAttributesList = (mutationsList) => {\n                    return mutationsList.map((mutation) => mutation.attributeName)\n                        .filter((attributeName) => attributeName);\n                };\n                const observer = new MutationObserver((mutationsList) => {\n                    handler(getAttributesList(mutationsList));\n                });\n                const config = { attributes: true };\n                observer.observe(this.formElement, config);\n                return observer;\n            }, deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect() }, addHasRemoveClass(this.mdcRoot));\n    }\n    getInputAdapterMethods() {\n        return {\n            getNativeInput: () => this.formElement,\n            // since HelperTextFoundation is not used, aria-describedby a11y logic\n            // is implemented in render method instead of these adapter methods\n            setInputAttr: () => undefined,\n            removeInputAttr: () => undefined,\n            isFocused: () => this.shadowRoot ?\n                this.shadowRoot.activeElement === this.formElement :\n                false,\n            registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, { passive: evtType in passiveEvents }),\n            deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler),\n        };\n    }\n    getLabelAdapterMethods() {\n        return {\n            floatLabel: (shouldFloat) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.float(shouldFloat),\n            getLabelWidth: () => {\n                return this.labelElement ?\n                    this.labelElement.floatingLabelFoundation.getWidth() :\n                    0;\n            },\n            hasLabel: () => Boolean(this.labelElement),\n            shakeLabel: (shouldShake) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.shake(shouldShake),\n            setLabelRequired: (isRequired) => {\n                if (this.labelElement) {\n                    this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n                }\n            },\n        };\n    }\n    getLineRippleAdapterMethods() {\n        return {\n            activateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.activate();\n                }\n            },\n            deactivateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.deactivate();\n                }\n            },\n            setLineRippleTransformOrigin: (normalizedX) => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);\n                }\n            },\n        };\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        var _a;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        await ((_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete);\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    firstUpdated() {\n        var _a;\n        super.firstUpdated();\n        this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        if (this.validateOnInitialRender) {\n            this.reportValidity();\n        }\n        // wait for the outline element to render to update the notch width\n        (_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete.then(() => {\n            var _a;\n            // `foundation.notchOutline()` assumes the label isn't floating and\n            // multiplies by a constant, but the label is already is floating at this\n            // stage, therefore directly set the outline width to the label width\n            this.outlineWidth =\n                ((_a = this.labelElement) === null || _a === void 0 ? void 0 : _a.floatingLabelFoundation.getWidth()) || 0;\n        });\n    }\n    getOutlineAdapterMethods() {\n        return {\n            closeOutline: () => this.outlineElement && (this.outlineOpen = false),\n            hasOutline: () => Boolean(this.outlineElement),\n            notchOutline: (labelWidth) => {\n                const outlineElement = this.outlineElement;\n                if (outlineElement && !this.outlineOpen) {\n                    this.outlineWidth = labelWidth;\n                    this.outlineOpen = true;\n                }\n            }\n        };\n    }\n    async layout() {\n        await this.updateComplete;\n        const labelElement = this.labelElement;\n        if (!labelElement) {\n            this.outlineOpen = false;\n            return;\n        }\n        const shouldFloat = !!this.label && !!this.value;\n        labelElement.floatingLabelFoundation.float(shouldFloat);\n        if (!this.outlined) {\n            return;\n        }\n        this.outlineOpen = shouldFloat;\n        await this.updateComplete;\n        /* When the textfield automatically notches due to a value and label\n         * being defined, the textfield may be set to `display: none` by the user.\n         * this means that the notch is of size 0px. We provide this function so\n         * that the user may manually resize the notch to the floated label's\n         * width.\n         */\n        const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n        if (this.outlineOpen) {\n            this.outlineWidth = labelWidth;\n            await this.updateComplete;\n        }\n    }\n}\n__decorate([\n    query('.mdc-text-field')\n], TextFieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], TextFieldBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('.mdc-floating-label')\n], TextFieldBase.prototype, \"labelElement\", void 0);\n__decorate([\n    query('.mdc-line-ripple')\n], TextFieldBase.prototype, \"lineRippleElement\", void 0);\n__decorate([\n    query('mwc-notched-outline')\n], TextFieldBase.prototype, \"outlineElement\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], TextFieldBase.prototype, \"notchElement\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.label !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"iconTrailing\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], TextFieldBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"required\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"minLength\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"maxLength\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.outlined !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"helper\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"validateOnInitialRender\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"validationMessage\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"autoValidate\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"pattern\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"min\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"max\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"step\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"helperPersistent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"charCounter\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"endAligned\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"prefix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"suffix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"inputMode\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"readOnly\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"autocapitalize\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineOpen\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineWidth\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"isUiValid\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"focused\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], TextFieldBase.prototype, \"handleInputChange\", null);\n//# sourceMappingURL=mwc-textfield-base.js.map"],"names":[],"sourceRoot":""}